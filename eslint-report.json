[{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\adminLogin.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2919,2922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2919,2922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3116,3119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3116,3119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\nimport { z } from 'zod';\nimport { AppContext, ApiResponse, ApiError } from '../types';\n\n/**\n * 管理員登入 API 端點\n * 提供簡單的硬編碼認證機制，驗證成功後返回存取權杖\n */\nexport class AdminLogin extends OpenAPIRoute {\n\tschema = {\n\t\ttags: ['Admin'],\n\t\tsummary: '管理員登入',\n\t\tdescription: '驗證管理員帳號密碼，成功後返回存取權杖',\n\t\trequest: {\n\t\t\tbody: {\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tusername: z.string().min(1).describe('管理員帳號'),\n\t\t\t\t\t\t\tpassword: z.string().min(1).describe('管理員密碼')\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tresponses: {\n\t\t\t200: {\n\t\t\t\tdescription: '登入成功',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse.extend({\n\t\t\t\t\t\t\ttoken: z.string().optional().describe('存取權杖')\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t400: {\n\t\t\t\tdescription: '請求參數錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t401: {\n\t\t\t\tdescription: '帳號或密碼錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t500: {\n\t\t\t\tdescription: '伺服器內部錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tasync handle(c: AppContext) {\n\t\tconst requestId = this.generateRequestId();\n\t\tconst startTime = Date.now();\n\n\t\t// 設定回應標頭\n\t\tc.header('X-Request-ID', requestId);\n\t\tc.header('Content-Type', 'application/json');\n\n\t\ttry {\n\t\t\t// 解析請求體\n\t\t\tconst body = await c.req.json();\n\t\t\tconst { username, password } = body;\n\n\t\t\t// 驗證必要參數\n\t\t\tif (!username || !password) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '請以 JSON 格式傳送帳號密碼',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 400);\n\t\t\t}\n\n\t\t\t// 驗證帳號密碼\n\t\t\tconst isValidCredentials = this.validateCredentials(\n\t\t\t\tusername.toString().trim(),\n\t\t\t\tpassword.toString().trim(),\n\t\t\t\tc.env\n\t\t\t);\n\n\t\t\tif (!isValidCredentials) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '帳號或密碼錯誤',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 401);\n\t\t\t}\n\n\t\t\t// 生成存取權杖\n\t\t\tconst token = await this.generateAccessToken();\n\n\t\t\tconst response = {\n\t\t\t\tsuccess: true,\n\t\t\t\ttoken: token,\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(response);\n\n\t\t} catch (error) {\n\t\t\tconsole.error('AdminLogin 錯誤:', error);\n\n\t\t\tconst errorResponse = {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '登入失敗: ' + (error instanceof Error ? error.message : String(error)),\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(errorResponse, statusCode as any);\n\t\t}\n\t}\n\n\t/**\n\t * 驗證管理員帳號密碼\n\t * 支援環境變數配置或硬編碼預設值\n\t * @param username 使用者名稱\n\t * @param password 密碼\n\t * @param env 環境變數\n\t */\n\tprivate validateCredentials(username: string, password: string, env: any): boolean {\n\t\t// 優先使用環境變數中的管理員帳號密碼\n\t\tconst validUsername = env.ADMIN_USERNAME || 'admin';\n\t\tconst validPassword = env.ADMIN_PASSWORD || 'admin123';\n\n\t\t// 進行帳號密碼比對\n\t\treturn username === validUsername && password === validPassword;\n\t}\n\n\t/**\n\t * 生成存取權杖\n\t * 使用 Web Crypto API 生成安全的隨機權杖\n\t */\n\tprivate async generateAccessToken(): Promise<string> {\n\t\ttry {\n\t\t\t// 生成 16 位元組的隨機資料\n\t\t\tconst randomBytes = crypto.getRandomValues(new Uint8Array(16));\n\t\t\t\n\t\t\t// 轉換為十六進位字串\n\t\t\tconst token = Array.from(randomBytes)\n\t\t\t\t.map(byte => byte.toString(16).padStart(2, '0'))\n\t\t\t\t.join('');\n\n\t\t\treturn token;\n\t\t} catch (error) {\n\t\t\t// 如果 Web Crypto API 失敗，使用備用方案\n\t\t\tconsole.warn('Web Crypto API 失敗，使用備用權杖生成方案:', error);\n\t\t\t\n\t\t\t// 備用方案：使用時間戳和隨機數\n\t\t\tconst timestamp = Date.now().toString(36);\n\t\t\tconst random = Math.floor(Math.random() * 0xFFFFFFFF).toString(36);\n\t\t\treturn `${timestamp}-${random}`;\n\t\t}\n\t}\n\n\t/**\n\t * 生成請求 ID\n\t */\n\tprivate generateRequestId(): string {\n\t\tconst timestamp = Date.now();\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\n\t}\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\batchDeleteOrders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4817,4820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4817,4820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4963,4966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4963,4966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6010,6013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6010,6013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":263,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6816,6819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6816,6819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\nimport { z } from 'zod';\nimport { AppContext, ApiResponse, ApiError } from '../types';\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\nimport { CacheService } from '../services/CacheService';\n\n/**\n * 批量刪除 Google Sheets 訂單的 API 端點\n * 支援一次刪除多個訂單，並自動重新排序後續訂單的 ID\n */\nexport class BatchDeleteOrders extends OpenAPIRoute {\n\tschema = {\n\t\ttags: ['Orders'],\n\t\tsummary: '批量刪除訂單',\n\t\tdescription: '從 Google Sheets 中批量刪除指定訂單，並重新排序所有訂單的 ID',\n\t\trequest: {\n\t\t\tbody: {\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tids: z.array(z.string()).min(1).describe('要刪除的訂單 ID 陣列')\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tresponses: {\n\t\t\t200: {\n\t\t\t\tdescription: '批量刪除完成',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse.extend({\n\t\t\t\t\t\t\tmessage: z.string().optional(),\n\t\t\t\t\t\t\tresults: z.array(z.object({\n\t\t\t\t\t\t\t\tid: z.string(),\n\t\t\t\t\t\t\t\tsuccess: z.boolean(),\n\t\t\t\t\t\t\t\tmessage: z.string(),\n\t\t\t\t\t\t\t\torderNumber: z.string().optional()\n\t\t\t\t\t\t\t})).optional(),\n\t\t\t\t\t\t\ttotalDeleted: z.number().optional(),\n\t\t\t\t\t\t\ttotalFailed: z.number().optional(),\n\t\t\t\t\t\t\treorder_result: z.object({\n\t\t\t\t\t\t\t\tsuccess: z.boolean(),\n\t\t\t\t\t\t\t\tmessage: z.string(),\n\t\t\t\t\t\t\t\tupdated_rows: z.number()\n\t\t\t\t\t\t\t}).optional()\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t400: {\n\t\t\t\tdescription: '請求參數錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t404: {\n\t\t\t\tdescription: '找不到指定訂單',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t500: {\n\t\t\t\tdescription: '伺服器內部錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tasync handle(c: AppContext) {\n\t\tconst requestId = this.generateRequestId();\n\t\tconst startTime = Date.now();\n\n\t\t// 設定回應標頭\n\t\tc.header('X-Request-ID', requestId);\n\t\tc.header('Content-Type', 'application/json');\n\n\t\ttry {\n\t\t\t// 解析請求體\n\t\t\tconst body = await c.req.json();\n\t\t\tconst { ids } = body;\n\n\t\t\t// 驗證必要參數\n\t\t\tif (!ids || !Array.isArray(ids) || ids.length === 0) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '缺少參數或參數格式錯誤',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 400);\n\t\t\t}\n\n\t\t\t// 初始化服務\n\t\t\tconst env = c.env;\n\t\t\tconst sheetsService = new GoogleSheetsService(\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\n\t\t\t\tenv.GOOGLE_SHEET_ID\n\t\t\t);\n\t\t\tconst cacheService = new CacheService(\n\t\t\t\tenv.CACHE_KV,\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\n\t\t\t);\n\n\t\t\t// 從 Google Sheets 讀取當前資料（Sheet1 工作表）\n\t\t\tconst sheetData = await sheetsService.getSheetData('Sheet1');\n\n\t\t\tif (!sheetData || sheetData.length === 0) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '工作表中沒有資料',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 500);\n\t\t\t}\n\n\t\t\t// 驗證所有要刪除的 ID 是否有效\n\t\t\tconst validationResult = this.validateOrderIds(ids, sheetData);\n\t\t\t\n\t\t\tif (validationResult.invalidIds.length > 0) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: `以下訂單ID無效：${validationResult.invalidIds.join(', ')}`,\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 404);\n\t\t\t}\n\n\t\t\t// 獲取工作表 ID\n\t\t\tconst sheetId = await this.getSheetId(sheetsService, 'Sheet1');\n\n\t\t\t// 執行批量刪除\n\t\t\tconst deleteResults = await this.batchDeleteRows(\n\t\t\t\tsheetsService,\n\t\t\t\tsheetId,\n\t\t\t\tvalidationResult.validIds,\n\t\t\t\tvalidationResult.orderNumbers\n\t\t\t);\n\n\t\t\t// 重新排序訂單 ID（只有在有成功刪除的情況下才執行）\n\t\t\tlet reorderResult = null;\n\t\t\tif (deleteResults.deletedCount > 0) {\n\t\t\t\treorderResult = await this.reorderOrderIdsAfterBatchDelete(\n\t\t\t\t\tsheetsService,\n\t\t\t\t\t'Sheet1'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// 刪除成功後清除相關快取\n\t\t\tawait this.clearRelatedCache(cacheService);\n\n\t\t\tconst response = {\n\t\t\t\tsuccess: true,\n\t\t\t\tmessage: `批次刪除完成：成功 ${deleteResults.deletedCount} 筆，失敗 ${deleteResults.failedCount} 筆`,\n\t\t\t\tresults: deleteResults.results,\n\t\t\t\ttotalDeleted: deleteResults.deletedCount,\n\t\t\t\ttotalFailed: deleteResults.failedCount,\n\t\t\t\treorder_result: reorderResult,\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(response);\n\n\t\t} catch (error) {\n\t\t\tconsole.error('BatchDeleteOrders 錯誤:', error);\n\n\t\t\tconst errorResponse = {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '批量刪除失敗: ' + (error instanceof Error ? error.message : String(error)),\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(errorResponse, statusCode as any);\n\t\t}\n\t}\n\n\t/**\n\t * 驗證訂單 ID 的有效性\n\t * @param ids 要驗證的 ID 陣列\n\t * @param sheetData 工作表資料\n\t */\n\tprivate validateOrderIds(ids: string[], sheetData: any[][]) {\n\t\tconst validIds: number[] = [];\n\t\tconst invalidIds: string[] = [];\n\t\tconst orderNumbers: { [key: number]: string } = {};\n\n\t\tfor (const id of ids) {\n\t\t\tconst targetRowIndex = parseInt(id.toString());\n\t\t\t\n\t\t\t// 檢查目標行是否存在（跳過標題行，索引從 1 開始）\n\t\t\tif (isNaN(targetRowIndex) || targetRowIndex < 1 || targetRowIndex >= sheetData.length) {\n\t\t\t\tinvalidIds.push(id);\n\t\t\t} else {\n\t\t\t\tvalidIds.push(targetRowIndex);\n\t\t\t\t// 嘗試獲取訂單編號（假設在第 B 欄，索引 1）\n\t\t\t\tconst orderNumber = sheetData[targetRowIndex] && sheetData[targetRowIndex][1] \n\t\t\t\t\t? sheetData[targetRowIndex][1] \n\t\t\t\t\t: `訂單${id}`;\n\t\t\t\torderNumbers[targetRowIndex] = orderNumber;\n\t\t\t}\n\t\t}\n\n\t\treturn { validIds, invalidIds, orderNumbers };\n\t}\n\n\t/**\n\t * 獲取工作表 ID\n\t * @param sheetsService Google Sheets 服務實例\n\t * @param sheetName 工作表名稱\n\t */\n\tprivate async getSheetId(sheetsService: GoogleSheetsService, sheetName: string): Promise<number> {\n\t\ttry {\n\t\t\t// 獲取工作表資訊\n\t\t\tconst spreadsheetInfo = await sheetsService.getSpreadsheetInfo();\n\t\t\t\n\t\t\t// 尋找指定名稱的工作表\n\t\t\tconst sheet = spreadsheetInfo.sheets?.find((s: any) => \n\t\t\t\ts.properties?.title === sheetName\n\t\t\t);\n\t\t\t\n\t\t\tif (!sheet) {\n\t\t\t\tthrow new ApiError(404, `找不到工作表: ${sheetName}`, 'SHEET_NOT_FOUND');\n\t\t\t}\n\t\t\t\n\t\t\treturn sheet.properties.sheetId;\n\t\t} catch (error) {\n\t\t\tif (error instanceof ApiError) {throw error;}\n\t\t\tthrow new ApiError(500, `獲取工作表 ID 失敗: ${error instanceof Error ? error.message : String(error)}`, 'SHEET_ID_ERROR');\n\t\t}\n\t}\n\n\t/**\n\t * 批量刪除行\n\t * @param sheetsService Google Sheets 服務實例\n\t * @param sheetId 工作表 ID\n\t * @param validIds 有效的行索引陣列\n\t * @param orderNumbers 訂單編號對應表\n\t */\n\tprivate async batchDeleteRows(\n\t\tsheetsService: GoogleSheetsService,\n\t\tsheetId: number,\n\t\tvalidIds: number[],\n\t\torderNumbers: { [key: number]: string }\n\t) {\n\t\t// 按照行號從大到小排序，這樣刪除時不會影響其他行的索引\n\t\tconst sortedIds = [...validIds].sort((a, b) => b - a);\n\t\t\n\t\tconst results: any[] = [];\n\t\tlet deletedCount = 0;\n\t\tlet failedCount = 0;\n\n\t\t// 逐一刪除每一行\n\t\tfor (const targetRowIndex of sortedIds) {\n\t\t\ttry {\n\t\t\t\t// 準備刪除行的請求\n\t\t\t\tconst deleteRequest = {\n\t\t\t\t\tdeleteDimension: {\n\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\tsheetId: sheetId,\n\t\t\t\t\t\t\tdimension: 'ROWS',\n\t\t\t\t\t\t\tstartIndex: targetRowIndex, // 0-based index\n\t\t\t\t\t\t\tendIndex: targetRowIndex + 1 // 刪除一行\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// 執行刪除操作\n\t\t\t\tawait sheetsService.batchUpdate([deleteRequest]);\n\n\t\t\t\tresults.push({\n\t\t\t\t\tid: targetRowIndex.toString(),\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tmessage: '刪除成功',\n\t\t\t\t\torderNumber: orderNumbers[targetRowIndex] || `訂單${targetRowIndex}`\n\t\t\t\t});\n\t\t\t\tdeletedCount++;\n\n\t\t\t} catch (error) {\n\t\t\t\tresults.push({\n\t\t\t\t\tid: targetRowIndex.toString(),\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: `刪除失敗：${error instanceof Error ? error.message : String(error)}`,\n\t\t\t\t\torderNumber: orderNumbers[targetRowIndex] || `訂單${targetRowIndex}`\n\t\t\t\t});\n\t\t\t\tfailedCount++;\n\t\t\t}\n\t\t}\n\n\t\treturn { results, deletedCount, failedCount };\n\t}\n\n\t/**\n\t * 批量刪除後重新排序訂單 ID\n\t * 重新獲取所有資料並重新分配連續的 ID\n\t * @param sheetsService Google Sheets 服務實例\n\t * @param sheetName 工作表名稱\n\t */\n\tprivate async reorderOrderIdsAfterBatchDelete(\n\t\tsheetsService: GoogleSheetsService,\n\t\tsheetName: string\n\t): Promise<{ success: boolean; message: string; updated_rows: number }> {\n\t\ttry {\n\t\t\t// 重新獲取所有資料\n\t\t\tconst rows = await sheetsService.getSheetData(sheetName);\n\n\t\t\tif (!rows || rows.length <= 1) {\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tmessage: '沒有需要重新排序的資料',\n\t\t\t\t\tupdated_rows: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// 準備批量更新的資料\n\t\t\tconst updates = [];\n\t\t\tlet updatedCount = 0;\n\n\t\t\t// 從第二行開始（跳過標題行），重新分配 ID\n\t\t\tfor (let i = 1; i < rows.length; i++) {\n\t\t\t\t// 檢查該行是否有資料（避免更新空白行）\n\t\t\t\tif (!rows[i] || !rows[i][1] || String(rows[i][1]).trim() === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// 新的 ID 應該是當前行索引\n\t\t\t\tconst newId = i;\n\n\t\t\t\t// 準備更新資料（假設 ID 在第 N 欄，索引 13）\n\t\t\t\tconst range = `${sheetName}!N${i + 1}`; // N欄，行號+1（因為 Google Sheets 是 1-based）\n\t\t\t\tupdates.push({\n\t\t\t\t\trange: range,\n\t\t\t\t\tvalues: [[newId]]\n\t\t\t\t});\n\n\t\t\t\tupdatedCount++;\n\t\t\t}\n\n\t\t\t// 如果有資料需要更新，執行批量更新\n\t\t\tif (updates.length > 0) {\n\t\t\t\tawait sheetsService.batchUpdateSheetData(updates, 'USER_ENTERED');\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tmessage: `成功重新排序 ${updatedCount} 個訂單的ID`,\n\t\t\t\tupdated_rows: updatedCount\n\t\t\t};\n\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: `重新排序ID時發生錯誤：${error instanceof Error ? error.message : String(error)}`,\n\t\t\t\tupdated_rows: 0\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * 清除相關快取\n\t * 參考原 PHP 檔案邏輯，刪除後需要清除訂單快取確保下次讀取最新資料\n\t */\n\tprivate async clearRelatedCache(cacheService: CacheService): Promise<void> {\n\t\ttry {\n\t\t\t// 清除訂單相關的快取\n\t\t\tconst ordersCacheKey = CacheService.generateKey('orders', 'all');\n\t\t\tawait cacheService.delete(ordersCacheKey);\n\n\t\t\t// 可以根據需要清除其他相關快取\n\t\t\t// 例如：客戶快取、統計資料快取等\n\t\t} catch (error) {\n\t\t\t// 快取清除失敗不應影響主要操作\n\t\t\tconsole.warn('清除快取時發生錯誤:', error);\n\t\t}\n\t}\n\n\t/**\n\t * 生成請求 ID\n\t */\n\tprivate generateRequestId(): string {\n\t\tconst timestamp = Date.now();\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\n\t}\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\deleteOrder.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4473,4476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4473,4476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4858,4861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4858,4861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\r\nimport { z } from 'zod';\r\nimport { AppContext, ApiResponse, ApiError } from '../types';\r\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\r\nimport { CacheService } from '../services/CacheService';\r\n\r\n/**\r\n * 刪除 Google Sheets 訂單的 API 端點\r\n * 真正刪除該行，而非僅清空內容，並重新排序後續訂單的 ID\r\n */\r\nexport class DeleteOrder extends OpenAPIRoute {\r\n\tschema = {\r\n\t\ttags: ['Orders'],\r\n\t\tsummary: '刪除訂單',\r\n\t\tdescription: '從 Google Sheets 中刪除指定訂單，並重新排序後續訂單的 ID',\r\n\t\trequest: {\r\n\t\t\tbody: {\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: z.object({\r\n\t\t\t\t\t\t\tid: z.string().describe('訂單 ID (行索引)')\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: '訂單刪除成功',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse.extend({\r\n\t\t\t\t\t\t\tmessage: z.string().optional(),\r\n\t\t\t\t\t\t\tdeleted_row: z.number().optional(),\r\n\t\t\t\t\t\t\treorder_result: z.object({\r\n\t\t\t\t\t\t\t\tsuccess: z.boolean(),\r\n\t\t\t\t\t\t\t\tmessage: z.string(),\r\n\t\t\t\t\t\t\t\tupdated_rows: z.number()\r\n\t\t\t\t\t\t\t}).optional()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t400: {\r\n\t\t\t\tdescription: '請求參數錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t404: {\r\n\t\t\t\tdescription: '找不到指定訂單',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t500: {\r\n\t\t\t\tdescription: '伺服器內部錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tasync handle(c: AppContext) {\r\n\t\tconst requestId = this.generateRequestId();\r\n\t\tconst startTime = Date.now();\r\n\r\n\t\t// 設定回應標頭\r\n\t\tc.header('X-Request-ID', requestId);\r\n\t\tc.header('Content-Type', 'application/json');\r\n\r\n\t\ttry {\r\n\t\t\t// 解析請求體\r\n\t\t\tconst body = await c.req.json();\r\n\t\t\tconst { id } = body;\r\n\r\n\t\t\t// 驗證必要參數\r\n\t\t\tif (!id) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '缺少參數',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 400);\r\n\t\t\t}\r\n\r\n\t\t\t// 初始化服務\r\n\t\t\tconst env = c.env;\r\n\t\t\tconst sheetsService = new GoogleSheetsService(\r\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\r\n\t\t\t\tenv.GOOGLE_SHEET_ID\r\n\t\t\t);\r\n\t\t\tconst cacheService = new CacheService(\r\n\t\t\t\tenv.CACHE_KV,\r\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\r\n\t\t\t);\r\n\r\n\t\t\t// 從 Google Sheets 讀取當前資料（Sheet1 工作表）\r\n\t\t\tconst sheetData = await sheetsService.getSheetData('Sheet1');\r\n\r\n\t\t\tif (!sheetData || sheetData.length === 0) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '工作表中沒有資料',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 500);\r\n\t\t\t}\r\n\r\n\t\t\t// 驗證目標行索引（參考原 PHP 邏輯）\r\n\t\t\tconst targetRowIndex = parseInt(id.toString());\r\n\t\t\tconst targetRowNumber = targetRowIndex + 1; // Google Sheets 的行號從 1 開始\r\n\r\n\t\t\t// 檢查目標行是否存在（跳過標題行，索引從 1 開始）\r\n\t\t\tif (isNaN(targetRowIndex) || targetRowIndex < 1 || targetRowIndex >= sheetData.length) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '指定的訂單不存在',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 404);\r\n\t\t\t}\r\n\r\n\t\t\t// 獲取工作表 ID（用於刪除行操作）\r\n\t\t\tconst sheetId = await this.getSheetId(sheetsService, 'Sheet1');\r\n\r\n\t\t\t// 執行刪除行操作\r\n\t\t\tawait this.deleteSheetRow(sheetsService, sheetId, targetRowIndex);\r\n\r\n\t\t\t// 重新排序後續訂單的 ID\r\n\t\t\tconst reorderResult = await this.reorderOrderIds(\r\n\t\t\t\tsheetsService, \r\n\t\t\t\t'Sheet1', \r\n\t\t\t\ttargetRowIndex\r\n\t\t\t);\r\n\r\n\t\t\t// 刪除成功後清除相關快取\r\n\t\t\tawait this.clearRelatedCache(cacheService);\r\n\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: '訂單已成功從 Google Sheets 中刪除，ID已重新排序',\r\n\t\t\t\tdeleted_row: targetRowNumber,\r\n\t\t\t\treorder_result: reorderResult,\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(response);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('DeleteOrder 錯誤:', error);\r\n\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '刪除失敗: ' + (error instanceof Error ? error.message : String(error)),\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(errorResponse, statusCode as any);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 獲取工作表 ID\r\n\t * @param sheetsService Google Sheets 服務實例\r\n\t * @param sheetName 工作表名稱\r\n\t */\r\n\tprivate async getSheetId(sheetsService: GoogleSheetsService, sheetName: string): Promise<number> {\r\n\t\ttry {\r\n\t\t\t// 獲取工作表資訊\r\n\t\t\tconst spreadsheetInfo = await sheetsService.getSpreadsheetInfo();\r\n\t\t\t\r\n\t\t\t// 尋找指定名稱的工作表\r\n\t\t\tconst sheet = spreadsheetInfo.sheets?.find((s: any) => \r\n\t\t\t\ts.properties?.title === sheetName\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tif (!sheet) {\r\n\t\t\t\tthrow new ApiError(404, `找不到工作表: ${sheetName}`, 'SHEET_NOT_FOUND');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn sheet.properties.sheetId;\r\n\t\t} catch (error) {\r\n\t\t\tif (error instanceof ApiError) {throw error;}\r\n\t\t\tthrow new ApiError(500, `獲取工作表 ID 失敗: ${error instanceof Error ? error.message : String(error)}`, 'SHEET_ID_ERROR');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 刪除 Google Sheets 中的指定行\r\n\t * @param sheetsService Google Sheets 服務實例\r\n\t * @param sheetId 工作表 ID\r\n\t * @param rowIndex 要刪除的行索引（0-based）\r\n\t */\r\n\tprivate async deleteSheetRow(\r\n\t\tsheetsService: GoogleSheetsService, \r\n\t\tsheetId: number, \r\n\t\trowIndex: number\r\n\t): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// 準備刪除行的請求\r\n\t\t\tconst deleteRequest = {\r\n\t\t\t\tdeleteDimension: {\r\n\t\t\t\t\trange: {\r\n\t\t\t\t\t\tsheetId: sheetId,\r\n\t\t\t\t\t\tdimension: 'ROWS',\r\n\t\t\t\t\t\tstartIndex: rowIndex, // 0-based index\r\n\t\t\t\t\t\tendIndex: rowIndex + 1 // 刪除一行\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// 執行刪除行操作\r\n\t\t\tawait sheetsService.batchUpdate([deleteRequest]);\r\n\t\t} catch (error) {\r\n\t\t\tif (error instanceof ApiError) {throw error;}\r\n\t\t\tthrow new ApiError(500, `刪除行失敗: ${error instanceof Error ? error.message : String(error)}`, 'DELETE_ROW_ERROR');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 重新排序訂單 ID\r\n\t * 在刪除訂單後，更新後續所有訂單的 ID，確保 ID 的連續性\r\n\t * @param sheetsService Google Sheets 服務實例\r\n\t * @param sheetName 工作表名稱\r\n\t * @param deletedRowIndex 被刪除的行索引（0-based）\r\n\t */\r\n\tprivate async reorderOrderIds(\r\n\t\tsheetsService: GoogleSheetsService,\r\n\t\tsheetName: string,\r\n\t\tdeletedRowIndex: number\r\n\t): Promise<{ success: boolean; message: string; updated_rows: number }> {\r\n\t\ttry {\r\n\t\t\t// 重新獲取所有資料\r\n\t\t\tconst rows = await sheetsService.getSheetData(sheetName);\r\n\r\n\t\t\tif (!rows || rows.length <= 1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: '沒有需要重新排序的資料',\r\n\t\t\t\t\tupdated_rows: 0\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// 檢查是否有需要更新的行（從被刪除位置開始的所有後續行）\r\n\t\t\tconst totalRows = rows.length;\r\n\t\t\tconst startUpdateIndex = deletedRowIndex; // 因為行已被刪除，原本 deletedRowIndex+1 的行現在變成 deletedRowIndex\r\n\r\n\t\t\tif (startUpdateIndex >= totalRows) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: '沒有後續行需要重新排序',\r\n\t\t\t\t\tupdated_rows: 0\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// 準備批量更新的資料\r\n\t\t\tconst updates = [];\r\n\t\t\tlet updatedCount = 0;\r\n\r\n\t\t\t// 從被刪除位置開始，重新分配 ID\r\n\t\t\tfor (let i = startUpdateIndex; i < totalRows; i++) {\r\n\t\t\t\tif (i === 0) {continue;} // 跳過標題行\r\n\r\n\t\t\t\t// 檢查該行是否有資料（避免更新空白行）\r\n\t\t\t\tif (!rows[i] || !rows[i][1] || String(rows[i][1]).trim() === '') {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 新的 ID 應該是當前行索引\r\n\t\t\t\tconst newId = i;\r\n\r\n\t\t\t\t// 準備更新資料（假設 ID 在第 N 欄，索引 13）\r\n\t\t\t\t// 根據 Google Sheets 結構，ID 可能在不同的欄位\r\n\t\t\t\tconst range = `${sheetName}!N${i + 1}`; // N欄，行號+1（因為 Google Sheets 是 1-based）\r\n\t\t\t\tupdates.push({\r\n\t\t\t\t\trange: range,\r\n\t\t\t\t\tvalues: [[newId]]\r\n\t\t\t\t});\r\n\r\n\t\t\t\tupdatedCount++;\r\n\t\t\t}\r\n\r\n\t\t\t// 如果有資料需要更新，執行批量更新\r\n\t\t\tif (updates.length > 0) {\r\n\t\t\t\tawait sheetsService.batchUpdateSheetData(updates, 'USER_ENTERED');\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: `成功重新排序 ${updatedCount} 個訂單的ID`,\r\n\t\t\t\tupdated_rows: updatedCount\r\n\t\t\t};\r\n\r\n\t\t} catch (error) {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: `重新排序ID時發生錯誤：${error instanceof Error ? error.message : String(error)}`,\r\n\t\t\t\tupdated_rows: 0\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除相關快取\r\n\t * 參考原 PHP 檔案邏輯，刪除後需要清除訂單快取確保下次讀取最新資料\r\n\t */\r\n\tprivate async clearRelatedCache(cacheService: CacheService): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// 清除訂單相關的快取\r\n\t\t\tconst ordersCacheKey = CacheService.generateKey('orders', 'all');\r\n\t\t\tawait cacheService.delete(ordersCacheKey);\r\n\r\n\t\t\t// 可以根據需要清除其他相關快取\r\n\t\t\t// 例如：客戶快取、統計資料快取等\r\n\t\t} catch (error) {\r\n\t\t\t// 快取清除失敗不應影響主要操作\r\n\t\t\tconsole.warn('清除快取時發生錯誤:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 生成請求 ID\r\n\t */\r\n\tprivate generateRequestId(): string {\r\n\t\tconst timestamp = Date.now();\r\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\r\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\r\n\t}\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\getAdminDashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4030,4033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4030,4033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4230,4233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4230,4233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5140,5143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5140,5143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5722,5725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5722,5725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5770,5773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5770,5773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":378,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":378,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9479,9482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9479,9482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\r\nimport { z } from 'zod';\r\nimport { AppContext, ApiResponse, ApiError } from '../types';\r\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\r\nimport { CacheService } from '../services/CacheService';\r\n\r\n/**\r\n * 管理員儀表板統計資料 API 端點\r\n * 提供訂單統計、狀態分析等管理員儀表板所需的統計資料\r\n */\r\nexport class GetAdminDashboard extends OpenAPIRoute {\r\n\tschema = {\r\n\t\ttags: ['Admin'],\r\n\t\tsummary: '取得管理員儀表板統計資料',\r\n\t\tdescription: '提供訂單統計、狀態分析等管理員儀表板所需的統計資料',\r\n\t\trequest: {\r\n\t\t\tquery: z.object({\r\n\t\t\t\tnonce: z.string().optional().describe('請求識別碼'),\r\n\t\t\t\trefresh: z.enum(['1']).optional().describe('強制刷新快取')\r\n\t\t\t})\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: '成功取得儀表板統計資料',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse.extend({\r\n\t\t\t\t\t\t\tdata: z.object({\r\n\t\t\t\t\t\t\t\ttodayOrders: z.number().describe('今日訂單數'),\r\n\t\t\t\t\t\t\t\tweekOrders: z.number().describe('本週訂單數'),\r\n\t\t\t\t\t\t\t\tpendingOrders: z.number().describe('待處理訂單數'),\r\n\t\t\t\t\t\t\t\tcompletedOrders: z.number().describe('已完成訂單數'),\r\n\t\t\t\t\t\t\t\ttotalOrders: z.number().describe('總訂單數'),\r\n\t\t\t\t\t\t\t\ttotalCustomers: z.number().describe('總客戶數'),\r\n\t\t\t\t\t\t\t\tstatusBreakdown: z.object({\r\n\t\t\t\t\t\t\t\t\tconfirming: z.number().describe('訂單確認中'),\r\n\t\t\t\t\t\t\t\t\tcopied: z.number().describe('已抄單'),\r\n\t\t\t\t\t\t\t\t\tshipped: z.number().describe('已出貨'),\r\n\t\t\t\t\t\t\t\t\tcancelled: z.number().describe('取消訂單')\r\n\t\t\t\t\t\t\t\t}).describe('訂單狀態分佈'),\r\n\t\t\t\t\t\t\t\tpaymentBreakdown: z.object({\r\n\t\t\t\t\t\t\t\t\tpaid: z.number().describe('已付款'),\r\n\t\t\t\t\t\t\t\t\tunpaid: z.number().describe('未付款'),\r\n\t\t\t\t\t\t\t\t\tpartial: z.number().describe('部分付款')\r\n\t\t\t\t\t\t\t\t}).describe('付款狀態分佈')\r\n\t\t\t\t\t\t\t}).optional()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t500: {\r\n\t\t\t\tdescription: '伺服器內部錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tasync handle(c: AppContext) {\r\n\t\tconst requestId = c.req.query('nonce') || this.generateRequestId();\r\n\t\tconst startTime = Date.now();\r\n\r\n\t\t// 設定回應標頭\r\n\t\tc.header('X-Request-ID', requestId);\r\n\t\tc.header('Content-Type', 'application/json');\r\n\r\n\t\ttry {\r\n\t\t\t// 獲取查詢參數\r\n\t\t\tconst forceRefresh = c.req.query('refresh') === '1';\r\n\r\n\t\t\t// 初始化服務\r\n\t\t\tconst env = c.env;\r\n\t\t\tconst sheetsService = new GoogleSheetsService(\r\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\r\n\t\t\t\tenv.GOOGLE_SHEET_ID\r\n\t\t\t);\r\n\t\t\tconst cacheService = new CacheService(\r\n\t\t\t\tenv.CACHE_KV,\r\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\r\n\t\t\t);\r\n\r\n\t\t\t// 檢查快取\r\n\t\t\tconst cacheKey = CacheService.generateKey('admin_dashboard');\r\n\t\t\tlet cachedData = null;\r\n\r\n\t\t\tif (!forceRefresh) {\r\n\t\t\t\tcachedData = await cacheService.get(cacheKey);\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tc.header('X-Cache', 'HIT');\r\n\t\t\t\t\tc.header('X-Cache-Age', Math.floor((Date.now() - cachedData.timestamp * 1000) / 1000).toString());\r\n\t\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\t\treturn c.json({\r\n\t\t\t\t\t\t...cachedData,\r\n\t\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 快取未命中或強制刷新\r\n\t\t\tc.header('X-Cache', 'MISS');\r\n\t\t\tif (forceRefresh) {\r\n\t\t\t\tc.header('X-Cache-Refresh', 'Forced');\r\n\t\t\t}\r\n\r\n\t\t\t// 從 Google Sheets 獲取統計資料\r\n\t\t\tconst dashboardStats = await this.getDashboardStatsFromSheet(sheetsService);\r\n\r\n\t\t\t// 準備回應資料\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tdata: dashboardStats,\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\t// 更新快取（快取時間較短，5分鐘）\r\n\t\t\tawait cacheService.set(cacheKey, response, 300);\r\n\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(response);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('GetAdminDashboard 錯誤:', error);\r\n\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '無法從 Google Sheets 獲取儀表板統計資料',\r\n\t\t\t\terror: error instanceof Error ? error.message : String(error),\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(errorResponse, statusCode as any);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 從 Google Sheets 獲取儀表板統計資料\r\n\t * @param sheetsService Google Sheets 服務實例\r\n\t */\r\n\tprivate async getDashboardStatsFromSheet(\r\n\t\tsheetsService: GoogleSheetsService\r\n\t): Promise<any> {\r\n\t\ttry {\r\n\t\t\t// 從訂單工作表獲取資料\r\n\t\t\tconst sheetName = '訂單';\r\n\t\t\tconst sheetData = await sheetsService.getSheetData(sheetName);\r\n\r\n\t\t\tif (!sheetData || sheetData.length === 0) {\r\n\t\t\t\treturn this.getEmptyStats();\r\n\t\t\t}\r\n\r\n\t\t\t// 第一行是標題\r\n\t\t\tconst header = sheetData[0];\r\n\t\t\tconst rows = sheetData.slice(1);\r\n\r\n\t\t\t// 建立標題映射\r\n\t\t\tconst headerMap = this.buildHeaderMap(header);\r\n\r\n\t\t\t// 計算統計資料\r\n\t\t\tconst stats = this.calculateStats(rows, headerMap);\r\n\r\n\t\t\t// 獲取客戶統計\r\n\t\t\tconst customerStats = await this.getCustomerStats(sheetsService);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...stats,\r\n\t\t\t\ttotalCustomers: customerStats.totalCustomers\r\n\t\t\t};\r\n\r\n\t\t} catch (error) {\r\n\t\t\tif (error instanceof ApiError) {throw error;}\r\n\t\t\tthrow new ApiError(500, `獲取儀表板統計資料失敗: ${error instanceof Error ? error.message : String(error)}`, 'SHEET_ACCESS_ERROR');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 建立標題欄位映射\r\n\t * @param header 標題行資料\r\n\t */\r\n\tprivate buildHeaderMap(header: any[]): { [key: string]: number } {\r\n\t\tconst headerMap: { [key: string]: number } = {};\r\n\r\n\t\theader.forEach((title, idx) => {\r\n\t\t\tswitch (title) {\r\n\t\t\t\tcase '訂單時間':\r\n\t\t\t\t\theaderMap.orderTime = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '訂單狀態':\r\n\t\t\t\t\theaderMap.orderStatus = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '付款狀態':\r\n\t\t\t\t\theaderMap.paymentStatus = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// 其他欄位使用小寫作為鍵\r\n\t\t\t\t\theaderMap[title.toLowerCase()] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn headerMap;\r\n\t}\r\n\r\n\t/**\r\n\t * 計算統計資料\r\n\t * @param rows 資料行\r\n\t * @param headerMap 標題映射\r\n\t */\r\n\tprivate calculateStats(rows: any[][], headerMap: { [key: string]: number }): any {\r\n\t\tconst now = new Date();\r\n\t\tconst today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n\t\tconst weekStart = new Date(today);\r\n\t\tweekStart.setDate(today.getDate() - today.getDay()); // 本週開始（週日）\r\n\r\n\t\tlet todayOrders = 0;\r\n\t\tlet weekOrders = 0;\r\n\t\tlet totalOrders = 0;\r\n\t\tlet pendingOrders = 0;\r\n\t\tlet completedOrders = 0;\r\n\r\n\t\tconst statusBreakdown = {\r\n\t\t\tconfirming: 0,\r\n\t\t\tcopied: 0,\r\n\t\t\tshipped: 0,\r\n\t\t\tcancelled: 0\r\n\t\t};\r\n\r\n\t\tconst paymentBreakdown = {\r\n\t\t\tpaid: 0,\r\n\t\t\tunpaid: 0,\r\n\t\t\tpartial: 0\r\n\t\t};\r\n\r\n\t\trows.forEach((row) => {\r\n\t\t\tif (!row || row.length === 0) {return;}\r\n\r\n\t\t\ttotalOrders++;\r\n\r\n\t\t\t// 處理訂單時間統計\r\n\t\t\tif (headerMap.orderTime !== undefined && row[headerMap.orderTime]) {\r\n\t\t\t\tconst orderTimeStr = row[headerMap.orderTime];\r\n\t\t\t\tconst orderDate = this.parseOrderDate(orderTimeStr);\r\n\r\n\t\t\t\tif (orderDate) {\r\n\t\t\t\t\t// 今日訂單\r\n\t\t\t\t\tif (orderDate >= today) {\r\n\t\t\t\t\t\ttodayOrders++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 本週訂單\r\n\t\t\t\t\tif (orderDate >= weekStart) {\r\n\t\t\t\t\t\tweekOrders++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 處理訂單狀態統計\r\n\t\t\tif (headerMap.orderStatus !== undefined && row[headerMap.orderStatus]) {\r\n\t\t\t\tconst status = row[headerMap.orderStatus];\r\n\t\t\t\tswitch (status) {\r\n\t\t\t\t\tcase '訂單確認中':\r\n\t\t\t\t\t\tstatusBreakdown.confirming++;\r\n\t\t\t\t\t\tpendingOrders++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '已抄單':\r\n\t\t\t\t\t\tstatusBreakdown.copied++;\r\n\t\t\t\t\t\tpendingOrders++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '已出貨':\r\n\t\t\t\t\t\tstatusBreakdown.shipped++;\r\n\t\t\t\t\t\tcompletedOrders++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '取消訂單':\r\n\t\t\t\t\t\tstatusBreakdown.cancelled++;\r\n\t\t\t\t\t\tcompletedOrders++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// 未知狀態視為待處理\r\n\t\t\t\t\t\tpendingOrders++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// 沒有狀態資訊視為待處理\r\n\t\t\t\tpendingOrders++;\r\n\t\t\t}\r\n\r\n\t\t\t// 處理付款狀態統計\r\n\t\t\tif (headerMap.paymentStatus !== undefined && row[headerMap.paymentStatus]) {\r\n\t\t\t\tconst paymentStatus = row[headerMap.paymentStatus];\r\n\t\t\t\tswitch (paymentStatus) {\r\n\t\t\t\t\tcase '已付款':\r\n\t\t\t\t\t\tpaymentBreakdown.paid++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '未付款':\r\n\t\t\t\t\t\tpaymentBreakdown.unpaid++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '部分付款':\r\n\t\t\t\t\t\tpaymentBreakdown.partial++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// 未知付款狀態視為未付款\r\n\t\t\t\t\t\tpaymentBreakdown.unpaid++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// 沒有付款狀態資訊視為未付款\r\n\t\t\t\tpaymentBreakdown.unpaid++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\ttodayOrders,\r\n\t\t\tweekOrders,\r\n\t\t\tpendingOrders,\r\n\t\t\tcompletedOrders,\r\n\t\t\ttotalOrders,\r\n\t\t\tstatusBreakdown,\r\n\t\t\tpaymentBreakdown\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * 獲取客戶統計資料\r\n\t * @param sheetsService Google Sheets 服務實例\r\n\t */\r\n\tprivate async getCustomerStats(sheetsService: GoogleSheetsService): Promise<{ totalCustomers: number }> {\r\n\t\ttry {\r\n\t\t\t// 從客戶名單工作表獲取資料\r\n\t\t\tconst customerSheetData = await sheetsService.getSheetData('客戶名單');\r\n\t\t\tif (!customerSheetData || customerSheetData.length <= 1) {\r\n\t\t\t\treturn { totalCustomers: 0 };\r\n\t\t\t}\r\n\r\n\t\t\t// 扣除標題行\r\n\t\t\tconst totalCustomers = customerSheetData.length - 1;\r\n\t\t\treturn { totalCustomers };\r\n\r\n\t\t} catch (error) {\r\n\t\t\t// 如果客戶名單工作表不存在或無法存取，返回 0\r\n\t\t\tconsole.warn('無法獲取客戶統計資料:', error);\r\n\t\t\treturn { totalCustomers: 0 };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 解析訂單時間字串\r\n\t * @param orderTimeStr 訂單時間字串\r\n\t */\r\n\tprivate parseOrderDate(orderTimeStr: string): Date | null {\r\n\t\ttry {\r\n\t\t\t// 嘗試多種日期格式\r\n\t\t\tconst formats = [\r\n\t\t\t\t// ISO 格式\r\n\t\t\t\t/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/,\r\n\t\t\t\t// 台灣常見格式\r\n\t\t\t\t/^\\d{4}\\/\\d{1,2}\\/\\d{1,2}/,\r\n\t\t\t\t/^\\d{4}-\\d{1,2}-\\d{1,2}/,\r\n\t\t\t\t// 其他格式\r\n\t\t\t\t/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}/\r\n\t\t\t];\r\n\r\n\t\t\tfor (const format of formats) {\r\n\t\t\t\tif (format.test(orderTimeStr)) {\r\n\t\t\t\t\tconst date = new Date(orderTimeStr);\r\n\t\t\t\t\tif (!isNaN(date.getTime())) {\r\n\t\t\t\t\t\treturn date;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t} catch (error) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 取得空的統計資料\r\n\t */\r\n\tprivate getEmptyStats(): any {\r\n\t\treturn {\r\n\t\t\ttodayOrders: 0,\r\n\t\t\tweekOrders: 0,\r\n\t\t\tpendingOrders: 0,\r\n\t\t\tcompletedOrders: 0,\r\n\t\t\ttotalOrders: 0,\r\n\t\t\ttotalCustomers: 0,\r\n\t\t\tstatusBreakdown: {\r\n\t\t\t\tconfirming: 0,\r\n\t\t\t\tcopied: 0,\r\n\t\t\t\tshipped: 0,\r\n\t\t\t\tcancelled: 0\r\n\t\t\t},\r\n\t\t\tpaymentBreakdown: {\r\n\t\t\t\tpaid: 0,\r\n\t\t\t\tunpaid: 0,\r\n\t\t\t\tpartial: 0\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * 生成請求 ID\r\n\t */\r\n\tprivate generateRequestId(): string {\r\n\t\tconst timestamp = Date.now();\r\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\r\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\r\n\t}\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\getCustomerOrders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3773,3776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3773,3776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4003,4006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4003,4006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4987,4990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4987,4990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5867,5870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5867,5870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":5,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":8,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5936,5939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5936,5939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5968,5971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5968,5971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\nimport { z } from 'zod';\nimport { AppContext, ApiResponse, ApiError } from '../types';\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\nimport { CacheService } from '../services/CacheService';\n\n/**\n * 客戶訂單歷史查詢 API 端點\n * 根據客戶電話號碼查詢該客戶的所有訂單歷史記錄\n */\nexport class GetCustomerOrders extends OpenAPIRoute {\n\tschema = {\n\t\ttags: ['Customers'],\n\t\tsummary: '取得客戶訂單歷史',\n\t\tdescription: '根據客戶電話號碼查詢該客戶的所有訂單歷史記錄',\n\t\trequest: {\n\t\t\tquery: z.object({\n\t\t\t\tphone: z.string().min(1).describe('客戶電話號碼'),\n\t\t\t\tnonce: z.string().optional().describe('請求識別碼'),\n\t\t\t\trefresh: z.enum(['1']).optional().describe('強制刷新快取')\n\t\t\t})\n\t\t},\n\t\tresponses: {\n\t\t\t200: {\n\t\t\t\tdescription: '成功取得客戶訂單歷史',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse.extend({\n\t\t\t\t\t\t\tdata: z.array(z.object({\n\t\t\t\t\t\t\t\tid: z.number().describe('訂單行號'),\n\t\t\t\t\t\t\t\torderTime: z.string().describe('訂單時間'),\n\t\t\t\t\t\t\t\titems: z.string().describe('購買項目'),\n\t\t\t\t\t\t\t\tname: z.string().describe('客戶姓名')\n\t\t\t\t\t\t\t})).optional()\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t400: {\n\t\t\t\tdescription: '請求參數錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t500: {\n\t\t\t\tdescription: '伺服器內部錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tasync handle(c: AppContext) {\n\t\tconst requestId = c.req.query('nonce') || this.generateRequestId();\n\t\tconst startTime = Date.now();\n\n\t\t// 設定回應標頭\n\t\tc.header('X-Request-ID', requestId);\n\t\tc.header('Content-Type', 'application/json');\n\n\t\ttry {\n\t\t\t// 獲取查詢參數\n\t\t\tconst phone = c.req.query('phone');\n\t\t\tconst forceRefresh = c.req.query('refresh') === '1';\n\n\t\t\t// 驗證必要參數\n\t\t\tif (!phone) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '缺少必要參數：phone',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 400);\n\t\t\t}\n\n\t\t\t// 初始化服務\n\t\t\tconst env = c.env;\n\t\t\tconst sheetsService = new GoogleSheetsService(\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\n\t\t\t\tenv.GOOGLE_SHEET_ID\n\t\t\t);\n\t\t\tconst cacheService = new CacheService(\n\t\t\t\tenv.CACHE_KV,\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\n\t\t\t);\n\n\t\t\t// 檢查快取\n\t\t\tconst cacheKey = CacheService.generateKey('customer_orders', phone);\n\t\t\tlet cachedData = null;\n\n\t\t\tif (!forceRefresh) {\n\t\t\t\tcachedData = await cacheService.get(cacheKey);\n\t\t\t\tif (cachedData) {\n\t\t\t\t\tc.header('X-Cache', 'HIT');\n\t\t\t\t\tc.header('X-Cache-Age', Math.floor((Date.now() - cachedData.timestamp * 1000) / 1000).toString());\n\t\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\t\treturn c.json({\n\t\t\t\t\t\t...cachedData,\n\t\t\t\t\t\trequest_id: requestId\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 快取未命中或強制刷新\n\t\t\tc.header('X-Cache', 'MISS');\n\t\t\tif (forceRefresh) {\n\t\t\t\tc.header('X-Cache-Refresh', 'Forced');\n\t\t\t}\n\n\t\t\t// 從 Google Sheets 獲取客戶名單資料\n\t\t\tconst customerData = await this.getCustomerOrdersFromSheet(\n\t\t\t\tsheetsService,\n\t\t\t\tphone\n\t\t\t);\n\n\t\t\t// 準備回應資料\n\t\t\tconst response = {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: customerData,\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\t// 更新快取\n\t\t\tawait cacheService.set(cacheKey, response);\n\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(response);\n\n\t\t} catch (error) {\n\t\t\tconsole.error('GetCustomerOrders 錯誤:', error);\n\n\t\t\tconst errorResponse = {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '無法從 Google Sheets 獲取客戶訂單資料',\n\t\t\t\terror: error instanceof Error ? error.message : String(error),\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(errorResponse, statusCode as any);\n\t\t}\n\t}\n\n\t/**\n\t * 從 Google Sheets 獲取客戶訂單歷史\n\t * @param sheetsService Google Sheets 服務實例\n\t * @param phone 客戶電話號碼\n\t */\n\tprivate async getCustomerOrdersFromSheet(\n\t\tsheetsService: GoogleSheetsService,\n\t\tphone: string\n\t): Promise<any[]> {\n\t\ttry {\n\t\t\t// 從客戶名單工作表獲取資料\n\t\t\tconst sheetName = '客戶名單';\n\t\t\tconst sheetData = await sheetsService.getSheetData(sheetName);\n\n\t\t\tif (!sheetData || sheetData.length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\t// 第一行是標題\n\t\t\tconst header = sheetData[0];\n\t\t\tconst rows = sheetData.slice(1);\n\n\t\t\t// 建立標題映射\n\t\t\tconst headerMap = this.buildHeaderMap(header);\n\n\t\t\t// 確保必要的欄位存在\n\t\t\tif (!headerMap.phone || !headerMap.orderTime || !headerMap.items) {\n\t\t\t\tthrow new ApiError(500, '客戶名單工作表缺少必要欄位', 'MISSING_REQUIRED_FIELDS');\n\t\t\t}\n\n\t\t\t// 查找匹配的訂單\n\t\t\tconst matchingOrders = this.findMatchingOrders(rows, headerMap, phone);\n\n\t\t\t// 根據列數排序（列數越小的為最早訂購的資訊）\n\t\t\tmatchingOrders.sort((a, b) => a.id - b.id);\n\n\t\t\treturn matchingOrders;\n\n\t\t} catch (error) {\n\t\t\tif (error instanceof ApiError) {throw error;}\n\t\t\tthrow new ApiError(500, `獲取客戶訂單資料失敗: ${error instanceof Error ? error.message : String(error)}`, 'SHEET_ACCESS_ERROR');\n\t\t}\n\t}\n\n\t/**\n\t * 建立標題欄位映射\n\t * @param header 標題行資料\n\t */\n\tprivate buildHeaderMap(header: any[]): { [key: string]: number } {\n\t\tconst headerMap: { [key: string]: number } = {};\n\n\t\theader.forEach((title, idx) => {\n\t\t\tswitch (title) {\n\t\t\t\tcase '姓名':\n\t\t\t\t\theaderMap.name = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '電話':\n\t\t\t\t\theaderMap.phone = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '取貨方式':\n\t\t\t\t\theaderMap.deliveryMethod = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '地址':\n\t\t\t\t\theaderMap.address = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '透過什麼聯繫賣家':\n\t\t\t\t\theaderMap.contactMethod = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '社交軟體名字':\n\t\t\t\t\theaderMap.socialId = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '訂單時間':\n\t\t\t\t\theaderMap.orderTime = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '購買項目':\n\t\t\t\t\theaderMap.items = idx;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// 其他欄位使用小寫作為鍵\n\t\t\t\t\theaderMap[title.toLowerCase()] = idx;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\treturn headerMap;\n\t}\n\n\t/**\n\t * 查找匹配的訂單記錄\n\t * @param rows 資料行\n\t * @param headerMap 標題映射\n\t * @param phone 查詢的電話號碼\n\t */\n\tprivate findMatchingOrders(\n\t\trows: any[][],\n\t\theaderMap: { [key: string]: number },\n\t\tphone: string\n\t): any[] {\n\t\tconst matchingOrders: any[] = [];\n\n\t\trows.forEach((row, idx) => {\n\t\t\t// 確保資料完整性\n\t\t\tif (!row || row.length === 0) {return;}\n\t\t\tif (!row[headerMap.phone]) {return;}\n\n\t\t\t// 檢查電話是否匹配\n\t\t\tconst rowPhone = row[headerMap.phone];\n\n\t\t\t// 使用電話號碼標準化比對\n\t\t\tif (this.isPhoneMatch(phone, rowPhone)) {\n\t\t\t\t// 獲取訂單時間和購買項目\n\t\t\t\tconst orderTime = row[headerMap.orderTime] || '';\n\t\t\t\tconst items = row[headerMap.items] || '';\n\n\t\t\t\t// 只有當訂單時間或購買項目不為空時才加入結果\n\t\t\t\tif (orderTime || items) {\n\t\t\t\t\tmatchingOrders.push({\n\t\t\t\t\t\tid: idx, // 行索引作為 ID\n\t\t\t\t\t\torderTime: orderTime,\n\t\t\t\t\t\titems: items,\n\t\t\t\t\t\tname: row[headerMap.name] || ''\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn matchingOrders;\n\t}\n\n\t/**\n\t * 電話號碼匹配檢查\n\t * 標準化電話號碼並比較後九碼\n\t * @param queryPhone 查詢的電話號碼\n\t * @param rowPhone 資料行中的電話號碼\n\t */\n\tprivate isPhoneMatch(queryPhone: string, rowPhone: string): boolean {\n\t\t// 標準化電話號碼，只保留數字\n\t\tconst normalizedQueryPhone = queryPhone.replace(/[^0-9]/g, '');\n\t\tconst normalizedRowPhone = rowPhone.replace(/[^0-9]/g, '');\n\n\t\t// 取得後九碼進行比較（如果電話號碼長度大於9）\n\t\tconst lastNineQuery = normalizedQueryPhone.length >= 9 \n\t\t\t? normalizedQueryPhone.slice(-9) \n\t\t\t: normalizedQueryPhone;\n\t\tconst lastNineRow = normalizedRowPhone.length >= 9 \n\t\t\t? normalizedRowPhone.slice(-9) \n\t\t\t: normalizedRowPhone;\n\n\t\t// 比較電話號碼的後九碼\n\t\treturn lastNineQuery === lastNineRow;\n\t}\n\n\t/**\n\t * 生成請求 ID\n\t */\n\tprivate generateRequestId(): string {\n\t\tconst timestamp = Date.now();\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\n\t}\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\getCustomersFromSheet.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4318,4321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4318,4321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4464,4467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4464,4467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4474,4477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4474,4477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5453,5456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5453,5456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":213,"column":19,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":213,"endColumn":33,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5565,5590],"text":"Object.prototype.hasOwnProperty.call(headerMap, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":214,"column":16,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":214,"endColumn":30,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5634,5659],"text":"Object.prototype.hasOwnProperty.call(headerMap, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\r\nimport { z } from 'zod';\r\nimport { AppContext, Customer, ApiResponse, ApiError } from '../types';\r\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\r\nimport { CacheService } from '../services/CacheService';\r\n\r\n/**\r\n * 從 Google Sheets 讀取客戶資料的 API 端點\r\n * 支援快取機制和強制刷新功能\r\n */\r\nexport class GetCustomersFromSheet extends OpenAPIRoute {\r\n\tschema = {\r\n\t\ttags: ['Customers'],\r\n\t\tsummary: '從 Google Sheets 讀取客戶資料',\r\n\t\tdescription: '讀取 Google Sheets 中的所有客戶資料，支援 15 秒快取和強制刷新',\r\n\t\trequest: {\r\n\t\t\tquery: z.object({\r\n\t\t\t\trefresh: z.string().optional().describe('強制刷新快取 (設為 \"1\" 啟用)'),\r\n\t\t\t\tnonce: z.string().optional().describe('請求唯一識別碼')\r\n\t\t\t})\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: '成功讀取客戶資料',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse.extend({\r\n\t\t\t\t\t\t\tdata: z.array(Customer.extend({\r\n\t\t\t\t\t\t\t\tdeliveryMethod: z.string().optional(),\r\n\t\t\t\t\t\t\t\tcontactMethod: z.string().optional(),\r\n\t\t\t\t\t\t\t\tsocialId: z.string().optional(),\r\n\t\t\t\t\t\t\t\torderTime: z.string().optional(),\r\n\t\t\t\t\t\t\t\titems: z.string().optional()\r\n\t\t\t\t\t\t\t})).optional()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t400: {\r\n\t\t\t\tdescription: '請求參數錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t500: {\r\n\t\t\t\tdescription: '伺服器內部錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tasync handle(c: AppContext) {\r\n\t\tconst requestId = this.generateRequestId();\r\n\t\tconst startTime = Date.now();\r\n\r\n\t\t// 設定回應標頭\r\n\t\tc.header('X-Request-ID', requestId);\r\n\t\tc.header('Content-Type', 'application/json');\r\n\r\n\t\ttry {\r\n\t\t\t// 解析查詢參數\r\n\t\t\tconst { refresh, nonce } = c.req.query();\r\n\t\t\tconst forceRefresh = refresh === '1';\r\n\t\t\tconst actualRequestId = nonce || requestId;\r\n\r\n\t\t\t// 初始化服務\r\n\t\t\tconst env = c.env;\r\n\t\t\tconst sheetsService = new GoogleSheetsService(\r\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\r\n\t\t\t\tenv.GOOGLE_SHEET_ID\r\n\t\t\t);\r\n\t\t\tconst cacheService = new CacheService(\r\n\t\t\t\tenv.CACHE_KV,\r\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\r\n\t\t\t);\r\n\r\n\t\t\t// 生成快取鍵\r\n\t\t\tconst cacheKey = CacheService.generateKey('customers', 'all');\r\n\r\n\t\t\t// 檢查快取狀態\r\n\t\t\tconst cacheStatus = await cacheService.getStatus(cacheKey);\r\n\t\t\tlet useCache = false;\r\n\r\n\t\t\tif (!forceRefresh && cacheStatus.exists && !cacheStatus.expired) {\r\n\t\t\t\tuseCache = true;\r\n\t\t\t}\r\n\r\n\t\t\t// 如果使用快取\r\n\t\t\tif (useCache) {\r\n\t\t\t\tconst cachedData = await cacheService.get(cacheKey);\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tc.header('X-Cache', 'HIT');\r\n\t\t\t\t\tc.header('X-Cache-Age', `${cacheStatus.age || 0}s`);\r\n\t\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\t\treturn c.json(cachedData);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 快取未命中或強制刷新，從 Google Sheets 獲取資料\r\n\t\t\tc.header('X-Cache', 'MISS');\r\n\t\t\tif (forceRefresh) {\r\n\t\t\t\tc.header('X-Cache-Refresh', 'Forced');\r\n\t\t\t}\r\n\r\n\t\t\t// 從 Google Sheets 讀取資料（客戶名單工作表）\r\n\t\t\tconst sheetData = await sheetsService.getSheetData('客戶名單');\r\n\r\n\t\t\tif (!sheetData || sheetData.length === 0) {\r\n\t\t\t\tconst emptyResponse = {\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tdata: [],\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: actualRequestId\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// 快取空結果\r\n\t\t\t\tawait cacheService.set(cacheKey, emptyResponse);\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json(emptyResponse);\r\n\t\t\t}\r\n\r\n\t\t\t// 處理資料轉換（參考原 PHP 邏輯）\r\n\t\t\tconst customers = this.transformSheetDataToCustomers(sheetData);\r\n\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tdata: customers,\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: actualRequestId\r\n\t\t\t};\r\n\r\n\t\t\t// 更新快取\r\n\t\t\tawait cacheService.set(cacheKey, response);\r\n\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(response);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('GetCustomersFromSheet 錯誤:', error);\r\n\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '無法從 Google Sheets 獲取客戶資料',\r\n\t\t\t\terror: error instanceof ApiError ? undefined : (error instanceof Error ? error.message : String(error)),\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(errorResponse, statusCode as any);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 將 Google Sheets 原始資料轉換為客戶物件陣列\r\n\t * 參考原始 PHP 檔案的轉換邏輯，支援動態標題映射\r\n\t */\r\n\tprivate transformSheetDataToCustomers(sheetData: any[][]): any[] {\r\n\t\tif (sheetData.length === 0) {return [];}\r\n\r\n\t\t// 第一行是標題\r\n\t\tconst header = sheetData[0];\r\n\t\tconst dataRows = sheetData.slice(1);\r\n\r\n\t\t// 建立標題映射（參考原 PHP 邏輯）\r\n\t\tconst headerMap: { [key: string]: number } = {};\r\n\t\theader.forEach((title: string, idx: number) => {\r\n\t\t\tswitch (title) {\r\n\t\t\t\tcase '姓名':\r\n\t\t\t\t\theaderMap['name'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '電話':\r\n\t\t\t\t\theaderMap['phone'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '取貨方式':\r\n\t\t\t\t\theaderMap['deliveryMethod'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '地址':\r\n\t\t\t\t\theaderMap['address'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '透過什麼聯繫賣家':\r\n\t\t\t\t\theaderMap['contactMethod'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '社交軟體名字':\r\n\t\t\t\t\theaderMap['socialId'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '訂單時間':\r\n\t\t\t\t\theaderMap['orderTime'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '購買項目':\r\n\t\t\t\t\theaderMap['items'] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// 其他欄位，使用小寫作為鍵\r\n\t\t\t\t\theaderMap[title.toLowerCase()] = idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst customers = [];\r\n\t\tdataRows.forEach((row: any[], idx: number) => {\r\n\t\t\t// 確保資料完整性\r\n\t\t\tif (!row || row.length === 0) {return;}\r\n\t\t\t\r\n\t\t\t// 檢查必要欄位\r\n\t\t\tif (!headerMap.hasOwnProperty('name') || !row[headerMap['name']] ||\r\n\t\t\t\t!headerMap.hasOwnProperty('phone') || !row[headerMap['phone']]) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 建立客戶物件\r\n\t\t\tcustomers.push({\r\n\t\t\t\tid: idx,\r\n\t\t\t\tname: row[headerMap['name']] || '',\r\n\t\t\t\tphone: row[headerMap['phone']] || '',\r\n\t\t\t\taddress: (headerMap['address'] !== undefined && row[headerMap['address']]) ? row[headerMap['address']] : '',\r\n\t\t\t\tcreatedAt: (headerMap['orderTime'] !== undefined && row[headerMap['orderTime']]) ? row[headerMap['orderTime']] : '',\r\n\t\t\t\t// 額外欄位\r\n\t\t\t\tdeliveryMethod: (headerMap['deliveryMethod'] !== undefined && row[headerMap['deliveryMethod']]) ? row[headerMap['deliveryMethod']] : '',\r\n\t\t\t\tcontactMethod: (headerMap['contactMethod'] !== undefined && row[headerMap['contactMethod']]) ? row[headerMap['contactMethod']] : '',\r\n\t\t\t\tsocialId: (headerMap['socialId'] !== undefined && row[headerMap['socialId']]) ? row[headerMap['socialId']] : '',\r\n\t\t\t\torderTime: (headerMap['orderTime'] !== undefined && row[headerMap['orderTime']]) ? row[headerMap['orderTime']] : '',\r\n\t\t\t\titems: (headerMap['items'] !== undefined && row[headerMap['items']]) ? row[headerMap['items']] : ''\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn customers;\r\n\t}\r\n\r\n\t/**\r\n\t * 生成請求 ID\r\n\t */\r\n\tprivate generateRequestId(): string {\r\n\t\tconst timestamp = Date.now();\r\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\r\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\r\n\t}\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\getOrdersFromSheet.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timestamp' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4171,4174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4171,4174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4305,4308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4305,4308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4315,4318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4315,4318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\r\nimport { z } from 'zod';\r\nimport { AppContext, Order, ApiResponse, ApiError } from '../types';\r\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\r\nimport { CacheService } from '../services/CacheService';\r\n\r\n/**\r\n * 從 Google Sheets 讀取訂單資料的 API 端點\r\n * 支援快取機制和強制刷新功能\r\n */\r\nexport class GetOrdersFromSheet extends OpenAPIRoute {\r\n\tschema = {\r\n\t\ttags: ['Orders'],\r\n\t\tsummary: '從 Google Sheets 讀取訂單資料',\r\n\t\tdescription: '讀取 Google Sheets 中的所有訂單資料，支援 15 秒快取和強制刷新',\r\n\t\trequest: {\r\n\t\t\tquery: z.object({\r\n\t\t\t\trefresh: z.string().optional().describe('強制刷新快取 (設為 \"1\" 啟用)'),\r\n\t\t\t\t_: z.string().optional().describe('時間戳參數')\r\n\t\t\t})\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: '成功讀取訂單資料',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse.extend({\r\n\t\t\t\t\t\t\tdata: z.array(Order).optional()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t400: {\r\n\t\t\t\tdescription: '請求參數錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t500: {\r\n\t\t\t\tdescription: '伺服器內部錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tasync handle(c: AppContext) {\r\n\t\tconst requestId = this.generateRequestId();\r\n\t\tconst startTime = Date.now();\r\n\r\n\t\t// 設定回應標頭\r\n\t\tc.header('X-Request-ID', requestId);\r\n\t\tc.header('Content-Type', 'application/json');\r\n\r\n\t\ttry {\r\n\t\t\t// 解析查詢參數\r\n\t\t\tconst { refresh, _ } = c.req.query();\r\n\t\t\tconst forceRefresh = refresh === '1';\r\n\t\t\tconst timestamp = _ || Date.now().toString();\r\n\r\n\t\t\t// 檢查 Cloudflare 訪問（如原 PHP 邏輯）\r\n\t\t\tconst cfConnectingIp = c.req.header('CF-Connecting-IP');\r\n\t\t\tconst cfVisitor = c.req.header('CF-Visitor');\r\n\t\t\tconst isCloudflareRequest = !!(cfConnectingIp || cfVisitor);\r\n\r\n\t\t\tif (isCloudflareRequest) {\r\n\t\t\t\tc.header('X-CF-Detected', 'Yes');\r\n\t\t\t}\r\n\r\n\t\t\t// 初始化服務\r\n\t\t\tconst env = c.env;\r\n\t\t\tconst sheetsService = new GoogleSheetsService(\r\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\r\n\t\t\t\tenv.GOOGLE_SHEET_ID\r\n\t\t\t);\r\n\t\t\tconst cacheService = new CacheService(\r\n\t\t\t\tenv.CACHE_KV,\r\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\r\n\t\t\t);\r\n\r\n\t\t\t// 生成快取鍵\r\n\t\t\tconst cacheKey = CacheService.generateKey('orders', 'all');\r\n\r\n\t\t\t// 檢查快取狀態\r\n\t\t\tconst cacheStatus = await cacheService.getStatus(cacheKey);\r\n\t\t\tlet useCache = false;\r\n\r\n\t\t\tif (!forceRefresh && !isCloudflareRequest && cacheStatus.exists && !cacheStatus.expired) {\r\n\t\t\t\tuseCache = true;\r\n\t\t\t}\r\n\r\n\t\t\t// 如果使用快取\r\n\t\t\tif (useCache) {\r\n\t\t\t\tconst cachedData = await cacheService.get(cacheKey);\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tc.header('X-Cache', 'HIT');\r\n\t\t\t\t\tc.header('X-Cache-Age', `${cacheStatus.age || 0}s`);\r\n\t\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\t\treturn c.json(cachedData);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 快取未命中或強制刷新，從 Google Sheets 獲取資料\r\n\t\t\tc.header('X-Cache', 'MISS');\r\n\t\t\tif (forceRefresh) {\r\n\t\t\t\tc.header('X-Cache-Refresh', 'Forced');\r\n\t\t\t}\r\n\r\n\t\t\t// 從 Google Sheets 讀取資料\r\n\t\t\tconst sheetData = await sheetsService.getSheetData('Sheet1');\r\n\r\n\t\t\tif (!sheetData || sheetData.length === 0) {\r\n\t\t\t\tconst emptyResponse = {\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tdata: [],\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// 快取空結果\r\n\t\t\t\tawait cacheService.set(cacheKey, emptyResponse);\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json(emptyResponse);\r\n\t\t\t}\r\n\r\n\t\t\t// 處理資料轉換（參考原 PHP 邏輯）\r\n\t\t\tconst orders = this.transformSheetDataToOrders(sheetData);\r\n\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tdata: orders,\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\t// 更新快取\r\n\t\t\tawait cacheService.set(cacheKey, response);\r\n\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(response);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('GetOrdersFromSheet 錯誤:', error);\r\n\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '讀取訂單資料時發生錯誤',\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(errorResponse, statusCode as any);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 將 Google Sheets 原始資料轉換為訂單物件陣列\r\n\t * 參考原始 PHP 檔案的轉換邏輯\r\n\t */\r\n\tprivate transformSheetDataToOrders(sheetData: any[][]): any[] {\r\n\t\tif (sheetData.length === 0) {return [];}\r\n\r\n\t\t// 第一列為標題，跳過\r\n\t\tconst orders = [];\r\n\t\tfor (let idx = 1; idx < sheetData.length; idx++) {\r\n\t\t\tconst row = sheetData[idx];\r\n\r\n\t\t\t// 跳過空白列（已刪除訂單或空白）\r\n\t\t\tif (!row[1] || row[1].toString().trim() === '') {continue;}\r\n\r\n\t\t\t// 轉換到貨日期格式\r\n\t\t\tconst rawDate = row[5] || '';\r\n\t\t\tlet dueDate = '';\r\n\t\t\tif (rawDate) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst dt = new Date(rawDate);\r\n\t\t\t\t\tif (!isNaN(dt.getTime())) {\r\n\t\t\t\t\t\tdueDate = dt.toISOString().split('T')[0]; // YYYY-MM-DD 格式\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdueDate = rawDate.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch {\r\n\t\t\t\t\tdueDate = rawDate.toString();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 建立訂單物件（對應原 PHP 的欄位映射）\r\n\t\t\torders.push({\r\n\t\t\t\tcreatedAt: row[0] || '', // A欄 訂單時間\r\n\t\t\t\tid: idx, // 使用當前行索引作為 ID\r\n\t\t\t\torderNumber: `ORD-${idx.toString().padStart(3, '0')}`, // 生成格式化的訂單編號\r\n\t\t\t\tcustomerName: row[1] || '', // B欄 客戶姓名\r\n\t\t\t\tcustomerPhone: row[2] || '', // C欄 客戶電話\r\n\t\t\t\titems: row[8] || '', // I欄 訂購商品\r\n\t\t\t\tamount: row[9] || '', // J欄 訂單金額\r\n\t\t\t\tdueDate: dueDate, // F欄 到貨日期 (已轉為 YYYY-MM-DD)\r\n\t\t\t\tdeliveryTime: row[6] || '', // G欄 宅配時段\r\n\t\t\t\tnote: row[7] || '', // H欄 備註\r\n\t\t\t\tstatus: row[14] || '', // O欄 訂單狀態\r\n\t\t\t\tdeliveryMethod: row[3] || '', // D欄 配送方式\r\n\t\t\t\tdeliveryAddress: row[4] || '', // E欄 配送地址\r\n\t\t\t\tpaymentMethod: row[12] || '', // M欄 付款方式\r\n\t\t\t\tpaymentStatus: row[15] || '' // P欄 款項狀態\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn orders;\r\n\t}\r\n\r\n\t/**\r\n\t * 生成請求 ID\r\n\t */\r\n\tprivate generateRequestId(): string {\r\n\t\tconst timestamp = Date.now();\r\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\r\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\r\n\t}\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\taskCreate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'c' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bool, OpenAPIRoute } from \"chanfana\";\nimport { z } from \"zod\";\nimport { type AppContext, Task } from \"../types\";\n\nexport class TaskCreate extends OpenAPIRoute {\n\tschema = {\n\t\ttags: [\"Tasks\"],\n\t\tsummary: \"Create a new Task\",\n\t\trequest: {\n\t\t\tbody: {\n\t\t\t\tcontent: {\n\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\tschema: Task,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tresponses: {\n\t\t\t\"200\": {\n\t\t\t\tdescription: \"Returns the created task\",\n\t\t\t\tcontent: {\n\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tseries: z.object({\n\t\t\t\t\t\t\t\tsuccess: Bool(),\n\t\t\t\t\t\t\t\tresult: z.object({\n\t\t\t\t\t\t\t\t\ttask: Task,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tasync handle(c: AppContext) {\n\t\t// Get validated data\n\t\tconst data = await this.getValidatedData<typeof this.schema>();\n\n\t\t// Retrieve the validated request body\n\t\tconst taskToCreate = data.body;\n\n\t\t// Implement your own object insertion here\n\n\t\t// return the new task\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\ttask: {\n\t\t\t\tname: taskToCreate.name,\n\t\t\t\tslug: taskToCreate.slug,\n\t\t\t\tdescription: taskToCreate.description,\n\t\t\t\tcompleted: taskToCreate.completed,\n\t\t\t\tdue_date: taskToCreate.due_date,\n\t\t\t},\n\t\t};\n\t}\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\taskDelete.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'c' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bool, OpenAPIRoute, Str } from \"chanfana\";\nimport { z } from \"zod\";\nimport { type AppContext, Task } from \"../types\";\n\nexport class TaskDelete extends OpenAPIRoute {\n\tschema = {\n\t\ttags: [\"Tasks\"],\n\t\tsummary: \"Delete a Task\",\n\t\trequest: {\n\t\t\tparams: z.object({\n\t\t\t\ttaskSlug: Str({ description: \"Task slug\" }),\n\t\t\t}),\n\t\t},\n\t\tresponses: {\n\t\t\t\"200\": {\n\t\t\t\tdescription: \"Returns if the task was deleted successfully\",\n\t\t\t\tcontent: {\n\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tseries: z.object({\n\t\t\t\t\t\t\t\tsuccess: Bool(),\n\t\t\t\t\t\t\t\tresult: z.object({\n\t\t\t\t\t\t\t\t\ttask: Task,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tasync handle(c: AppContext) {\n\t\t// Get validated data\n\t\tconst data = await this.getValidatedData<typeof this.schema>();\n\n\t\t// Retrieve the validated slug\n\t\tconst { taskSlug } = data.params;\n\n\t\t// Implement your own object deletion here\n\n\t\t// Return the deleted task for confirmation\n\t\treturn {\n\t\t\tresult: {\n\t\t\t\ttask: {\n\t\t\t\t\tname: \"Build something awesome with Cloudflare Workers\",\n\t\t\t\t\tslug: taskSlug,\n\t\t\t\t\tdescription: \"Lorem Ipsum\",\n\t\t\t\t\tcompleted: true,\n\t\t\t\t\tdue_date: \"2022-12-24\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t};\n\t}\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\taskFetch.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'c' is defined but never used. Allowed unused args must match /^_/u.","line":46,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":16},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":57,"column":3,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":57,"endColumn":44,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1139,1180],"text":"// @ts-expect-error: check if the object exists"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bool, OpenAPIRoute, Str } from \"chanfana\";\nimport { z } from \"zod\";\nimport { type AppContext, Task } from \"../types\";\n\nexport class TaskFetch extends OpenAPIRoute {\n\tschema = {\n\t\ttags: [\"Tasks\"],\n\t\tsummary: \"Get a single Task by slug\",\n\t\trequest: {\n\t\t\tparams: z.object({\n\t\t\t\ttaskSlug: Str({ description: \"Task slug\" }),\n\t\t\t}),\n\t\t},\n\t\tresponses: {\n\t\t\t\"200\": {\n\t\t\t\tdescription: \"Returns a single task if found\",\n\t\t\t\tcontent: {\n\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tseries: z.object({\n\t\t\t\t\t\t\t\tsuccess: Bool(),\n\t\t\t\t\t\t\t\tresult: z.object({\n\t\t\t\t\t\t\t\t\ttask: Task,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"404\": {\n\t\t\t\tdescription: \"Task not found\",\n\t\t\t\tcontent: {\n\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tseries: z.object({\n\t\t\t\t\t\t\t\tsuccess: Bool(),\n\t\t\t\t\t\t\t\terror: Str(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tasync handle(c: AppContext) {\n\t\t// Get validated data\n\t\tconst data = await this.getValidatedData<typeof this.schema>();\n\n\t\t// Retrieve the validated slug\n\t\tconst { taskSlug } = data.params;\n\n\t\t// Implement your own object fetch here\n\n\t\tconst exists = true;\n\n\t\t// @ts-ignore: check if the object exists\n\t\tif (exists === false) {\n\t\t\treturn Response.json(\n\t\t\t\t{\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\terror: \"Object not found\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tstatus: 404,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\ttask: {\n\t\t\t\tname: \"my task\",\n\t\t\t\tslug: taskSlug,\n\t\t\t\tdescription: \"this needs to be done\",\n\t\t\t\tcompleted: false,\n\t\t\t\tdue_date: new Date().toISOString().slice(0, 10),\n\t\t\t},\n\t\t};\n\t}\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\taskList.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'c' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'page' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isCompleted' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bool, Num, OpenAPIRoute } from \"chanfana\";\nimport { z } from \"zod\";\nimport { type AppContext, Task } from \"../types\";\n\nexport class TaskList extends OpenAPIRoute {\n\tschema = {\n\t\ttags: [\"Tasks\"],\n\t\tsummary: \"List Tasks\",\n\t\trequest: {\n\t\t\tquery: z.object({\n\t\t\t\tpage: Num({\n\t\t\t\t\tdescription: \"Page number\",\n\t\t\t\t\tdefault: 0,\n\t\t\t\t}),\n\t\t\t\tisCompleted: Bool({\n\t\t\t\t\tdescription: \"Filter by completed flag\",\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t}),\n\t\t},\n\t\tresponses: {\n\t\t\t\"200\": {\n\t\t\t\tdescription: \"Returns a list of tasks\",\n\t\t\t\tcontent: {\n\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tseries: z.object({\n\t\t\t\t\t\t\t\tsuccess: Bool(),\n\t\t\t\t\t\t\t\tresult: z.object({\n\t\t\t\t\t\t\t\t\ttasks: Task.array(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tasync handle(c: AppContext) {\n\t\t// Get validated data\n\t\tconst data = await this.getValidatedData<typeof this.schema>();\n\n\t\t// Retrieve the validated parameters\n\t\tconst { page, isCompleted } = data.query;\n\n\t\t// Implement your own object list here\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Clean my room\",\n\t\t\t\t\tslug: \"clean-room\",\n\t\t\t\t\tdescription: null,\n\t\t\t\t\tcompleted: false,\n\t\t\t\t\tdue_date: \"2025-01-05\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Build something awesome with Cloudflare Workers\",\n\t\t\t\t\tslug: \"cloudflare-workers\",\n\t\t\t\t\tdescription: \"Lorem Ipsum\",\n\t\t\t\t\tcompleted: true,\n\t\t\t\t\tdue_date: \"2022-12-24\",\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\updateOrderItems.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5868,5871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5868,5871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\nimport { z } from 'zod';\nimport { AppContext, ApiResponse, ApiError } from '../types';\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\nimport { CacheService } from '../services/CacheService';\n\n/**\n * 更新 Google Sheets 訂單商品和金額的 API 端點\n * 接收新的商品清單，重新計算總金額，並更新到 Google Sheets\n */\nexport class UpdateOrderItems extends OpenAPIRoute {\n\t// 商品項目的 Zod 驗證結構\n\tprivate readonly OrderItemSchema = z.object({\n\t\tproduct: z.string().describe('商品名稱'),\n\t\tquantity: z.number().positive().describe('商品數量'),\n\t\tprice: z.number().positive().describe('商品單價'),\n\t\tsubtotal: z.number().positive().describe('商品小計')\n\t});\n\n\tschema = {\n\t\ttags: ['Orders'],\n\t\tsummary: '更新訂單商品和金額',\n\t\tdescription: '更新 Google Sheets 中指定訂單的商品清單和總金額',\n\t\trequest: {\n\t\t\tbody: {\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: z.object({\n\t\t\t\t\t\t\tid: z.string().describe('訂單 ID (行索引)'),\n\t\t\t\t\t\t\titems: z.array(this.OrderItemSchema).describe('商品清單'),\n\t\t\t\t\t\t\ttotal: z.number().positive().describe('訂單總金額')\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tresponses: {\n\t\t\t200: {\n\t\t\t\tdescription: '訂單商品更新成功',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse.extend({\n\t\t\t\t\t\t\tmessage: z.string().optional(),\n\t\t\t\t\t\t\tupdated_items: z.string().optional(),\n\t\t\t\t\t\t\tupdated_total: z.number().optional()\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t400: {\n\t\t\t\tdescription: '請求參數錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t404: {\n\t\t\t\tdescription: '找不到指定訂單',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t500: {\n\t\t\t\tdescription: '伺服器內部錯誤',\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: ApiResponse\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tasync handle(c: AppContext) {\n\t\tconst requestId = this.generateRequestId();\n\t\tconst startTime = Date.now();\n\n\t\t// 設定回應標頭\n\t\tc.header('X-Request-ID', requestId);\n\t\tc.header('Content-Type', 'application/json');\n\n\t\ttry {\n\t\t\t// 解析請求體\n\t\t\tconst body = await c.req.json();\n\t\t\tconst { id, items, total } = body;\n\n\t\t\t// 驗證必要參數\n\t\t\tif (!id || !Array.isArray(items) || typeof total !== 'number') {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '缺少必要參數或參數格式錯誤',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 400);\n\t\t\t}\n\n\t\t\t// 驗證商品資料格式（參考原 PHP 邏輯）\n\t\t\tfor (const item of items) {\n\t\t\t\tif (!item.product || typeof item.quantity !== 'number' || \n\t\t\t\t\ttypeof item.price !== 'number' || typeof item.subtotal !== 'number') {\n\t\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\t\treturn c.json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\tmessage: '商品資料格式錯誤',\n\t\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\t\trequest_id: requestId\n\t\t\t\t\t}, 400);\n\t\t\t\t}\n\n\t\t\t\tif (typeof item.product !== 'string' || item.quantity <= 0 || \n\t\t\t\t\titem.price <= 0 || item.subtotal <= 0) {\n\t\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\t\treturn c.json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\tmessage: '商品資料類型錯誤',\n\t\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\t\trequest_id: requestId\n\t\t\t\t\t}, 400);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 初始化服務\n\t\t\tconst env = c.env;\n\t\t\tconst sheetsService = new GoogleSheetsService(\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\n\t\t\t\tenv.GOOGLE_SHEET_ID\n\t\t\t);\n\t\t\tconst cacheService = new CacheService(\n\t\t\t\tenv.CACHE_KV,\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\n\t\t\t);\n\n\t\t\t// 從 Google Sheets 讀取當前資料（Sheet1 工作表）\n\t\t\tconst sheetData = await sheetsService.getSheetData('Sheet1');\n\n\t\t\tif (!sheetData || sheetData.length === 0) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '無法讀取工作表資料',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 500);\n\t\t\t}\n\n\t\t\t// 根據原 PHP 邏輯，使用固定的欄位索引\n\t\t\t// items 在第 8 欄 (索引 8)，amount 在第 9 欄 (索引 9)\n\t\t\tconst itemsCol = 8;  // I欄 - 購買項目\n\t\t\tconst amountCol = 9; // J欄 - 金額\n\n\t\t\t// 尋找目標訂單行（使用行索引作為 ID）\n\t\t\tconst parsedId = parseInt(id.toString());\n\t\t\tif (isNaN(parsedId) || parsedId <= 0 || parsedId >= sheetData.length) {\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\t\treturn c.json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: '找不到指定訂單',\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\t\trequest_id: requestId\n\t\t\t\t}, 404);\n\t\t\t}\n\n\t\t\tconst targetRow = parsedId;\n\n\t\t\t// 將商品陣列轉換為字串格式 (例如: \"原味蘿蔔糕 x 2, 芋頭粿 x 1\")\n\t\t\tconst itemsString = items.map(item => \n\t\t\t\t`${item.product} x ${item.quantity}`\n\t\t\t).join(', ');\n\n\t\t\t// Google Sheets API 使用 1-based 行號，所以需要 +1\n\t\t\tconst sheetRow = targetRow + 1;\n\n\t\t\t// 準備批次更新資料\n\t\t\tconst updates = [];\n\n\t\t\t// 更新商品欄位 (I欄)\n\t\t\tconst itemsRange = `Sheet1!${String.fromCharCode(65 + itemsCol)}${sheetRow}`;\n\t\t\tupdates.push({\n\t\t\t\trange: itemsRange,\n\t\t\t\tvalues: [[itemsString]]\n\t\t\t});\n\n\t\t\t// 更新金額欄位 (J欄)\n\t\t\tconst amountRange = `Sheet1!${String.fromCharCode(65 + amountCol)}${sheetRow}`;\n\t\t\tupdates.push({\n\t\t\t\trange: amountRange,\n\t\t\t\tvalues: [[total]]\n\t\t\t});\n\n\t\t\t// 執行批次更新\n\t\t\tawait sheetsService.batchUpdateSheetData(updates, 'RAW');\n\n\t\t\t// 更新成功後清除相關快取（參考原 PHP 邏輯）\n\t\t\tawait this.clearRelatedCache(cacheService);\n\n\t\t\tconst response = {\n\t\t\t\tsuccess: true,\n\t\t\t\tmessage: '訂單商品已成功更新',\n\t\t\t\tupdated_items: itemsString,\n\t\t\t\tupdated_total: total,\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(response);\n\n\t\t} catch (error) {\n\t\t\tconsole.error('UpdateOrderItems 錯誤:', error);\n\n\t\t\tconst errorResponse = {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '更新失敗: ' + (error instanceof Error ? error.message : String(error)),\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\n\t\t\t\trequest_id: requestId\n\t\t\t};\n\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\n\t\t\treturn c.json(errorResponse, statusCode as any);\n\t\t}\n\t}\n\n\t/**\n\t * 清除相關快取\n\t * 參考原 PHP 檔案邏輯，更新後需要清除訂單快取確保下次讀取最新資料\n\t */\n\tprivate async clearRelatedCache(cacheService: CacheService): Promise<void> {\n\t\ttry {\n\t\t\t// 清除訂單相關的快取\n\t\t\tconst ordersCacheKey = CacheService.generateKey('orders', 'all');\n\t\t\tawait cacheService.delete(ordersCacheKey);\n\n\t\t\t// 可以根據需要清除其他相關快取\n\t\t\t// 例如：特定訂單的快取、統計資料快取等\n\t\t} catch (error) {\n\t\t\t// 快取清除失敗不應影響主要操作\n\t\t\tconsole.warn('清除快取時發生錯誤:', error);\n\t\t}\n\t}\n\n\t/**\n\t * 生成請求 ID\n\t */\n\tprivate generateRequestId(): string {\n\t\tconst timestamp = Date.now();\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\n\t}\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\updateOrderStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2135,2138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2135,2138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5195,5198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5195,5198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\r\nimport { z } from 'zod';\r\nimport { AppContext, ApiResponse, ApiError } from '../types';\r\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\r\nimport { CacheService } from '../services/CacheService';\r\n\r\n/**\r\n * 更新 Google Sheets 訂單狀態的 API 端點\r\n * 支援四種合法狀態更新並自動清除相關快取\r\n */\r\nexport class UpdateOrderStatus extends OpenAPIRoute {\r\n\tschema = {\r\n\t\ttags: ['Orders'],\r\n\t\tsummary: '更新訂單狀態',\r\n\t\tdescription: '更新 Google Sheets 中指定訂單的狀態，僅允許四種合法狀態值',\r\n\t\trequest: {\r\n\t\t\tbody: {\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: z.object({\r\n\t\t\t\t\t\t\tid: z.string().describe('訂單 ID'),\r\n\t\t\t\t\t\t\tstatus: z.enum(['訂單確認中', '已抄單', '已出貨', '取消訂單']).describe('新的訂單狀態')\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: '訂單狀態更新成功',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse.extend({\r\n\t\t\t\t\t\t\tmessage: z.string().optional()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t400: {\r\n\t\t\t\tdescription: '請求參數錯誤或狀態值不正確',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t404: {\r\n\t\t\t\tdescription: '找不到指定訂單',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t500: {\r\n\t\t\t\tdescription: '伺服器內部錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// 合法的訂單狀態值（參考原 PHP 檔案）\r\n\tprivate readonly VALID_STATUSES = ['訂單確認中', '已抄單', '已出貨', '取消訂單'] as const;\r\n\r\n\tasync handle(c: AppContext) {\r\n\t\tconst requestId = this.generateRequestId();\r\n\t\tconst startTime = Date.now();\r\n\r\n\t\t// 設定回應標頭\r\n\t\tc.header('X-Request-ID', requestId);\r\n\t\tc.header('Content-Type', 'application/json');\r\n\r\n\t\ttry {\r\n\t\t\t// 解析請求體\r\n\t\t\tconst body = await c.req.json();\r\n\t\t\tconst { id, status } = body;\r\n\r\n\t\t\t// 驗證必要參數\r\n\t\t\tif (!id || !status) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '缺少參數',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 400);\r\n\t\t\t}\r\n\r\n\t\t\t// 驗證狀態值是否合法（參考原 PHP 邏輯）\r\n\t\t\tif (!this.VALID_STATUSES.includes(status as any)) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '狀態值不正確',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 400);\r\n\t\t\t}\r\n\r\n\t\t\t// 初始化服務\r\n\t\t\tconst env = c.env;\r\n\t\t\tconst sheetsService = new GoogleSheetsService(\r\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\r\n\t\t\t\tenv.GOOGLE_SHEET_ID\r\n\t\t\t);\r\n\t\t\tconst cacheService = new CacheService(\r\n\t\t\t\tenv.CACHE_KV,\r\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\r\n\t\t\t);\r\n\r\n\t\t\t// 從 Google Sheets 讀取當前資料（Sheet1 工作表）\r\n\t\t\tconst sheetData = await sheetsService.getSheetData('Sheet1');\r\n\r\n\t\t\tif (!sheetData || sheetData.length === 0) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '無法讀取工作表資料',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 500);\r\n\t\t\t}\r\n\r\n\t\t\t// 尋找標題行中的 id 和 status 欄位索引\r\n\t\t\tconst header = sheetData[0];\r\n\t\t\tconst idCol = header.indexOf('id');\r\n\t\t\tconst statusCol = header.indexOf('status');\r\n\r\n\t\t\tif (idCol === -1 || statusCol === -1) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '找不到 id 或 status 欄位',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 500);\r\n\t\t\t}\r\n\r\n\t\t\t// 尋找目標訂單行\r\n\t\t\tlet targetRow = -1;\r\n\t\t\tfor (let i = 1; i < sheetData.length; i++) {\r\n\t\t\t\tconst row = sheetData[i];\r\n\t\t\t\tif (row && row[idCol] && row[idCol].toString() === id.toString()) {\r\n\t\t\t\t\ttargetRow = i + 1; // Google Sheets API 使用 1-based 索引\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (targetRow === -1) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '找不到指定訂單',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 404);\r\n\t\t\t}\r\n\r\n\t\t\t// 計算要更新的儲存格範圍（參考原 PHP 邏輯）\r\n\t\t\tconst columnLetter = String.fromCharCode(65 + statusCol); // A=65, B=66, ...\r\n\t\t\tconst rangeToUpdate = `Sheet1!${columnLetter}${targetRow}`;\r\n\r\n\t\t\t// 更新 Google Sheets 中的狀態\r\n\t\t\tawait sheetsService.updateSheetData(rangeToUpdate, [[status]]);\r\n\r\n\t\t\t// 更新成功後清除相關快取（參考原 PHP 邏輯）\r\n\t\t\tawait this.clearRelatedCache(cacheService);\r\n\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: '訂單狀態已成功更新',\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(response);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('UpdateOrderStatus 錯誤:', error);\r\n\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '無法更新訂單狀態',\r\n\t\t\t\terror: error instanceof ApiError ? undefined : (error instanceof Error ? error.message : String(error)),\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(errorResponse, statusCode as any);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除相關快取\r\n\t * 參考原 PHP 檔案邏輯，更新後需要清除訂單快取確保下次讀取最新資料\r\n\t */\r\n\tprivate async clearRelatedCache(cacheService: CacheService): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// 清除訂單相關的快取\r\n\t\t\tconst ordersCacheKey = CacheService.generateKey('orders', 'all');\r\n\t\t\tawait cacheService.delete(ordersCacheKey);\r\n\r\n\t\t\t// 可以根據需要清除其他相關快取\r\n\t\t\t// 例如：特定訂單的快取、統計資料快取等\r\n\t\t} catch (error) {\r\n\t\t\t// 快取清除失敗不應影響主要操作\r\n\t\t\tconsole.warn('清除快取時發生錯誤:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 生成請求 ID\r\n\t */\r\n\tprivate generateRequestId(): string {\r\n\t\tconst timestamp = Date.now();\r\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\r\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\r\n\t}\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\endpoints\\updatePaymentStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3787,3790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3787,3790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIRoute } from 'chanfana';\r\nimport { z } from 'zod';\r\nimport { AppContext, ApiResponse, ApiError } from '../types';\r\nimport { GoogleSheetsService } from '../services/GoogleSheetsService';\r\nimport { CacheService } from '../services/CacheService';\r\n\r\n/**\r\n * 更新 Google Sheets 付款狀態的 API 端點\r\n * 直接更新指定行的付款狀態欄位（P 欄）\r\n */\r\nexport class UpdatePaymentStatus extends OpenAPIRoute {\r\n\tschema = {\r\n\t\ttags: ['Orders'],\r\n\t\tsummary: '更新付款狀態',\r\n\t\tdescription: '更新 Google Sheets 中指定訂單的付款狀態（款項欄位）',\r\n\t\trequest: {\r\n\t\t\tbody: {\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: z.object({\r\n\t\t\t\t\t\t\tid: z.string().describe('訂單 ID'),\r\n\t\t\t\t\t\t\tstatus: z.enum(['', '未收費', '已收費', '待轉帳', '未全款', '特殊']).describe('新的付款狀態')\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: '付款狀態更新成功',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse.extend({\r\n\t\t\t\t\t\t\tmessage: z.string().optional()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t400: {\r\n\t\t\t\tdescription: '請求參數錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t500: {\r\n\t\t\t\tdescription: '伺服器內部錯誤',\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t'application/json': {\r\n\t\t\t\t\t\tschema: ApiResponse\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tasync handle(c: AppContext) {\r\n\t\tconst requestId = this.generateRequestId();\r\n\t\tconst startTime = Date.now();\r\n\r\n\t\t// 設定回應標頭\r\n\t\tc.header('X-Request-ID', requestId);\r\n\t\tc.header('Content-Type', 'application/json');\r\n\r\n\t\ttry {\r\n\t\t\t// 解析請求體\r\n\t\t\tconst body = await c.req.json();\r\n\t\t\tconst { id: rowId, status: paymentStatus } = body;\r\n\r\n\t\t\t// 驗證必要參數\r\n\t\t\tif (rowId === null || rowId === undefined || !paymentStatus) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '缺少必要參數',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 400);\r\n\t\t\t}\r\n\r\n\t\t\t// 驗證 rowId 是否為有效的非負整數\r\n\t\t\tconst parsedRowId = parseInt(rowId.toString());\r\n\t\t\tif (isNaN(parsedRowId) || parsedRowId < 0) {\r\n\t\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\t\treturn c.json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: '行 ID 必須為非負整數',\r\n\t\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\t\trequest_id: requestId\r\n\t\t\t\t}, 400);\r\n\t\t\t}\r\n\r\n\t\t\t// 初始化服務\r\n\t\t\tconst env = c.env;\r\n\t\t\tconst sheetsService = new GoogleSheetsService(\r\n\t\t\t\tenv.GOOGLE_SERVICE_ACCOUNT_KEY,\r\n\t\t\t\tenv.GOOGLE_SHEET_ID\r\n\t\t\t);\r\n\t\t\tconst cacheService = new CacheService(\r\n\t\t\t\tenv.CACHE_KV,\r\n\t\t\t\tparseInt(env.CACHE_DURATION || '15')\r\n\t\t\t);\r\n\r\n\t\t\t// 計算要更新的儲存格範圍\r\n\t\t\t// 參考原 PHP 邏輯：款項在 P 欄（index 15），rowId 對應實際行號（+1 因為有標題列）\r\n\t\t\tconst actualRowNumber = parsedRowId + 1; // 加上標題行\r\n\t\t\tconst rangeToUpdate = `Sheet1!P${actualRowNumber}`; // P 欄是付款狀態欄位\r\n\r\n\t\t\t// 更新 Google Sheets 中的付款狀態\r\n\t\t\t// 使用 USER_ENTERED 模式（參考原 PHP 檔案）\r\n\t\t\tawait sheetsService.updateSheetData(rangeToUpdate, [[paymentStatus]], 'USER_ENTERED');\r\n\r\n\t\t\t// 更新成功後清除相關快取（參考原 PHP 邏輯）\r\n\t\t\tawait this.clearRelatedCache(cacheService);\r\n\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: '付款狀態已成功更新',\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(response);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('UpdatePaymentStatus 錯誤:', error);\r\n\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: error instanceof ApiError ? error.message : '無法更新付款狀態',\r\n\t\t\t\terror: error instanceof ApiError ? undefined : (error instanceof Error ? error.message : String(error)),\r\n\t\t\t\ttimestamp: Math.floor(Date.now() / 1000),\r\n\t\t\t\trequest_id: requestId\r\n\t\t\t};\r\n\r\n\t\t\tconst statusCode = error instanceof ApiError ? error.statusCode : 500;\r\n\t\t\tc.header('X-Response-Time', `${Date.now() - startTime}ms`);\r\n\t\t\treturn c.json(errorResponse, statusCode as any);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除相關快取\r\n\t * 參考原 PHP 檔案邏輯，更新後需要清除訂單快取確保下次讀取最新資料\r\n\t */\r\n\tprivate async clearRelatedCache(cacheService: CacheService): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// 清除訂單相關的快取\r\n\t\t\tconst ordersCacheKey = CacheService.generateKey('orders', 'all');\r\n\t\t\tawait cacheService.delete(ordersCacheKey);\r\n\r\n\t\t\t// 可以根據需要清除其他相關快取\r\n\t\t\t// 例如：特定訂單的快取、統計資料快取等\r\n\t\t} catch (error) {\r\n\t\t\t// 快取清除失敗不應影響主要操作\r\n\t\t\tconsole.warn('清除快取時發生錯誤:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 生成請求 ID\r\n\t */\r\n\tprivate generateRequestId(): string {\r\n\t\tconst timestamp = Date.now();\r\n\t\tconst random = Math.floor(Math.random() * 9999) + 1000;\r\n\t\treturn `${timestamp.toString(36)}-${random.toString(36)}`;\r\n\t}\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\services\\CacheService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1235,1238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1235,1238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CacheOptions } from '../types';\n\n/**\n * KV Store 快取管理服務\n * 處理 Cloudflare KV 的快取操作，包括讀取、寫入、失效和 TTL 管理\n */\nexport class CacheService {\n\tprivate kv: KVNamespace;\n\tprivate defaultTTL: number;\n\n\tconstructor(kv: KVNamespace, defaultTTL: number = 15) {\n\t\tthis.kv = kv;\n\t\tthis.defaultTTL = defaultTTL;\n\t}\n\n\t/**\n\t * 從快取中獲取資料\n\t * @param key 快取鍵\n\t * @returns 快取的資料或 null\n\t */\n\tasync get<T = any>(key: string): Promise<T | null> {\n\t\ttry {\n\t\t\tconst cached = await this.kv.get(key, 'json');\n\t\t\tif (!cached) {return null;}\n\n\t\t\t// 檢查是否包含時間戳和 TTL 資訊\n\t\t\tif (typeof cached === 'object' && cached !== null && 'data' in cached && 'timestamp' in cached && 'ttl' in cached) {\n\t\t\t\tconst cacheData = cached as {\n\t\t\t\t\tdata: T;\n\t\t\t\t\ttimestamp: number;\n\t\t\t\t\tttl: number;\n\t\t\t\t};\n\n\t\t\t\t// 檢查是否過期\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (now - cacheData.timestamp > cacheData.ttl * 1000) {\n\t\t\t\t\t// 快取已過期，刪除並返回 null\n\t\t\t\t\tawait this.delete(key);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn cacheData.data;\n\t\t\t}\n\n\t\t\t// 舊格式的快取資料，直接返回\n\t\t\treturn cached as T;\n\t\t} catch (error) {\n\t\t\tconsole.error(`快取讀取錯誤 (key: ${key}):`, error);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 將資料寫入快取\n\t * @param key 快取鍵\n\t * @param data 要快取的資料\n\t * @param ttl TTL (秒)，預設使用建構函數中的 defaultTTL\n\t */\n\tasync set<T = any>(key: string, data: T, ttl?: number): Promise<void> {\n\t\ttry {\n\t\t\tconst actualTTL = ttl || this.defaultTTL;\n\t\t\tconst cacheData = {\n\t\t\t\tdata,\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tttl: actualTTL\n\t\t\t};\n\n\t\t\t// 使用 KV 的 expirationTtl 作為備用過期機制\n\t\t\t// 設定為 TTL 的 2 倍，確保我們的時間戳檢查優先生效\n\t\t\tawait this.kv.put(key, JSON.stringify(cacheData), {\n\t\t\t\texpirationTtl: actualTTL * 2\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(`快取寫入錯誤 (key: ${key}):`, error);\n\t\t\t// 快取寫入失敗不應該影響主要功能\n\t\t}\n\t}\n\n\t/**\n\t * 刪除快取\n\t * @param key 快取鍵\n\t */\n\tasync delete(key: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.kv.delete(key);\n\t\t} catch (error) {\n\t\t\tconsole.error(`快取刪除錯誤 (key: ${key}):`, error);\n\t\t}\n\t}\n\n\t/**\n\t * 使快取失效（批量刪除）\n\t * @param pattern 快取鍵的模式或前綴\n\t */\n\tasync invalidate(pattern: string): Promise<void> {\n\t\ttry {\n\t\t\t// KV 不支援模式匹配刪除，需要列出所有鍵然後過濾\n\t\t\tconst list = await this.kv.list({ prefix: pattern });\n\t\t\t\n\t\t\tconst deletePromises = list.keys.map(key => this.delete(key.name));\n\t\t\tawait Promise.all(deletePromises);\n\t\t} catch (error) {\n\t\t\tconsole.error(`快取失效錯誤 (pattern: ${pattern}):`, error);\n\t\t}\n\t}\n\n\t/**\n\t * 檢查快取是否存在且未過期\n\t * @param key 快取鍵\n\t * @returns 快取狀態資訊\n\t */\n\tasync getStatus(key: string): Promise<{\n\t\texists: boolean;\n\t\texpired: boolean;\n\t\tage?: number;\n\t\tttl?: number;\n\t}> {\n\t\ttry {\n\t\t\tconst cached = await this.kv.get(key, 'json');\n\t\t\tif (!cached) {\n\t\t\t\treturn { exists: false, expired: false };\n\t\t\t}\n\n\t\t\tif (typeof cached === 'object' && cached !== null && 'timestamp' in cached && 'ttl' in cached) {\n\t\t\t\tconst cacheData = cached as {\n\t\t\t\t\ttimestamp: number;\n\t\t\t\t\tttl: number;\n\t\t\t\t};\n\n\t\t\t\tconst now = Date.now();\n\t\t\t\tconst age = Math.floor((now - cacheData.timestamp) / 1000);\n\t\t\t\tconst expired = age > cacheData.ttl;\n\n\t\t\t\treturn {\n\t\t\t\t\texists: true,\n\t\t\t\t\texpired,\n\t\t\t\t\tage,\n\t\t\t\t\tttl: cacheData.ttl\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// 舊格式快取，假設未過期\n\t\t\treturn { exists: true, expired: false };\n\t\t} catch (error) {\n\t\t\tconsole.error(`快取狀態檢查錯誤 (key: ${key}):`, error);\n\t\t\treturn { exists: false, expired: false };\n\t\t}\n\t}\n\n\t/**\n\t * 生成標準化的快取鍵\n\t * @param prefix 前綴\n\t * @param identifier 識別符\n\t * @returns 標準化的快取鍵\n\t */\n\tstatic generateKey(prefix: string, identifier: string = ''): string {\n\t\tconst parts = [prefix];\n\t\tif (identifier) {\n\t\t\tparts.push(identifier);\n\t\t}\n\t\treturn parts.join(':').toLowerCase();\n\t}\n\n\t/**\n\t * 快取包裝器 - 自動處理快取邏輯\n\t * @param options 快取選項\n\t * @param fetchFunction 資料獲取函數\n\t * @returns 快取的資料或新獲取的資料\n\t */\n\tasync wrap<T>(\n\t\toptions: CacheOptions,\n\t\tfetchFunction: () => Promise<T>\n\t): Promise<T> {\n\t\t// 如果強制刷新，直接獲取新資料\n\t\tif (options.forceRefresh) {\n\t\t\tconst freshData = await fetchFunction();\n\t\t\tawait this.set(options.key, freshData, options.ttl);\n\t\t\treturn freshData;\n\t\t}\n\n\t\t// 嘗試從快取獲取\n\t\tconst cachedData = await this.get<T>(options.key);\n\t\tif (cachedData !== null) {\n\t\t\treturn cachedData;\n\t\t}\n\n\t\t// 快取未命中，獲取新資料\n\t\tconst freshData = await fetchFunction();\n\t\tawait this.set(options.key, freshData, options.ttl);\n\t\treturn freshData;\n\t}\n\n\t/**\n\t * 獲取快取統計資訊\n\t * @param prefix 快取鍵前綴\n\t * @returns 快取統計\n\t */\n\tasync getStats(prefix?: string): Promise<{\n\t\ttotal: number;\n\t\texpired: number;\n\t\tvalid: number;\n\t}> {\n\t\ttry {\n\t\t\tconst listOptions = prefix ? { prefix } : {};\n\t\t\tconst list = await this.kv.list(listOptions);\n\t\t\t\n\t\t\tlet expired = 0;\n\t\t\tlet valid = 0;\n\n\t\t\tfor (const key of list.keys) {\n\t\t\t\tconst status = await this.getStatus(key.name);\n\t\t\t\tif (status.exists) {\n\t\t\t\t\tif (status.expired) {\n\t\t\t\t\t\texpired++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalid++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttotal: list.keys.length,\n\t\t\t\texpired,\n\t\t\t\tvalid\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error('快取統計錯誤:', error);\n\t\t\treturn { total: 0, expired: 0, valid: 0 };\n\t\t}\n\t}\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\services\\GoogleSheetsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2531,2534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2531,2534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2984,2987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2984,2987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4666,4669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4666,4669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5487,5490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5487,5490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6234,6237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6234,6237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7882,7885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7882,7885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9625,9628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9625,9628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":350,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9669,9672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9669,9672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":410,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":410,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11208,11211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11208,11211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ApiError } from '../types';\n\n/**\n * Google Sheets API 服務類別\n * 處理與 Google Sheets 的所有互動，包括認證、資料讀取和錯誤處理\n */\nexport class GoogleSheetsService {\n\tprivate serviceAccountKey: string;\n\tprivate spreadsheetId: string;\n\tprivate accessToken: string | null = null;\n\tprivate tokenExpiry: number = 0;\n\n\tconstructor(serviceAccountKey: string | undefined, spreadsheetId: string | undefined) {\n\t\tif (!serviceAccountKey) {\n\t\t\tthrow new Error('Google Service Account Key is required but not provided');\n\t\t}\n\t\tif (!spreadsheetId) {\n\t\t\tthrow new Error('Google Spreadsheet ID is required but not provided');\n\t\t}\n\t\tthis.serviceAccountKey = serviceAccountKey;\n\t\tthis.spreadsheetId = spreadsheetId;\n\t}\n\n\t/**\n\t * 獲取 Google Sheets API 存取權杖\n\t * 使用 Service Account 進行 JWT 認證\n\t */\n\tprivate async getAccessToken(): Promise<string> {\n\t\t// 檢查現有權杖是否仍然有效\n\t\tif (this.accessToken && Date.now() < this.tokenExpiry) {\n\t\t\treturn this.accessToken;\n\t\t}\n\n\t\ttry {\n\t\t\t// 增加除錯資訊\n\t\t\tif (!this.serviceAccountKey) {\n\t\t\t\tthrow new ApiError(500, '環境變數 GOOGLE_SERVICE_ACCOUNT_KEY 未設定', 'ENV_VAR_MISSING');\n\t\t\t}\n\t\t\t\n\t\t\t// 檢查 JSON 格式\n\t\t\tif (typeof this.serviceAccountKey !== 'string') {\n\t\t\t\tthrow new ApiError(500, `Service account key 類型錯誤: ${typeof this.serviceAccountKey}`, 'INVALID_KEY_TYPE');\n\t\t\t}\n\t\t\t\n\t\t\t// 嘗試解析 JSON，提供更詳細的錯誤資訊\n\t\t\tlet serviceAccount;\n\t\t\ttry {\n\t\t\t\tserviceAccount = JSON.parse(this.serviceAccountKey);\n\t\t\t} catch (parseError) {\n\t\t\t\tthrow new ApiError(500, `JSON 解析失敗: ${parseError instanceof Error ? parseError.message : String(parseError)}。Key 長度: ${this.serviceAccountKey.length}，前100字元: ${this.serviceAccountKey.substring(0, 100)}`, 'JSON_PARSE_ERROR');\n\t\t\t}\n\t\t\t\n\t\t\t// 建立 JWT payload\n\t\t\tconst now = Math.floor(Date.now() / 1000);\n\t\t\tconst payload = {\n\t\t\t\tiss: serviceAccount.client_email,\n\t\t\t\tscope: 'https://www.googleapis.com/auth/spreadsheets',\n\t\t\t\taud: 'https://oauth2.googleapis.com/token',\n\t\t\t\texp: now + 3600, // 1 小時後過期\n\t\t\t\tiat: now\n\t\t\t};\n\n\t\t\t// 使用 Web Crypto API 建立 JWT\n\t\t\tconst jwt = await this.createJWT(payload, serviceAccount.private_key);\n\n\t\t\t// 向 Google OAuth2 端點請求存取權杖\n\t\t\tconst response = await fetch('https://oauth2.googleapis.com/token', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\tgrant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n\t\t\t\t\tassertion: jwt\n\t\t\t\t})\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst error = await response.text();\n\t\t\t\tthrow new ApiError(401, `Google OAuth 認證失敗: ${error}`, 'AUTH_FAILED');\n\t\t\t}\n\n\t\t\tconst tokenData: any = await response.json();\n\t\t\tthis.accessToken = tokenData.access_token;\n\t\t\tthis.tokenExpiry = Date.now() + (tokenData.expires_in * 1000) - 60000; // 提前1分鐘過期\n\n\t\t\treturn this.accessToken;\n\t\t} catch (error) {\n\t\t\tif (error instanceof ApiError) {throw error;}\n\t\t\tthrow new ApiError(500, `取得存取權杖失敗: ${error instanceof Error ? error.message : String(error)}`, 'TOKEN_ERROR');\n\t\t}\n\t}\n\n\t/**\n\t * 使用 Web Crypto API 建立 JWT\n\t */\n\tprivate async createJWT(payload: any, privateKey: string): Promise<string> {\n\t\ttry {\n\t\t\t// JWT Header\n\t\t\tconst header = {\n\t\t\t\talg: 'RS256',\n\t\t\t\ttyp: 'JWT'\n\t\t\t};\n\n\t\t\t// Base64URL 編碼\n\t\t\tconst encodedHeader = this.base64UrlEncode(JSON.stringify(header));\n\t\t\tconst encodedPayload = this.base64UrlEncode(JSON.stringify(payload));\n\t\t\tconst signingInput = `${encodedHeader}.${encodedPayload}`;\n\n\t\t\t// 匯入私鑰\n\t\t\tconst keyData = privateKey\n\t\t\t\t.replace(/-----BEGIN PRIVATE KEY-----/, '')\n\t\t\t\t.replace(/-----END PRIVATE KEY-----/, '')\n\t\t\t\t.replace(/\\s/g, '');\n\t\t\t\n\t\t\tconst binaryKey = Uint8Array.from(atob(keyData), c => c.charCodeAt(0));\n\t\t\tconst cryptoKey = await crypto.subtle.importKey(\n\t\t\t\t'pkcs8',\n\t\t\t\tbinaryKey,\n\t\t\t\t{\n\t\t\t\t\tname: 'RSASSA-PKCS1-v1_5',\n\t\t\t\t\thash: 'SHA-256'\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\t['sign']\n\t\t\t);\n\n\t\t\t// 簽名\n\t\t\tconst signature = await crypto.subtle.sign(\n\t\t\t\t'RSASSA-PKCS1-v1_5',\n\t\t\t\tcryptoKey,\n\t\t\t\tnew TextEncoder().encode(signingInput)\n\t\t\t);\n\n\t\t\tconst encodedSignature = this.base64UrlEncode(new Uint8Array(signature));\n\t\t\treturn `${signingInput}.${encodedSignature}`;\n\t\t} catch (error) {\n\t\t\tthrow new ApiError(500, `JWT 建立失敗: ${error instanceof Error ? error.message : String(error)}`, 'JWT_ERROR');\n\t\t}\n\t}\n\n\t/**\n\t * Base64URL 編碼\n\t */\n\tprivate base64UrlEncode(data: string | Uint8Array): string {\n\t\tlet base64: string;\n\t\tif (typeof data === 'string') {\n\t\t\tbase64 = btoa(data);\n\t\t} else {\n\t\t\tbase64 = btoa(String.fromCharCode(...data));\n\t\t}\n\t\treturn base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n\t}\n\n\t/**\n\t * 從 Google Sheets 讀取資料\n\t * @param range 要讀取的範圍 (例如: 'Sheet1' 或 'Sheet1!A1:Z100')\n\t * @param retryCount 重試次數\n\t */\n\tasync getSheetData(range: string, retryCount: number = 3): Promise<any[][]> {\n\t\tfor (let attempt = 1; attempt <= retryCount; attempt++) {\n\t\t\ttry {\n\t\t\t\tconst accessToken = await this.getAccessToken();\n\t\t\t\t\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}/values/${encodeURIComponent(range)}`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst errorText = await response.text();\n\t\t\t\t\t\n\t\t\t\t\t// 如果是認證錯誤，清除快取的權杖並重試\n\t\t\t\t\tif (response.status === 401 && attempt < retryCount) {\n\t\t\t\t\t\tthis.accessToken = null;\n\t\t\t\t\t\tthis.tokenExpiry = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthrow new ApiError(\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t`Google Sheets API 錯誤: ${errorText}`,\n\t\t\t\t\t\t'SHEETS_API_ERROR'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst data: any = await response.json();\n\t\t\t\treturn data.values || [];\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof ApiError) {\n\t\t\t\t\t// 如果是最後一次嘗試，直接拋出錯誤\n\t\t\t\t\tif (attempt === retryCount) {throw error;}\n\t\t\t\t\t\n\t\t\t\t\t// 如果不是認證錯誤，等待後重試\n\t\t\t\t\tif (error.statusCode !== 401) {\n\t\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000); // 指數退避\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 網路錯誤等，等待後重試\n\t\t\t\t\tif (attempt === retryCount) {\n\t\t\t\t\t\tthrow new ApiError(500, `網路錯誤: ${error instanceof Error ? error.message : String(error)}`, 'NETWORK_ERROR');\n\t\t\t\t\t}\n\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 更新 Google Sheets 資料\n\t * @param range 要更新的範圍\n\t * @param values 要更新的值\n\t * @param valueInputOption 值輸入選項\n\t */\n\tasync updateSheetData(range: string, values: any[][], valueInputOption: 'RAW' | 'USER_ENTERED' = 'RAW', retryCount: number = 3): Promise<void> {\n\t\tfor (let attempt = 1; attempt <= retryCount; attempt++) {\n\t\t\ttry {\n\t\t\t\tconst accessToken = await this.getAccessToken();\n\t\t\t\t\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}/values/${encodeURIComponent(range)}?valueInputOption=${valueInputOption}`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tvalues: values\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst errorText = await response.text();\n\t\t\t\t\t\n\t\t\t\t\tif (response.status === 401 && attempt < retryCount) {\n\t\t\t\t\t\tthis.accessToken = null;\n\t\t\t\t\t\tthis.tokenExpiry = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthrow new ApiError(\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t`Google Sheets 更新失敗: ${errorText}`,\n\t\t\t\t\t\t'SHEETS_UPDATE_ERROR'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn; // 成功更新\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof ApiError) {\n\t\t\t\t\tif (attempt === retryCount) {throw error;}\n\t\t\t\t\tif (error.statusCode !== 401) {\n\t\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (attempt === retryCount) {\n\t\t\t\t\t\tthrow new ApiError(500, `網路錯誤: ${error instanceof Error ? error.message : String(error)}`, 'NETWORK_ERROR');\n\t\t\t\t\t}\n\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 批次更新 Google Sheets 資料\n\t * @param updates 批次更新的資料陣列\n\t * @param valueInputOption 值輸入選項\n\t * @param retryCount 重試次數\n\t */\n\tasync batchUpdateSheetData(\n\t\tupdates: Array<{ range: string; values: any[][] }>,\n\t\tvalueInputOption: 'RAW' | 'USER_ENTERED' = 'RAW',\n\t\tretryCount: number = 3\n\t): Promise<void> {\n\t\tfor (let attempt = 1; attempt <= retryCount; attempt++) {\n\t\t\ttry {\n\t\t\t\tconst accessToken = await this.getAccessToken();\n\t\t\t\t\n\t\t\t\t// 準備批次更新請求體\n\t\t\t\tconst requestBody = {\n\t\t\t\t\tvalueInputOption: valueInputOption,\n\t\t\t\t\tdata: updates.map(update => ({\n\t\t\t\t\t\trange: update.range,\n\t\t\t\t\t\tvalues: update.values\n\t\t\t\t\t}))\n\t\t\t\t};\n\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}/values:batchUpdate`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(requestBody)\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst errorText = await response.text();\n\t\t\t\t\t\n\t\t\t\t\tif (response.status === 401 && attempt < retryCount) {\n\t\t\t\t\t\tthis.accessToken = null;\n\t\t\t\t\t\tthis.tokenExpiry = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthrow new ApiError(\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t`Google Sheets 批次更新失敗: ${errorText}`,\n\t\t\t\t\t\t'SHEETS_BATCH_UPDATE_ERROR'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn; // 成功更新\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof ApiError) {\n\t\t\t\t\tif (attempt === retryCount) {throw error;}\n\t\t\t\t\tif (error.statusCode !== 401) {\n\t\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (attempt === retryCount) {\n\t\t\t\t\t\tthrow new ApiError(500, `網路錯誤: ${error instanceof Error ? error.message : String(error)}`, 'NETWORK_ERROR');\n\t\t\t\t\t}\n\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 執行 Google Sheets batchUpdate 請求\n\t * 支援各種批次操作，包括刪除行、插入行等\n\t * @param requests 批次請求陣列\n\t * @param retryCount 重試次數\n\t */\n\tasync batchUpdate(\n\t\trequests: any[],\n\t\tretryCount: number = 3\n\t): Promise<any> {\n\t\tfor (let attempt = 1; attempt <= retryCount; attempt++) {\n\t\t\ttry {\n\t\t\t\tconst accessToken = await this.getAccessToken();\n\t\t\t\t\n\t\t\t\t// 準備 batchUpdate 請求體\n\t\t\t\tconst requestBody = {\n\t\t\t\t\trequests: requests\n\t\t\t\t};\n\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}:batchUpdate`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(requestBody)\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst errorText = await response.text();\n\t\t\t\t\t\n\t\t\t\t\tif (response.status === 401 && attempt < retryCount) {\n\t\t\t\t\t\tthis.accessToken = null;\n\t\t\t\t\t\tthis.tokenExpiry = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthrow new ApiError(\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t`Google Sheets batchUpdate 失敗: ${errorText}`,\n\t\t\t\t\t\t'SHEETS_BATCH_UPDATE_ERROR'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst result = await response.json();\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof ApiError) {\n\t\t\t\t\tif (attempt === retryCount) {throw error;}\n\t\t\t\t\tif (error.statusCode !== 401) {\n\t\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (attempt === retryCount) {\n\t\t\t\t\t\tthrow new ApiError(500, `網路錯誤: ${error instanceof Error ? error.message : String(error)}`, 'NETWORK_ERROR');\n\t\t\t\t\t}\n\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 獲取工作表的基本資訊，包括工作表 ID\n\t * @param retryCount 重試次數\n\t */\n\tasync getSpreadsheetInfo(retryCount: number = 3): Promise<any> {\n\t\tfor (let attempt = 1; attempt <= retryCount; attempt++) {\n\t\t\ttry {\n\t\t\t\tconst accessToken = await this.getAccessToken();\n\t\t\t\t\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst errorText = await response.text();\n\t\t\t\t\t\n\t\t\t\t\tif (response.status === 401 && attempt < retryCount) {\n\t\t\t\t\t\tthis.accessToken = null;\n\t\t\t\t\t\tthis.tokenExpiry = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthrow new ApiError(\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t`Google Sheets API 錯誤: ${errorText}`,\n\t\t\t\t\t\t'SHEETS_API_ERROR'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\t\t\t\treturn data;\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof ApiError) {\n\t\t\t\t\tif (attempt === retryCount) {throw error;}\n\t\t\t\t\tif (error.statusCode !== 401) {\n\t\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (attempt === retryCount) {\n\t\t\t\t\t\tthrow new ApiError(500, `網路錯誤: ${error instanceof Error ? error.message : String(error)}`, 'NETWORK_ERROR');\n\t\t\t\t\t}\n\t\t\t\t\tawait this.delay(Math.pow(2, attempt) * 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 延遲函數，用於重試機制\n\t */\n\tprivate delay(ms: number): Promise<void> {\n\t\treturn new Promise(resolve => setTimeout(resolve, ms));\n\t}\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\services\\SupabaseService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\src\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\sheet-order-api\\worker-configuration.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":12,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":12,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[349,388],"text":"type Env = Cloudflare.Env"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":31,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":31,"endColumn":30,"fix":{"range":[1337,1340],"text":"let"},"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":151,"column":24,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":151,"endColumn":32,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":215,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":215,"endColumn":34,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":308,"column":39,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":308,"endColumn":47,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":342,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":342,"endColumn":25,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[16463,16491],"text":"type TestController = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[16463,16491],"text":"type TestController = unknown"},"desc":"Replace empty interface with `unknown`."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1024,"column":123,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1024,"endColumn":124,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1257,"column":36,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1257,"endColumn":37,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1257,"column":61,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1257,"endColumn":62,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1257,"column":145,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1257,"endColumn":146,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1270,"column":258,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1270,"endColumn":259,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1270,"column":297,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1270,"endColumn":298,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1270,"column":361,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1270,"endColumn":362,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":1328,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":1334,"endColumn":3,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":1374,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":1377,"endColumn":3,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1884,"column":76,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1884,"endColumn":77,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1915,"column":39,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1915,"endColumn":40,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":1997,"column":39,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":1997,"endColumn":40,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":2009,"column":39,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":2009,"endColumn":40,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":2057,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":2057,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[99575,99613],"text":"type TraceItemCustomEventInfo = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[99575,99613],"text":"type TraceItemCustomEventInfo = unknown"},"desc":"Replace empty interface with `unknown`."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":2133,"column":11,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":2133,"endColumn":12,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2341,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2352,"endColumn":3,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5316,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5316,"endColumn":33,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[206125,206175],"text":"type InferenceUpstreamError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5318,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5318,"endColumn":26,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[206176,206219],"text":"type AiInternalError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5422,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5422,"endColumn":33,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[209805,209855],"text":"type AiGatewayInternalError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5424,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5424,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[209856,209904],"text":"type AiGatewayLogNotFound = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5435,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5435,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[210307,210355],"text":"type AutoRAGInternalError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5437,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5437,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[210356,210404],"text":"type AutoRAGNotFoundError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5439,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5439,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[210405,210457],"text":"type AutoRAGUnauthorizedError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5441,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5441,"endColumn":33,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[210458,210508],"text":"type AutoRAGNameNotSetError = Error"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":6326,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":6326,"endColumn":21,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[246469,246493],"text":"type Disposable = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[246469,246493],"text":"type Disposable = unknown"},"desc":"Replace empty interface with `unknown`."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":6797,"column":15,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":6797,"endColumn":18,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[266134,266155],"text":"type Env = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[266134,266155],"text":"type Env = unknown"},"desc":"Replace empty interface with `unknown`."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AdminRoutes from './routes/adminRoutes';\r\nimport { Toaster } from \"@/components/ui/toaster\";\r\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\r\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport { AuthProvider, useAuth } from \"./components/AuthProvider\";\r\nimport ErrorBoundary from \"./components/ErrorBoundary\";\r\nimport Index from \"./pages/Index\";\r\nimport NotFound from \"./pages/NotFound\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nconst App = () => (\r\n  <ErrorBoundary>\r\n    <QueryClientProvider client={queryClient}>\r\n      <TooltipProvider>\r\n        <AuthProvider>\r\n          <Toaster />\r\n          <Sonner />\r\n          <BrowserRouter>\r\n            <Routes>\r\n              <Route path=\"/\" element={<Index />} />\r\n              {AdminRoutes.map((route, idx) => (\r\n                <Route key={idx} path={route.path} element={route.element} />\r\n              ))}\r\n              {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\r\n              <Route path=\"*\" element={<NotFound />} />\r\n            </Routes>\r\n          </BrowserRouter>\r\n        </AuthProvider>\r\n      </TooltipProvider>\r\n    </QueryClientProvider>\r\n  </ErrorBoundary>\r\n);\r\n\r\nexport default App;","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\AuthProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  full_name: string;\r\n  role: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (username: string, password: string) => Promise<{ success: boolean; message?: string }>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('admin_token');\r\n    const storedUser = localStorage.getItem('admin_user');\r\n    \r\n    if (storedToken && storedUser) {\r\n      try {\r\n        const userData = JSON.parse(storedUser);\r\n        if (isTokenValid(storedToken)) {\r\n          setToken(storedToken);\r\n          setUser(userData);\r\n        } else {\r\n          localStorage.removeItem('admin_token');\r\n          localStorage.removeItem('admin_user');\r\n        }\r\n      } catch (error) {\r\n        console.error('解析用戶資料失敗:', error);\r\n        localStorage.removeItem('admin_token');\r\n        localStorage.removeItem('admin_user');\r\n      }\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string): Promise<{ success: boolean; message?: string }> => {\r\n    try {\r\n      const response = await fetch('https://skcdapfynyszxyqqsvib.supabase.co/functions/v1/admin-login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNrY2RhcGZ5bnlzenh5cXFzdmliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5NzQzMzQsImV4cCI6MjA3MDU1MDMzNH0.BilWvEh4djyQAYb5QWkuiju9teOVHlmk9zG0JVgMZbQ`\r\n        },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success && result.token && result.user) {\r\n        setToken(result.token);\r\n        setUser(result.user);\r\n        localStorage.setItem('admin_token', result.token);\r\n        localStorage.setItem('admin_user', JSON.stringify(result.user));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, message: result.message || '登入失敗' };\r\n      }\r\n    } catch (error) {\r\n      console.error('登入錯誤:', error);\r\n      return { success: false, message: '連接伺服器失敗' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('admin_token');\r\n    localStorage.removeItem('admin_user');\r\n  };\r\n\r\n  const isAuthenticated = !!user && !!token;\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    login,\r\n    logout,\r\n    isAuthenticated,\r\n    isLoading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nfunction isTokenValid(token: string): boolean {\r\n  try {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {return false;}\r\n\r\n    const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\r\n    \r\n    if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\BatchDeleteConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\CompactControlPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronUp' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Printer' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  ChevronDown,\n  ChevronUp,\n  Filter,\n  Printer,\n  Download,\n  BarChart3,\n  Settings,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible';\nimport { cn } from '@/lib/utils';\n\ninterface CompactControlPanelProps {\n  // 統計資訊\n  statsComponent: React.ReactNode;\n\n  // 篩選器\n  filtersComponent: React.ReactNode;\n\n  // 操作按鈕\n  actionButtons: React.ReactNode;\n\n  // 統計數據\n  totalItems: number;\n  selectedCount: number;\n  itemType: '訂單' | '客戶';\n\n  // 控制狀態\n  defaultExpanded?: boolean;\n\n  // 重置篩選功能\n  onResetFilters?: () => void;\n}\n\nconst CompactControlPanel: React.FC<CompactControlPanelProps> = ({\n  statsComponent,\n  filtersComponent,\n  actionButtons,\n  totalItems,\n  selectedCount,\n  itemType,\n  defaultExpanded = false,\n  onResetFilters\n}) => {\n  const [isStatsExpanded, setIsStatsExpanded] = useState(defaultExpanded);\n  const [isFiltersExpanded, setIsFiltersExpanded] = useState(false);\n\n  return (\n    <div className=\"space-y-2 mb-4\">\n      {/* 主控制欄 - 更緊湊的設計 */}\n      <Card className=\"border border-border/[0.5] shadow-sm\">\n        <CardContent className=\"p-2\">\n          <div className=\"flex flex-col xl:flex-row xl:items-center xl:justify-between gap-2\">\n\n            {/* 左側：控制按鈕和統計資訊 */}\n            <div className=\"flex flex-col sm:flex-row sm:items-center gap-2\">\n              {/* 控制按鈕組 */}\n              <div className=\"flex items-center gap-1\">\n                {/* 統計卡片摺疊按鈕 */}\n                <Collapsible open={isStatsExpanded} onOpenChange={setIsStatsExpanded}>\n                  <CollapsibleTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className={cn(\n                        \"h-7 px-2 text-xs transition-all duration-200\",\n                        isStatsExpanded\n                          ? \"bg-blue-100 text-blue-700 border border-blue-200\"\n                          : \"text-blue-600 hover:bg-blue-50 border border-transparent hover:border-blue-200\"\n                      )}\n                    >\n                      <BarChart3 className=\"h-3 w-3 mr-1\" />\n                      統計\n                      {isStatsExpanded ?\n                        <EyeOff className=\"h-3 w-3 ml-1\" /> :\n                        <Eye className=\"h-3 w-3 ml-1\" />\n                      }\n                    </Button>\n                  </CollapsibleTrigger>\n                </Collapsible>\n\n                {/* 篩選器摺疊按鈕 */}\n                <Collapsible open={isFiltersExpanded} onOpenChange={setIsFiltersExpanded}>\n                  <CollapsibleTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className={cn(\n                        \"h-7 px-2 text-xs transition-all duration-200\",\n                        isFiltersExpanded\n                          ? \"bg-purple-100 text-purple-700 border border-purple-200\"\n                          : \"text-purple-600 hover:bg-purple-50 border border-transparent hover:border-purple-200\"\n                      )}\n                    >\n                      <Filter className=\"h-3 w-3 mr-1\" />\n                      篩選\n                      {isFiltersExpanded ?\n                        <EyeOff className=\"h-3 w-3 ml-1\" /> :\n                        <Eye className=\"h-3 w-3 ml-1\" />\n                      }\n                    </Button>\n                  </CollapsibleTrigger>\n                </Collapsible>\n              </div>\n\n              {/* 統計數字 - 更緊湊的設計 */}\n              <div className=\"flex items-center gap-3 text-xs\">\n                <div className=\"flex items-center gap-1\">\n                  <span className=\"text-muted-foreground\">篩選結果:</span>\n                  <Badge variant=\"secondary\" className=\"h-5 px-2 text-xs font-medium\">\n                    {totalItems} 筆{itemType}\n                  </Badge>\n                </div>\n                {selectedCount > 0 && (\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"text-muted-foreground\">已選擇:</span>\n                    <Badge variant=\"destructive\" className=\"h-5 px-2 text-xs font-medium animate-pulse\">\n                      {selectedCount} 筆\n                    </Badge>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* 右側：操作按鈕 - 更緊湊的佈局 */}\n            <div className=\"flex flex-wrap gap-1\">\n              {actionButtons}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 統計卡片摺疊區域 - 優化設計 */}\n      <Collapsible open={isStatsExpanded} onOpenChange={setIsStatsExpanded}>\n        <CollapsibleContent className=\"space-y-1\">\n          <Card className=\"border-blue-200/[0.6] bg-gradient-to-r from-blue-50/[0.5] to-blue-100/[0.3] shadow-sm\">\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-sm font-medium text-blue-700 flex items-center gap-1\">\n                  <BarChart3 className=\"h-4 w-4\" />\n                  統計資訊\n                </h3>\n              </div>\n              {statsComponent}\n            </CardContent>\n          </Card>\n        </CollapsibleContent>\n      </Collapsible>\n\n      {/* 篩選器摺疊區域 - 優化設計 */}\n      <Collapsible open={isFiltersExpanded} onOpenChange={setIsFiltersExpanded}>\n        <CollapsibleContent className=\"space-y-1\">\n          <Card className=\"border-purple-200/[0.6] bg-gradient-to-r from-purple-50/[0.5] to-purple-100/[0.3] shadow-sm\">\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-sm font-medium text-purple-700 flex items-center gap-1\">\n                  <Filter className=\"h-4 w-4\" />\n                  篩選條件\n                </h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 px-2 text-xs text-purple-600 hover:bg-purple-100 transition-colors\"\n                  onClick={onResetFilters}\n                  disabled={!onResetFilters}\n                >\n                  <Settings className=\"h-3 w-3 mr-1\" />\n                  重置\n                </Button>\n              </div>\n              {filtersComponent}\n            </CardContent>\n          </Card>\n        </CollapsibleContent>\n      </Collapsible>\n    </div>\n  );\n};\n\nexport default CompactControlPanel;\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\CustomerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\CustomerDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCustomerOrders'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [customer, loadCustomerOrders, open]","fix":{"range":[1000,1016],"text":"[customer, loadCustomerOrders, open]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":60,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { CustomerWithStats, CustomerOrder } from '../types/customer';\nimport { fetchCustomerOrders } from '../services/customerService';\nimport { useToast } from '@/hooks/use-toast';\nimport { Phone, MapPin, Calendar, Package, CreditCard } from 'lucide-react';\n\ninterface CustomerDetailProps {\n  customer: CustomerWithStats | null;\n  open: boolean;\n  onClose: () => void;\n}\n\nconst CustomerDetail: React.FC<CustomerDetailProps> = ({ customer, open, onClose }) => {\n  const [orders, setOrders] = useState<CustomerOrder[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (customer && open) {\n      loadCustomerOrders(customer.phone);\n    }\n  }, [customer, open]);\n\n  const loadCustomerOrders = async (phone: string) => {\n    setLoading(true);\n    try {\n      const customerOrders = await fetchCustomerOrders(phone);\n      setOrders(customerOrders);\n    } catch (error) {\n      console.error('Failed to load customer orders:', error);\n      toast({\n        title: '錯誤',\n        description: '載入客戶訂單歷史失敗',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!customer) {return null;}\n\n  // 格式化日期\n  const formatDate = (dateStr: string) => {\n    if (!dateStr) {return '';}\n    try {\n      const date = new Date(dateStr);\n      if (isNaN(date.getTime())) {return dateStr;}\n      return date.toLocaleDateString('zh-TW');\n    } catch (e) {\n      return dateStr;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(isOpen) => !isOpen && onClose()}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">{customer.name} 的客戶資料</DialogTitle>\n          <DialogDescription>\n            客戶詳細資訊和訂單歷史\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* 客戶基本資訊 */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Phone className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"font-medium\">電話：</span>\n              <span>{customer.phone}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"font-medium\">地區：</span>\n              <span>{customer.region}</span>\n            </div>\n            <div className=\"flex items-start space-x-2 col-span-1 md:col-span-2\">\n              <MapPin className=\"h-4 w-4 text-muted-foreground mt-1\" />\n              <span className=\"font-medium\">地址：</span>\n              <span className=\"flex-1\">{customer.address}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"font-medium\">購買次數：</span>\n              <span>{customer.purchaseCount} 次</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"font-medium\">取貨方式：</span>\n              <span>{customer.deliveryMethod}</span>\n            </div>\n            <div className=\"flex items-start space-x-2 col-span-1 md:col-span-2\">\n              <Package className=\"h-4 w-4 text-muted-foreground mt-1\" />\n              <span className=\"font-medium\">購買商品：</span>\n              <span className=\"flex-1\">{customer.purchasedItems.join('、')}</span>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* 訂單歷史 */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">訂單歷史</h3>\n\n            {loading ? (\n              <div className=\"text-center py-4\">載入訂單歷史中...</div>\n            ) : orders.length === 0 ? (\n              <div className=\"text-center py-4 text-muted-foreground\">無訂單歷史記錄</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {orders.map((order, index) => (\n                  <div key={order.id} className=\"border rounded-lg p-4 bg-muted/[0.2]\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"font-semibold\">訂單 #{index + 1}</div>\n                      <div className=\"text-sm text-muted-foreground\">{formatDate(order.orderTime)}</div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 gap-2 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <Package className=\"h-4 w-4 text-muted-foreground mt-1\" />\n                        <span className=\"font-medium\">購買項目：</span>\n                        <span className=\"flex-1\">{order.items}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button onClick={onClose}>關閉</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default CustomerDetail;\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\CustomerFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\CustomerList.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../types/customer' import is duplicated.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":6,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onCustomersChange' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'reloadCustomers'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [filters, reloadCustomers]","fix":{"range":[1333,1342],"text":"[filters, reloadCustomers]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { fetchCustomers, clearCustomerCache } from '../services/customerService';\nimport { CustomerWithStats } from '../types/customer';\nimport { CustomerFilterCriteria } from '../types/customer';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CustomerListProps {\n  filters: CustomerFilterCriteria;\n  onCustomerClick: (customer: CustomerWithStats) => void;\n  onCustomersChange: () => void;\n  selected: string[];\n  onSelectedChange: (selected: string[]) => void;\n  onTotalCountChange?: (total: number) => void; // 新增：回報總數變化\n}\n\nconst CustomerList: React.FC<CustomerListProps> = ({\n  filters,\n  onCustomerClick,\n  onCustomersChange,\n  selected,\n  onSelectedChange,\n  onTotalCountChange\n}) => {\n  const [customers, setCustomers] = useState<CustomerWithStats[]>([]);\n  const [allCustomers, setAllCustomers] = useState<CustomerWithStats[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const itemsPerPage = 20;\n  const { toast } = useToast();\n\n  // 載入客戶資料\n  useEffect(() => {\n    reloadCustomers();\n  }, [filters]);\n\n  // 載入客戶的共用函式\n  const reloadCustomers = async () => {\n    setLoading(true);\n    try {\n      // 先清除快取，確保從伺服器獲取最新資料\n      clearCustomerCache();\n      const data = await fetchCustomers(filters);\n      setAllCustomers(data); // 儲存所有客戶\n      setTotalPages(Math.ceil(data.length / itemsPerPage)); // 計算總頁數\n\n      // 決定當前頁面\n      // 如果當前頁碼大於新的總頁數，則設為最後一頁\n      const newCurrentPage = currentPage > Math.ceil(data.length / itemsPerPage)\n        ? Math.ceil(data.length / itemsPerPage) || 1\n        : currentPage;\n\n      setCurrentPage(newCurrentPage);\n\n      // 顯示當前頁的資料\n      const startIndex = (newCurrentPage - 1) * itemsPerPage;\n      const endIndex = Math.min(startIndex + itemsPerPage, data.length);\n      setCustomers(data.slice(startIndex, endIndex));\n\n      // 保留已選中但仍然存在於新資料中的客戶IDs\n      if (selected.length > 0) {\n        const existingIds = data.map(customer => customer.id);\n        const stillExistingSelectedIds = selected.filter(id => existingIds.includes(id));\n        onSelectedChange(stillExistingSelectedIds);\n      }\n\n      // 回報總數變化\n      if (onTotalCountChange) {\n        onTotalCountChange(data.length);\n      }\n    } catch (error) {\n      console.error('Failed to load customers:', error);\n      toast({\n        title: '錯誤',\n        description: '載入客戶資料失敗',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 處理頁面變更\n  const handlePageChange = (newPage: number) => {\n    if (newPage < 1 || newPage > totalPages) {return;}\n\n    setCurrentPage(newPage);\n    const startIndex = (newPage - 1) * itemsPerPage;\n    const endIndex = Math.min(startIndex + itemsPerPage, allCustomers.length);\n    setCustomers(allCustomers.slice(startIndex, endIndex));\n  };\n\n  // 處理全選/取消全選\n  const handleSelectAll = () => {\n    if (selected.length === customers.length) {\n      // 如果已全選，則取消全選\n      onSelectedChange([]);\n    } else {\n      // 否則全選當前頁的客戶\n      onSelectedChange(customers.map(customer => customer.id));\n    }\n  };\n\n  // 處理單個客戶選擇\n  const handleSelectCustomer = (id: string) => {\n    if (selected.includes(id)) {\n      onSelectedChange(selected.filter(selectedId => selectedId !== id));\n    } else {\n      onSelectedChange([...selected, id]);\n    }\n  };\n\n  return (\n    <div className=\"bg-card border rounded-lg shadow-sm overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"bg-muted/[0.5]\">\n              <th className=\"p-3 font-medium w-10\">\n                <Checkbox\n                  checked={customers.length > 0 && selected.length === customers.length}\n                  onCheckedChange={handleSelectAll}\n                  aria-label=\"全選\"\n                />\n              </th>\n              <th className=\"p-3 font-medium text-left w-32 min-w-[120px]\">客戶姓名</th>\n              <th className=\"p-3 font-medium text-left w-32 min-w-[120px]\">電話</th>\n              <th className=\"p-3 font-medium text-left w-32 min-w-[120px]\">地區</th>\n              <th className=\"p-3 font-medium text-left\">地址</th>\n              <th className=\"p-3 font-medium text-center w-24 min-w-[80px]\">購買次數</th>\n              <th className=\"p-3 font-medium text-left\">購買商品</th>\n            </tr>\n          </thead>\n          <tbody>\n            {loading ? (\n              <tr>\n                <td colSpan={7} className=\"p-4 text-center\">載入中...</td>\n              </tr>\n            ) : customers.length === 0 ? (\n              <tr>\n                <td colSpan={7} className=\"p-4 text-center\">無客戶資料</td>\n              </tr>\n            ) : (\n              customers.map((customer) => (\n                <tr\n                  key={customer.id}\n                  className=\"border-t hover:bg-muted/[0.2] transition-colors cursor-pointer data-[state=selected]:bg-muted\"\n                  onClick={() => onCustomerClick(customer)}\n                >\n                  <td className=\"p-3 text-center\" onClick={(e) => e.stopPropagation()}>\n                    <Checkbox\n                      checked={selected.includes(customer.id)}\n                      onCheckedChange={() => handleSelectCustomer(customer.id)}\n                      aria-label={`選擇客戶 ${customer.name}`}\n                    />\n                  </td>\n                  <td className=\"p-3\">{customer.name}</td>\n                  <td className=\"p-3\">{customer.phone}</td>\n                  <td className=\"p-3\">{customer.region}</td>\n                  <td className=\"p-3 truncate max-w-[300px]\" title={customer.address}>\n                    {customer.address}\n                  </td>\n                  <td className=\"p-3 text-center\">{customer.purchaseCount}</td>\n                  <td className=\"p-3 truncate max-w-[300px]\" title={customer.purchasedItems.join(', ')}>\n                    {customer.purchasedItems.join(', ')}\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* 分頁控制 */}\n      {!loading && totalPages > 1 && (\n        <div className=\"p-4 flex justify-between items-center border-t mr-16\">\n          <div className=\"text-sm text-muted-foreground\">\n            顯示 {((currentPage - 1) * itemsPerPage) + 1} 至 {Math.min(currentPage * itemsPerPage, allCustomers.length)} 筆，共 {allCustomers.length} 筆\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n              className=\"px-2 h-8\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              <span className=\"ml-1\">上一頁</span>\n            </Button>\n\n            <div className=\"flex items-center gap-1\">\n              {/* 顯示頁碼 */}\n              {Array.from({ length: Math.min(totalPages, 5) }).map((_, i) => {\n                // 計算頁碼顯示邏輯，最多顯示 5 個頁碼\n                const pageNumbersToShow = 5;\n                let startPage = Math.max(1, currentPage - Math.floor(pageNumbersToShow / 2));\n                const endPage = Math.min(totalPages, startPage + pageNumbersToShow - 1);\n\n                // 調整 startPage，確保顯示的頁碼數量是固定的\n                startPage = Math.max(1, endPage - pageNumbersToShow + 1);\n\n                const pageNumber = startPage + i;\n                // 確保不超過總頁數\n                if (pageNumber > totalPages) {return null;}\n\n                return (\n                  <Button\n                    key={pageNumber}\n                    variant={pageNumber === currentPage ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handlePageChange(pageNumber)}\n                    className={`px-3 h-8 w-8 ${pageNumber === currentPage ? 'bg-primary text-primary-foreground' : ''}`}\n                  >\n                    {pageNumber}\n                  </Button>\n                );\n              })}\n            </div>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n              className=\"px-2 h-8\"\n            >\n              <span className=\"mr-1\">下一頁</span>\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CustomerList;\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\DuplicateOrdersDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\MigrationPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1288,1291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1288,1291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { CheckCircle, AlertCircle, Download, Upload, Trash2 } from \"lucide-react\";\r\nimport { toast } from \"sonner\";\r\nimport { migrateGoogleSheetsData, validateMigrationData, clearExistingData, type MigrationResult } from \"@/services/migrationService\";\r\n\r\nexport function MigrationPanel() {\r\n  const [sheetId, setSheetId] = useState(\"10MMALrfBonchPGjb-ps6Knw7MV6lllrrKRCTeafCIuo\");\r\n  const [dryRun, setDryRun] = useState(true);\r\n  const [skipExisting, setSkipExisting] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [migrationResult, setMigrationResult] = useState<MigrationResult | null>(null);\r\n  const [validationData, setValidationData] = useState<any>(null);\r\n\r\n  const handleMigration = async () => {\r\n    if (!sheetId.trim()) {\r\n      toast.error(\"請輸入 Google Sheets ID\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setProgress(0);\r\n    setMigrationResult(null);\r\n\r\n    try {\r\n      // 模擬進度更新\r\n      const progressInterval = setInterval(() => {\r\n        setProgress(prev => Math.min(prev + 10, 90));\r\n      }, 500);\r\n\r\n      const result = await migrateGoogleSheetsData({\r\n        sheetId: sheetId.trim(),\r\n        dryRun,\r\n        skipExisting\r\n      });\r\n\r\n      clearInterval(progressInterval);\r\n      setProgress(100);\r\n      setMigrationResult(result);\r\n\r\n      if (result.success) {\r\n        toast.success(result.message);\r\n        \r\n        // 如果不是試運行，驗證資料\r\n        if (!dryRun) {\r\n          const validation = await validateMigrationData();\r\n          setValidationData(validation);\r\n        }\r\n      } else {\r\n        toast.error(result.message);\r\n      }\r\n    } catch (error) {\r\n      setProgress(0);\r\n      toast.error(error instanceof Error ? error.message : \"遷移失敗\");\r\n      console.error(\"遷移錯誤:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleValidation = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const validation = await validateMigrationData();\r\n      setValidationData(validation);\r\n      toast.success(\"資料驗證完成\");\r\n    } catch (error) {\r\n      toast.error(\"資料驗證失敗\");\r\n      console.error(\"驗證錯誤:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClearData = async () => {\r\n    if (!confirm(\"確定要清空所有現有資料嗎？此操作無法復原！\")) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      await clearExistingData();\r\n      toast.success(\"資料已清空\");\r\n      setValidationData(null);\r\n      setMigrationResult(null);\r\n    } catch (error) {\r\n      toast.error(\"清空資料失敗\");\r\n      console.error(\"清空錯誤:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Upload className=\"h-5 w-5\" />\r\n            Google Sheets 資料遷移\r\n          </CardTitle>\r\n          <CardDescription>\r\n            將 Google Sheets 中的訂單和客戶資料遷移到 Supabase 資料庫\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"sheetId\">Google Sheets ID</Label>\r\n            <Input\r\n              id=\"sheetId\"\r\n              value={sheetId}\r\n              onChange={(e) => setSheetId(e.target.value)}\r\n              placeholder=\"請輸入 Google Sheets 的 ID\"\r\n              disabled={isLoading}\r\n            />\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              從 Google Sheets URL 中提取的 ID，例如：10MMALrfBonchPGjb-ps6Knw7MV6lllrrKRCTeafCIuo\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"space-y-0.5\">\r\n              <Label htmlFor=\"dryRun\">試運行模式</Label>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                啟用後只會模擬遷移過程，不會實際寫入資料\r\n              </p>\r\n            </div>\r\n            <Switch\r\n              id=\"dryRun\"\r\n              checked={dryRun}\r\n              onCheckedChange={setDryRun}\r\n              disabled={isLoading}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"space-y-0.5\">\r\n              <Label htmlFor=\"skipExisting\">跳過已存在資料</Label>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                避免重複遷移已存在的資料\r\n              </p>\r\n            </div>\r\n            <Switch\r\n              id=\"skipExisting\"\r\n              checked={skipExisting}\r\n              onCheckedChange={setSkipExisting}\r\n              disabled={isLoading}\r\n            />\r\n          </div>\r\n\r\n          {isLoading && (\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between text-sm\">\r\n                <span>遷移進度</span>\r\n                <span>{progress}%</span>\r\n              </div>\r\n              <Progress value={progress} />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex gap-2\">\r\n            <Button \r\n              onClick={handleMigration} \r\n              disabled={isLoading}\r\n              className=\"flex-1\"\r\n            >\r\n              {isLoading ? \"遷移中...\" : \"開始遷移\"}\r\n            </Button>\r\n            <Button \r\n              variant=\"outline\" \r\n              onClick={handleValidation}\r\n              disabled={isLoading}\r\n            >\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\r\n              驗證資料\r\n            </Button>\r\n            <Button \r\n              variant=\"destructive\" \r\n              onClick={handleClearData}\r\n              disabled={isLoading}\r\n              size=\"icon\"\r\n            >\r\n              <Trash2 className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {migrationResult && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              {migrationResult.success ? (\r\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\r\n              ) : (\r\n                <AlertCircle className=\"h-5 w-5 text-red-500\" />\r\n              )}\r\n              遷移結果\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <Alert>\r\n              <AlertDescription>\r\n                {migrationResult.message}\r\n              </AlertDescription>\r\n            </Alert>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div className=\"text-center p-4 border rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">\r\n                  {migrationResult.stats.customersProcessed}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">客戶</div>\r\n              </div>\r\n              <div className=\"text-center p-4 border rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  {migrationResult.stats.ordersProcessed}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">訂單</div>\r\n              </div>\r\n              <div className=\"text-center p-4 border rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">\r\n                  {migrationResult.stats.productsProcessed}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">商品</div>\r\n              </div>\r\n            </div>\r\n\r\n            {migrationResult.stats.errors.length > 0 && (\r\n              <div>\r\n                <h4 className=\"font-medium mb-2 text-red-600\">錯誤記錄</h4>\r\n                <div className=\"space-y-1\">\r\n                  {migrationResult.stats.errors.map((error, index) => (\r\n                    <Alert key={index} variant=\"destructive\">\r\n                      <AlertDescription className=\"text-sm\">\r\n                        {error}\r\n                      </AlertDescription>\r\n                    </Alert>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {validationData && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Download className=\"h-5 w-5\" />\r\n              資料驗證結果\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div className=\"flex items-center justify-between p-3 border rounded\">\r\n                <span>客戶總數</span>\r\n                <Badge variant=\"outline\">{validationData.customersCount}</Badge>\r\n              </div>\r\n              <div className=\"flex items-center justify-between p-3 border rounded\">\r\n                <span>訂單總數</span>\r\n                <Badge variant=\"outline\">{validationData.ordersCount}</Badge>\r\n              </div>\r\n              <div className=\"flex items-center justify-between p-3 border rounded\">\r\n                <span>商品總數</span>\r\n                <Badge variant=\"outline\">{validationData.productsCount}</Badge>\r\n              </div>\r\n            </div>\r\n\r\n            {validationData.issues.length > 0 && (\r\n              <div>\r\n                <h4 className=\"font-medium mb-2 text-orange-600\">發現問題</h4>\r\n                <div className=\"space-y-1\">\r\n                  {validationData.issues.map((issue: string, index: number) => (\r\n                    <Alert key={index} variant=\"destructive\">\r\n                      <AlertDescription className=\"text-sm\">\r\n                        {issue}\r\n                      </AlertDescription>\r\n                    </Alert>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ModernSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Home' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Package' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { \r\n  ShoppingBag, \r\n  Users, \r\n  BarChart3, \r\n  Settings, \r\n  Menu,\r\n  X,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Home,\r\n  Package,\r\n  TrendingUp\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface ModernSidebarProps {\r\n  pageMode: 'orders' | 'customers';\r\n  onPageModeChange: (mode: 'orders' | 'customers') => void;\r\n  orderStats?: {\r\n    total: number;\r\n    pending: number;\r\n    completed: number;\r\n  };\r\n  customerStats?: {\r\n    total: number;\r\n    active: number;\r\n  };\r\n  className?: string;\r\n}\r\n\r\nconst ModernSidebar: React.FC<ModernSidebarProps> = ({\r\n  pageMode,\r\n  onPageModeChange,\r\n  orderStats,\r\n  customerStats,\r\n  className\r\n}) => {\r\n  const [isCollapsed, setIsCollapsed] = useState(false);\r\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\r\n\r\n  const menuItems = [\r\n    {\r\n      id: 'orders' as const,\r\n      label: '訂單管理',\r\n      icon: ShoppingBag,\r\n      badge: orderStats?.total || 0,\r\n      subBadge: orderStats?.pending || 0,\r\n      description: '管理所有訂單'\r\n    },\r\n    {\r\n      id: 'customers' as const,\r\n      label: '客戶資料',\r\n      icon: Users,\r\n      badge: customerStats?.total || 0,\r\n      subBadge: customerStats?.active || 0,\r\n      description: '管理客戶資訊'\r\n    }\r\n  ];\r\n\r\n  const SidebarContent = () => (\r\n    <div className=\"flex flex-col h-full\">\r\n      {/* 標題區域 */}\r\n      <div className=\"p-4 border-b border-border/50\">\r\n        <div className=\"flex items-center justify-between\">\r\n          {!isCollapsed && (\r\n            <div>\r\n              <h2 className=\"text-lg font-bold text-foreground\">蘿蔔糕訂單系統</h2>\r\n              <p className=\"text-xs text-muted-foreground\">管理後台</p>\r\n            </div>\r\n          )}\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={() => setIsCollapsed(!isCollapsed)}\r\n            className=\"h-8 w-8 hidden lg:flex\"\r\n          >\r\n            {isCollapsed ? <ChevronRight className=\"h-4 w-4\" /> : <ChevronLeft className=\"h-4 w-4\" />}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 導航選單 */}\r\n      <div className=\"flex-1 p-3 space-y-2\">\r\n        {menuItems.map((item) => {\r\n          const Icon = item.icon;\r\n          const isActive = pageMode === item.id;\r\n          \r\n          return (\r\n            <Button\r\n              key={item.id}\r\n              variant={isActive ? \"default\" : \"ghost\"}\r\n              className={cn(\r\n                \"w-full justify-start h-auto p-3 transition-all duration-200\",\r\n                isActive \r\n                  ? \"bg-primary text-primary-foreground shadow-md\" \r\n                  : \"hover:bg-accent hover:text-accent-foreground\",\r\n                isCollapsed && \"justify-center px-2\"\r\n              )}\r\n              onClick={() => {\r\n                onPageModeChange(item.id);\r\n                setIsMobileOpen(false);\r\n              }}\r\n            >\r\n              <div className=\"flex items-center gap-3 w-full\">\r\n                <Icon className={cn(\"h-5 w-5 flex-shrink-0\", isActive && \"text-primary-foreground\")} />\r\n                \r\n                {!isCollapsed && (\r\n                  <div className=\"flex-1 text-left\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"font-medium\">{item.label}</span>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        {item.subBadge > 0 && (\r\n                          <Badge \r\n                            variant={isActive ? \"secondary\" : \"default\"} \r\n                            className=\"h-5 px-2 text-xs\"\r\n                          >\r\n                            {item.subBadge}\r\n                          </Badge>\r\n                        )}\r\n                        <Badge \r\n                          variant={isActive ? \"outline\" : \"secondary\"} \r\n                          className=\"h-5 px-2 text-xs\"\r\n                        >\r\n                          {item.badge}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                    <p className=\"text-xs opacity-70 mt-1\">{item.description}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Button>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* 底部資訊 */}\r\n      {!isCollapsed && (\r\n        <div className=\"p-3 border-t border-border/50\">\r\n          <Card className=\"bg-muted/30\">\r\n            <CardContent className=\"p-3\">\r\n              <div className=\"flex items-center gap-2 text-sm\">\r\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\r\n                <div>\r\n                  <p className=\"font-medium\">系統狀態</p>\r\n                  <p className=\"text-xs text-muted-foreground\">運行正常</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* 手機版選單按鈕 */}\r\n      <Button\r\n        variant=\"ghost\"\r\n        size=\"icon\"\r\n        className=\"lg:hidden fixed top-4 left-4 z-50\"\r\n        onClick={() => setIsMobileOpen(true)}\r\n      >\r\n        <Menu className=\"h-5 w-5\" />\r\n      </Button>\r\n\r\n      {/* 桌面版側邊欄 */}\r\n      <div className={cn(\r\n        \"hidden lg:flex flex-col bg-card border-r border-border/50 transition-all duration-300\",\r\n        isCollapsed ? \"w-16\" : \"w-64\",\r\n        className\r\n      )}>\r\n        <SidebarContent />\r\n      </div>\r\n\r\n      {/* 手機版側邊欄 */}\r\n      {isMobileOpen && (\r\n        <div className=\"lg:hidden fixed inset-0 z-40\">\r\n          <div \r\n            className=\"absolute inset-0 bg-overlay-80\" \r\n            onClick={() => setIsMobileOpen(false)}\r\n          />\r\n          <div className=\"absolute left-0 top-0 h-full w-64 bg-card border-r border-border/50\">\r\n            <div className=\"flex items-center justify-between p-4 border-b border-border/50\">\r\n              <h2 className=\"text-lg font-bold\">選單</h2>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => setIsMobileOpen(false)}\r\n              >\r\n                <X className=\"h-5 w-5\" />\r\n              </Button>\r\n            </div>\r\n            <SidebarContent />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModernSidebar;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\OrderDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogDescription,\r\n  DialogFooter,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport StatusBadge from './StatusBadge';\r\nimport PaymentStatusEditor from './PaymentStatusEditor';\r\nimport OrderItemEditor from './OrderItemEditor';\r\nimport { Order, OrderItem } from '@/types/order';\r\nimport { updateOrderStatus, deleteOrder, updateOrderItems, updateOrderPaymentStatus } from '@/services/orderService';\r\nimport { printOrders } from '@/utils/exportUtils';\r\nimport { Trash, Printer, Edit } from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface OrderDetailProps {\r\n  order: Order | null;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onOrderStatusUpdate: (\r\n    orderId: string,\r\n    newStatus?: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單',\r\n    newPaymentStatus?: import('./PaymentStatusEditor').PaymentStatus\r\n  ) => void;\r\n}\r\n\r\nconst OrderDetail: React.FC<OrderDetailProps> = ({\r\n  order,\r\n  open,\r\n  onClose,\r\n  onOrderStatusUpdate\r\n}) => {\r\n  const [status, setStatus] = useState<'訂單確認中' | '已抄單' | '已出貨' | '取消訂單'>('訂單確認中');\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  const [paymentStatus, setPaymentStatus] = useState<import('./PaymentStatusEditor').PaymentStatus>('');\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [isEditingItems, setIsEditingItems] = useState(false);\r\n  const [currentOrder, setCurrentOrder] = useState<Order | null>(null);\r\n  const { toast } = useToast();\r\n\r\n  React.useEffect(() => {\r\n    if (order) {\r\n      setStatus(order.status as '訂單確認中' | '已抄單' | '已出貨' | '取消訂單');\r\n      setPaymentStatus(order.paymentStatus || '');\r\n      setCurrentOrder(order);\r\n    }\r\n  }, [order]);\r\n\r\n  const handleStatusChange = async (newStatus: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單') => {\r\n    if (!order) {return;}\r\n\r\n    setIsUpdating(true);\r\n    try {\r\n      await updateOrderStatus(\r\n        order.id,\r\n        newStatus as '訂單確認中' | '已抄單' | '已出貨' | '取消訂單'\r\n      );\r\n      setStatus(newStatus);\r\n      toast({\r\n        title: '成功',\r\n        description: '訂單狀態已更新',\r\n      });\r\n      if (order && typeof onOrderStatusUpdate === 'function') {\r\n        onOrderStatusUpdate(order.id, newStatus);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update order status:', error);\r\n      toast({\r\n        title: '錯誤',\r\n        description: '更新訂單狀態失敗',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    if (!order) {return;}\r\n    printOrders([order]);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!order) {return;}\r\n\r\n    // 顯示確認對話框\r\n    const confirmed = window.confirm(\r\n      `確定要刪除訂單 ${order.orderNumber} 嗎？\\n\\n⚠️ 注意：此操作將會從 Google Sheets 中永久刪除該訂單資料，無法復原！`\r\n    );\r\n\r\n    if (!confirmed) {\r\n      return; // 用戶取消刪除\r\n    }\r\n\r\n    setIsDeleting(true);\r\n    try {\r\n      // 清除快取並刪除訂單\r\n      const result = await deleteOrder(order.id);\r\n\r\n      // 檢查是否有重排序結果\r\n      let description = `訂單 ${order.orderNumber} 已從 Google Sheets 中永久刪除`;\r\n      if (result && result.reorder_result) {\r\n        if (result.reorder_result.success && result.reorder_result.updated_rows > 0) {\r\n          description += `，已重新排序 ${result.reorder_result.updated_rows} 個後續訂單的ID`;\r\n        } else if (result.reorder_result.updated_rows === 0) {\r\n          description += `，無需重新排序後續訂單`;\r\n        }\r\n      }\r\n\r\n      toast({\r\n        title: '成功',\r\n        description: description,\r\n      });\r\n\r\n      // 關閉對話框\r\n      onClose();\r\n\r\n      // 通知父組件刷新\r\n      if (order && typeof onOrderStatusUpdate === 'function') {\r\n        // 用特殊狀態通知父組件刷新\r\n        onOrderStatusUpdate(order.id, '__deleted' as '訂單確認中' | '已抄單' | '已出貨' | '取消訂單');\r\n      }\r\n    } catch (error) {\r\n      console.error('刪除訂單失敗:', error);\r\n      toast({\r\n        title: '錯誤',\r\n        description: `刪除訂單 ${order.orderNumber} 失敗：${error instanceof Error ? error.message : '未知錯誤'}`,\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  };\r\n\r\n  // 款項狀態更新\r\n  const handlePaymentStatusChange = async (newPaymentStatus: import('./PaymentStatusEditor').PaymentStatus) => {\r\n    if (!order) {return;}\r\n    setIsUpdating(true);\r\n    try {\r\n      // 使用 orderService 中的統一 API 呼叫邏輯\r\n      await updateOrderPaymentStatus(order.id, newPaymentStatus);\r\n      setPaymentStatus(newPaymentStatus);\r\n      toast({\r\n        title: '成功',\r\n        description: '款項狀態已更新',\r\n      });\r\n      // 通知父組件刷新主頁 OrderList 欄位\r\n      if (order && typeof onOrderStatusUpdate === 'function') {\r\n        onOrderStatusUpdate(order.id, undefined, newPaymentStatus); // 讓主頁即時同步款項狀態\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update payment status:', error);\r\n      toast({\r\n        title: '錯誤',\r\n        description: error instanceof Error ? error.message : '更新款項狀態失敗',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  };\r\n\r\n  // 商品編輯處理\r\n  const handleEditItems = () => {\r\n    setIsEditingItems(true);\r\n  };\r\n\r\n  const handleSaveItems = async (newItems: OrderItem[], newTotal: number) => {\r\n    if (!currentOrder) {return;}\r\n\r\n    setIsUpdating(true);\r\n    try {\r\n      await updateOrderItems(currentOrder.id, newItems, newTotal);\r\n\r\n      // 更新本地狀態\r\n      const updatedOrder = {\r\n        ...currentOrder,\r\n        items: newItems,\r\n        total: newTotal\r\n      };\r\n      setCurrentOrder(updatedOrder);\r\n\r\n      toast({\r\n        title: '成功',\r\n        description: '訂單商品已更新',\r\n      });\r\n\r\n      // 通知父組件刷新\r\n      if (typeof onOrderStatusUpdate === 'function') {\r\n        onOrderStatusUpdate(currentOrder.id, status);\r\n      }\r\n\r\n      setIsEditingItems(false);\r\n    } catch (error) {\r\n      console.error('Failed to update order items:', error);\r\n      const errorMessage = error instanceof Error ? error.message : '更新訂單商品失敗';\r\n      toast({\r\n        title: '錯誤',\r\n        description: errorMessage,\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  };\r\n\r\n  if (!order) {return null;}\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"sm:max-w-[600px]\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex justify-between items-center\">\r\n            <span>訂單詳情 #{order.orderNumber}</span>\r\n            {/* 在狀態徽章上添加右邊距，例如 mr-8 或其他合適的值 */}\r\n            <StatusBadge status={order.status} className=\"mr-8\" />\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {/* 修改這裡：添加 max-h-[70vh] (或根據需要調整) 和 overflow-y-auto */}\r\n        <div className=\"grid gap-6 py-4 max-h-[70vh] overflow-y-auto\">\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            訂單建立時間: {order.createdAt}\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h3 className=\"font-medium mb-2\">客戶資訊</h3>\r\n              <p>{order.customer.name}</p>\r\n              <p>{order.customer.phone}</p>\r\n            </div>\r\n\r\n            <div>\r\n              <h3 className=\"font-medium mb-2\">配送資訊</h3>\r\n              <p>配送方式: {order.deliveryMethod}</p>\r\n              <p>配送地址: {order.deliveryAddress}</p>\r\n              <p>到貨日期: {order.dueDate}</p>\r\n              <p>到貨時段: {order.deliveryTime}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <h3 className=\"font-medium\">訂購商品</h3>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handleEditItems}\r\n                disabled={isUpdating}\r\n              >\r\n                <Edit className=\"h-4 w-4 mr-2\" />\r\n                編輯商品\r\n              </Button>\r\n            </div>\r\n            <div className=\"border rounded-md overflow-hidden\">\r\n              <table className=\"w-full\">\r\n                <thead className=\"bg-muted\">\r\n                  <tr>\r\n                    <th className=\"p-2 text-left\">商品</th>\r\n                    <th className=\"p-2 text-right\">單價</th>\r\n                    <th className=\"p-2 text-right\">數量</th>\r\n                    <th className=\"p-2 text-right\">小計</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {(currentOrder || order).items.map((item, index) => (\r\n                    <tr key={index} className=\"border-t\">\r\n                      <td className=\"p-2\">{item.product}</td>\r\n                      <td className=\"p-2 text-right\">${item.price}</td>\r\n                      <td className=\"p-2 text-right\">{item.quantity}</td>\r\n                      <td className=\"p-2 text-right\">${item.subtotal}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n                <tfoot>\r\n                  <tr className=\"border-t\">\r\n                    <td colSpan={3} className=\"p-2 text-right font-medium\">總計</td>\r\n                    <td className=\"p-2 text-right font-bold\">${(currentOrder || order).total}</td>\r\n                  </tr>\r\n                </tfoot>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h3 className=\"font-medium mb-2\">付款資訊</h3>\r\n              <p>付款方式: {order.paymentMethod}</p>\r\n              <p>訂單金額: ${order.total}</p>\r\n            </div>\r\n\r\n            {order.notes && (\r\n              <div>\r\n                <h3 className=\"font-medium mb-2\">備註</h3>\r\n                <p>{order.notes}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h3 className=\"font-medium mb-2\">訂單狀態</h3>\r\n              <Select value={status} onValueChange={handleStatusChange} disabled={isUpdating}>\r\n                <SelectTrigger className=\"w-full\">\r\n                  <SelectValue placeholder=\"選擇狀態\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"訂單確認中\">訂單確認中</SelectItem>\r\n                  <SelectItem value=\"已抄單\">已抄單</SelectItem>\r\n                  <SelectItem value=\"已出貨\">已出貨</SelectItem>\r\n                  <SelectItem value=\"取消訂單\">取消訂單</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"font-medium mb-2\">款項狀態</h3>\r\n              <PaymentStatusEditor value={paymentStatus} onChange={handlePaymentStatusChange} disabled={isUpdating} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <div className=\"flex w-full justify-between\">\r\n            <Button\r\n              variant=\"destructive\"\r\n              onClick={handleDelete}\r\n              disabled={isDeleting}\r\n            >\r\n              <Trash className=\"h-4 w-4 mr-2\" />\r\n              刪除訂單\r\n            </Button>\r\n\r\n            <div className=\"space-x-2\">\r\n              <Button variant=\"outline\" onClick={handlePrint}>\r\n                <Printer className=\"h-4 w-4 mr-2\" />\r\n                列印訂單\r\n              </Button>\r\n              <Button onClick={onClose}>關閉</Button>\r\n            </div>\r\n          </div>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n\r\n      {/* 商品編輯對話框 */}\r\n      {currentOrder && (\r\n        <OrderItemEditor\r\n          items={currentOrder.items}\r\n          open={isEditingItems}\r\n          onClose={() => setIsEditingItems(false)}\r\n          onSave={handleSaveItems}\r\n          isLoading={isUpdating}\r\n        />\r\n      )}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default OrderDetail;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\OrderFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\OrderItemEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\OrderList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'reloadOrders'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [filters, reloadOrders]","fix":{"range":[4586,4595],"text":"[filters, reloadOrders]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":331,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10789,10792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10789,10792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":339,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":339,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12748,12751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12748,12751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusBadge from './StatusBadge';\nimport PaymentStatusBadge from './PaymentStatusBadge';\nimport BatchDeleteConfirmDialog from './BatchDeleteConfirmDialog';\nimport { fetchOrders, deleteOrder, batchUpdateOrderStatus, batchUpdateOrderPaymentStatus, batchDeleteOrders, clearOrderCache, isOrderDuplicate } from '@/services/orderService';\nimport { Order } from '@/types/order';\nimport { printOrders } from '@/utils/exportUtils';\nimport { Trash, ChevronLeft, ChevronRight, Trash2, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { PaymentStatus } from './PaymentStatusEditor';\nimport { cn } from '@/lib/utils';\n\n// OrderList 元件的屬性型別\nimport { FilterCriteria } from '@/types/filters';\n\ninterface OrderListProps {\n  /** 訂單過濾條件 */\n  filters: FilterCriteria;\n  /** 點擊訂單時的 callback，可傳入 updateOrderInList */\n  onOrderClick: (order: Order, updateOrderInList: (orderId: string, newStatus?: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單', newPaymentStatus?: PaymentStatus) => void) => void;\n  /** 訂單資料變動時的 callback */\n  onOrdersChange: () => void;\n  /** 已選擇訂單 id 陣列，由父元件管理 */\n  selected: string[];\n  /** 已選擇訂單 id 變動時的 callback，由父元件提供 */\n  onSelectedChange: (selected: string[]) => void;\n}\n\n// OrderList 訂單列表元件\n// 完全由父元件管理已選擇訂單狀態\nconst OrderList: React.FC<OrderListProps> = ({ filters, onOrderClick, onOrdersChange, selected, onSelectedChange }) => {\n  // 訂單狀態更新 in-place\n  // 支援同時更新 status 及 paymentStatus，避免只改款項時 status 遺失\n  const [batchOrderStatus, setBatchOrderStatus] = useState('');\n  const [batchPaymentStatus, setBatchPaymentStatus] = useState('');\n  const [batchLoading, setBatchLoading] = useState(false);\n  // 批次刪除相關狀態\n  const [showBatchDeleteDialog, setShowBatchDeleteDialog] = useState(false);\n  const [batchDeleting, setBatchDeleting] = useState(false);\n  // 分頁相關狀態\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const itemsPerPage = 20; // 每頁顯示 20 筆訂單\n\n  // 訂單狀態更新 in-place\n  // 支援同時更新 status 及 paymentStatus，避免只改款項時 status 遺失\n  const updateOrderInList = (\n    orderId: string,\n    newStatus?: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單',\n    newPaymentStatus?: PaymentStatus\n  ) => {\n    setOrders(prev => prev.map(order => {\n      if (order.id !== orderId) {return order;}\n      return {\n        ...order,\n        status: newStatus !== undefined ? newStatus : order.status,\n        paymentStatus: newPaymentStatus !== undefined ? newPaymentStatus : order.paymentStatus\n      };\n    }));\n  };\n\n  // 訂單資料狀態\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [allOrders, setAllOrders] = useState<Order[]>([]); // 儲存所有訂單資料\n  // 載入狀態\n  const [loading, setLoading] = useState<boolean>(true);\n  const { toast } = useToast();\n\n  // 載入訂單的共用函式\n  const reloadOrders = async (force: boolean = false) => {\n    setLoading(true);\n    try {\n      // 僅在需要強制刷新時清除快取，平時優先走前端記憶體快取\n      if (force) {\n        clearOrderCache();\n      }\n      const data = await fetchOrders(filters, { forceRefresh: force });\n      setAllOrders(data); // 儲存所有訂單\n      setTotalPages(Math.ceil(data.length / itemsPerPage)); // 計算總頁數\n\n      // 決定當前頁面\n      // 如果當前頁碼大於新的總頁數，則設為最後一頁\n      const newCurrentPage = currentPage > Math.ceil(data.length / itemsPerPage)\n        ? Math.ceil(data.length / itemsPerPage) || 1\n        : currentPage;\n\n      setCurrentPage(newCurrentPage);\n\n      // 顯示當前頁的資料\n      const startIndex = (newCurrentPage - 1) * itemsPerPage;\n      const endIndex = Math.min(startIndex + itemsPerPage, data.length);\n      setOrders(data.slice(startIndex, endIndex));\n\n      // 保留已選中但仍然存在於新資料中的訂單IDs\n      if (selected.length > 0) {\n        const existingIds = data.map(order => order.id);\n        const stillExistingSelectedIds = selected.filter(id => existingIds.includes(id));\n        onSelectedChange(stillExistingSelectedIds);\n      }\n    } catch (error) {\n      console.error('Failed to load orders:', error);\n      toast({\n        title: '錯誤',\n        description: '載入訂單失敗',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 切換頁面的函數\n  const handlePageChange = (page: number) => {\n    if (page < 1 || page > totalPages) {return;}\n    setCurrentPage(page);\n    const startIndex = (page - 1) * itemsPerPage;\n    const endIndex = Math.min(startIndex + itemsPerPage, allOrders.length);\n    setOrders(allOrders.slice(startIndex, endIndex));\n  };\n\n  // 過濾條件變動時重新載入訂單\n  useEffect(() => {\n    reloadOrders(false);\n  }, [filters]);\n\n\n  // 單筆選取/取消\n  const handleSelectOrder = (orderId: string, checked: boolean) => {\n    if (checked) {\n      onSelectedChange([...selected, orderId]);\n    } else {\n      onSelectedChange(selected.filter(id => id !== orderId));\n    }\n  };\n\n  // 全選/全不選\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      // 只全選當前頁面的訂單\n      const currentPageOrderIds = orders.map(order => order.id);\n      // 過濾掉已經被選取但不在當前頁面的訂單\n      const selectedFromOtherPages = selected.filter(id => !currentPageOrderIds.includes(id));\n      onSelectedChange([...selectedFromOtherPages, ...currentPageOrderIds]);\n    } else {\n      // 取消選取當前頁面的訂單\n      const currentPageOrderIds = orders.map(order => order.id);\n      onSelectedChange(selected.filter(id => !currentPageOrderIds.includes(id)));\n    }\n  };\n\n  // 列印已選擇訂單\n  const handlePrintSelected = () => {\n    const selectedOrderData = allOrders.filter(order => selected.includes(order.id));\n    if (selectedOrderData.length === 0) {\n      toast({\n        title: '提示',\n        description: '請選擇要列印的訂單',\n      });\n      return;\n    }\n    printOrders(selectedOrderData);\n  };\n\n  const handleDeleteOrder = async (orderId: string) => {\n    // 找到要刪除的訂單資訊\n    const orderToDelete = allOrders.find(order => order.id === orderId);\n    const orderNumber = orderToDelete?.orderNumber || orderId;\n\n    // 顯示確認對話框\n    const confirmed = window.confirm(\n      `確定要刪除訂單 ${orderNumber} 嗎？\\n\\n⚠️ 注意：此操作將會從 Google Sheets 中永久刪除該訂單資料，無法復原！`\n    );\n\n    if (!confirmed) {\n      return; // 用戶取消刪除\n    }\n\n    try {\n      const result = await deleteOrder(orderId);\n\n      // 檢查是否有重排序結果\n      let description = `訂單 ${orderNumber} 已從 Google Sheets 中永久刪除`;\n      if (result && result.reorder_result) {\n        if (result.reorder_result.success && result.reorder_result.updated_rows > 0) {\n          description += `，已重新排序 ${result.reorder_result.updated_rows} 個後續訂單的ID`;\n        } else if (result.reorder_result.updated_rows === 0) {\n          description += `，無需重新排序後續訂單`;\n        }\n      }\n\n      toast({\n        title: '成功',\n        description: description,\n      });\n\n      // 清除選擇的訂單\n      if (selected.includes(orderId)) {\n        const newSelected = selected.filter(id => id !== orderId);\n        onSelectedChange(newSelected);\n      }\n\n      // 強制清除快取並重新載入訂單\n      // clearOrderCache();\n      await reloadOrders(true);\n\n      // 通知父組件訂單已變更，觸發統計數據更新\n      if (typeof onOrdersChange === 'function') {\n        onOrdersChange();\n      }\n    } catch (error) {\n      console.error('刪除訂單失敗:', error);\n      toast({\n        title: '錯誤',\n        description: `刪除訂單 ${orderNumber} 失敗：${error instanceof Error ? error.message : '未知錯誤'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // 處理批次刪除訂單\n  const handleBatchDelete = () => {\n    if (selected.length === 0) {\n      toast({\n        title: '提示',\n        description: '請選擇要刪除的訂單',\n      });\n      return;\n    }\n    setShowBatchDeleteDialog(true);\n  };\n\n  // 確認批次刪除\n  const handleConfirmBatchDelete = async () => {\n    if (selected.length === 0) {return;}\n\n    setBatchDeleting(true);\n    try {\n      const result = await batchDeleteOrders(selected);\n\n      // 處理結果\n      const successCount = result.totalDeleted;\n      const failedCount = result.totalFailed;\n\n      if (failedCount === 0) {\n        // 全部成功\n        toast({\n          title: '成功',\n          description: `已成功刪除 ${successCount} 筆訂單`,\n        });\n      } else if (successCount === 0) {\n        // 全部失敗\n        toast({\n          title: '錯誤',\n          description: `刪除失敗，共 ${failedCount} 筆訂單刪除失敗`,\n          variant: 'destructive',\n        });\n      } else {\n        // 部分成功\n        const failedOrders = result.results\n          .filter(r => !r.success)\n          .map(r => r.orderNumber || r.id)\n          .join('、');\n\n        toast({\n          title: '部分成功',\n          description: `成功刪除 ${successCount} 筆，失敗 ${failedCount} 筆。失敗的訂單：${failedOrders}`,\n          variant: 'destructive',\n        });\n      }\n\n      // 清除選擇的訂單\n      onSelectedChange([]);\n\n      // 強制清除快取並重新載入訂單\n      // clearOrderCache();\n      await reloadOrders(true);\n\n      // 通知父組件訂單已變更，觸發統計數據更新\n      if (typeof onOrdersChange === 'function') {\n        onOrdersChange();\n      }\n\n    } catch (error) {\n      console.error('批次刪除訂單失敗:', error);\n      toast({\n        title: '錯誤',\n        description: `批次刪除訂單失敗：${error instanceof Error ? error.message : '未知錯誤'}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setBatchDeleting(false);\n      setShowBatchDeleteDialog(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-card border rounded-lg shadow-sm overflow-hidden max-w-7xl mx-auto\">\n      {/* 批次操作區塊 - 優化設計 */}\n      {selected.length > 0 && (\n        <div className=\"border-b bg-gradient-to-r from-orange-50 to-red-50 p-3\">\n          <div className=\"flex flex-col sm:flex-row gap-3 items-start sm:items-center\">\n            <div className=\"flex items-center gap-2 text-sm font-medium text-orange-700\">\n              <span className=\"bg-orange-100 px-2 py-1 rounded-full text-xs\">\n                已選擇 {selected.length} 筆\n              </span>\n              批次操作:\n            </div>\n\n            <div className=\"flex flex-wrap gap-2 items-center\">\n              {/* 訂單狀態批次更新 */}\n              <div className=\"flex items-center gap-1\">\n                <select\n                  className=\"border border-orange-200 rounded px-2 py-1 text-sm bg-white focus:ring-2 focus:ring-orange-300 focus:border-orange-300\"\n                  value={batchOrderStatus}\n                  onChange={e => setBatchOrderStatus(e.target.value)}\n                  disabled={batchLoading}\n                >\n                  <option value=\"\">選擇訂單狀態</option>\n                  <option value=\"訂單確認中\">訂單確認中</option>\n                  <option value=\"已抄單\">已抄單</option>\n                  <option value=\"已出貨\">已出貨</option>\n                  <option value=\"取消訂單\">取消訂單</option>\n                </select>\n                <Button\n                  onClick={async () => {\n                    if (!batchOrderStatus || selected.length === 0) {return;}\n                    setBatchLoading(true);\n                    try {\n                      await batchUpdateOrderStatus(selected, batchOrderStatus as any);\n                      toast({\n                        title: '成功',\n                        description: '訂單狀態已批次更新',\n                      });\n                      await reloadOrders(true);\n                      setBatchOrderStatus('');\n                      onOrdersChange();\n                    } catch (error) {\n                      toast({\n                        title: '錯誤',\n                        description: '批次更新訂單狀態失敗',\n                        variant: 'destructive',\n                      });\n                    } finally {\n                      setBatchLoading(false);\n                    }\n                  }}\n                  disabled={!batchOrderStatus || batchLoading}\n                  size=\"sm\"\n                  className=\"h-8 px-3 bg-orange-600 hover:bg-orange-700\"\n                >\n                  更新狀態\n                </Button>\n              </div>\n\n              {/* 款項狀態批次更新 */}\n              <div className=\"flex items-center gap-1\">\n                <select\n                  className=\"border border-orange-200 rounded px-2 py-1 text-sm bg-white focus:ring-2 focus:ring-orange-300 focus:border-orange-300\"\n                  value={batchPaymentStatus}\n                  onChange={e => setBatchPaymentStatus(e.target.value)}\n                  disabled={batchLoading}\n                >\n                  <option value=\"\">選擇款項狀態</option>\n                  <option value=\"未收費\">未收費</option>\n                  <option value=\"已收費\">已收費</option>\n                  <option value=\"待轉帳\">待轉帳</option>\n                  <option value=\"未全款\">未全款</option>\n                  <option value=\"特殊\">特殊</option>\n                </select>\n                <Button\n                  onClick={async () => {\n                    if (!batchPaymentStatus || selected.length === 0) {return;}\n                    setBatchLoading(true);\n                    try {\n                      await batchUpdateOrderPaymentStatus(selected, batchPaymentStatus as any);\n                      toast({\n                        title: '成功',\n                        description: '款項狀態已批次更新',\n                      });\n                      // 確保前端顯示更新\n                      await reloadOrders(true);\n                      setBatchPaymentStatus('');\n                      onOrdersChange();\n                    } catch (error) {\n                      console.error('批次更新款項狀態失敗:', error);\n                      toast({\n                        title: '錯誤',\n                        description: '批次更新款項狀態失敗',\n                        variant: 'destructive',\n                      });\n                    } finally {\n                      setBatchLoading(false);\n                    }\n                  }}\n                  disabled={!batchPaymentStatus || batchLoading}\n                  size=\"sm\"\n                  className=\"h-8 px-3 bg-red-600 hover:bg-red-700\"\n                >\n                  更新款項\n                </Button>\n              </div>\n\n              {/* 批次刪除按鈕 */}\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  onClick={handleBatchDelete}\n                  disabled={selected.length === 0 || batchLoading}\n                  size=\"sm\"\n                  className=\"h-8 px-3 bg-red-700 hover:bg-red-800 text-white border-2 border-red-700 hover:border-red-800 font-medium\"\n                >\n                  <Trash2 className=\"h-3 w-3 mr-1\" />\n                  批次刪除 ({selected.length})\n                </Button>\n              </div>\n\n              {batchLoading && (\n                <div className=\"flex items-center gap-1 text-sm text-orange-600\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-orange-600\"></div>\n                  處理中...\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b-2 border-slate-200\">\n            <tr className=\"text-left text-slate-700\">\n              <th className=\"p-3 font-semibold w-12 md:w-16\">\n                <Checkbox\n                  checked={orders.length > 0 && orders.every(order => selected.includes(order.id))}\n                  onCheckedChange={(checked) => handleSelectAll(!!checked)}\n                  aria-label=\"Select all orders\"\n                  className=\"border-slate-400\"\n                />\n              </th>\n              <th className=\"p-3 font-semibold w-16 min-w-[48px] text-center\">\n                <span className=\"text-xs\">訂單<br/>編號</span>\n              </th>\n              <th className=\"p-3 font-semibold w-40 min-w-[120px] max-w-[180px]\">客戶資訊</th>\n              <th className=\"p-3 font-semibold w-72 min-w-[200px] max-w-[320px]\">商品摘要</th>\n              <th className=\"p-3 font-semibold w-24 min-w-[80px] text-right\">總金額</th>\n              <th className=\"p-3 font-semibold w-28 min-w-[100px]\">到貨日期</th>\n              <th className=\"p-3 font-semibold w-32 min-w-[120px] max-w-[160px]\">備註</th>\n              <th className=\"p-3 font-semibold w-28 min-w-[100px]\">訂單狀態</th>\n              <th className=\"p-3 font-semibold w-24 min-w-[100px]\">款項狀態</th>\n              <th className=\"p-3 font-semibold w-16 min-w-[64px] text-center\">操作</th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-slate-100\">\n            {loading ? (\n              <tr>\n                <td colSpan={10} className=\"p-8 text-center text-slate-500\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-slate-500\"></div>\n                    載入中...\n                  </div>\n                </td>\n              </tr>\n            ) : orders.length === 0 ? (\n              <tr>\n                <td colSpan={10} className=\"p-8 text-center text-slate-500\">\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"text-slate-400 text-lg\">📋</div>\n                    無訂單資料\n                  </div>\n                </td>\n              </tr>\n            ) : (\n              orders.map((order, index) => (\n                <tr\n                  key={order.id}\n                  className={cn(\n                    \"transition-all duration-200 cursor-pointer group\",\n                    \"hover:bg-gradient-to-r hover:from-blue-50/50 hover:to-indigo-50/50\",\n                    \"hover:shadow-sm\",\n                    selected.includes(order.id)\n                      ? \"bg-gradient-to-r from-blue-100/70 to-indigo-100/70 shadow-sm\"\n                      : index % 2 === 0 ? \"bg-white\" : \"bg-slate-50/30\"\n                  )}\n                  onClick={() => onOrderClick(order, updateOrderInList)}\n                >\n                  <td className=\"p-3 w-10\" onClick={(e) => e.stopPropagation()}>\n                    <Checkbox\n                      checked={selected.includes(order.id)}\n                      onCheckedChange={(checked) => handleSelectOrder(order.id, !!checked)}\n                      aria-label={`Select order ${order.orderNumber}`}\n                      className=\"border-slate-400 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                    />\n                  </td>\n                  <td className=\"p-3 w-16 text-center\">\n                    <span className=\"font-mono text-xs bg-slate-100 px-2 py-1 rounded text-slate-600\">\n                      {order.orderNumber}\n                    </span>\n                  </td>\n                  <td className=\"p-3 w-40 max-w-[180px]\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium text-slate-900 break-words\">{order.customer.name}</div>\n                      <div className=\"flex items-center gap-1\">\n                        <div className=\"text-xs text-slate-500 break-words font-mono\">{order.customer.phone}</div>\n                        {isOrderDuplicate(order, allOrders) && (\n                          <div title=\"重複電話號碼\">\n                            <AlertTriangle className=\"h-3 w-3 text-red-500 flex-shrink-0\" />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"p-3 w-72 max-w-[320px]\">\n                    <div className=\"text-sm text-slate-700 whitespace-pre-line break-words line-clamp-2\">\n                      {order.items.map(item => `${item.product} x${item.quantity}`).join('、')}\n                    </div>\n                  </td>\n                  <td className=\"p-3 w-24 text-right\">\n                    <span className=\"font-semibold text-slate-900\">${order.total}</span>\n                  </td>\n                  <td className=\"p-3 w-28\">\n                    <span className=\"text-sm text-slate-700\">{order.dueDate}</span>\n                  </td>\n                  <td className=\"p-3 w-32 max-w-[160px]\">\n                    <div className=\"text-sm text-slate-600 whitespace-pre-line break-words line-clamp-2\">\n                      {order.notes || <span className=\"text-slate-400 italic\">無備註</span>}\n                    </div>\n                  </td>\n                  <td className=\"p-3\">\n                    <StatusBadge status={order.status as '訂單確認中' | '已抄單' | '已出貨' | '取消訂單'} />\n                  </td>\n                  <td className=\"p-3\">\n                    <PaymentStatusBadge status={order.paymentStatus} />\n                  </td>\n                  <td className=\"p-3 w-16 text-center\" onClick={(e) => e.stopPropagation()}>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-8 w-8 text-slate-400 hover:text-red-600 hover:bg-red-50 transition-colors opacity-0 group-hover:opacity-100\"\n                      onClick={() => handleDeleteOrder(order.id)}\n                      aria-label={`Delete order ${order.orderNumber}`}\n                    >\n                      <Trash className=\"h-4 w-4\" />\n                    </Button>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* 分頁控制 */}\n      {!loading && totalPages > 1 && (\n        <div className=\"p-4 flex justify-between items-center border-t mr-16\">\n          <div className=\"text-sm text-muted-foreground\">\n            顯示 {((currentPage - 1) * itemsPerPage) + 1} 至 {Math.min(currentPage * itemsPerPage, allOrders.length)} 筆，共 {allOrders.length} 筆\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n              className=\"px-2 h-8\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              <span className=\"ml-1\">上一頁</span>\n            </Button>\n\n            <div className=\"flex items-center gap-1\">\n              {/* 顯示頁碼 */}\n              {Array.from({ length: Math.min(totalPages, 5) }).map((_, i) => {\n                // 計算頁碼顯示邏輯，最多顯示 5 個頁碼\n                const pageNumbersToShow = 5;\n                let startPage = Math.max(1, currentPage - Math.floor(pageNumbersToShow / 2));\n                const endPage = Math.min(totalPages, startPage + pageNumbersToShow - 1);\n\n                // 調整 startPage，確保顯示的頁碼數量是固定的\n                startPage = Math.max(1, endPage - pageNumbersToShow + 1);\n\n                const pageNumber = startPage + i;\n                // 確保不超過總頁數\n                if (pageNumber > totalPages) {return null;}\n\n                return (\n                  <Button\n                    key={pageNumber}\n                    variant={pageNumber === currentPage ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handlePageChange(pageNumber)}\n                    className={`px-3 h-8 w-8 ${pageNumber === currentPage ? 'bg-primary text-primary-foreground' : ''}`}\n                  >\n                    {pageNumber}\n                  </Button>\n                );\n              })}\n            </div>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n              className=\"px-2 h-8\"\n            >\n              <span className=\"mr-1\">下一頁</span>\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* 已選擇筆數與列印按鈕，顯示父元件傳入的 selected 長度 */}\n      {selected.length > 0 && (\n        <div className=\"bg-muted p-3 flex justify-between items-center\">\n          <div>已選擇: {selected.length} 筆訂單</div>\n          <Button onClick={handlePrintSelected}>列印訂單({selected.length})</Button>\n        </div>\n      )}\n\n      {/* 批次刪除確認對話框 */}\n      <BatchDeleteConfirmDialog\n        isOpen={showBatchDeleteDialog}\n        onClose={() => setShowBatchDeleteDialog(false)}\n        onConfirm={handleConfirmBatchDelete}\n        orders={allOrders.filter(order => selected.includes(order.id))}\n        isDeleting={batchDeleting}\n      />\n    </div>\n  );\n};\n\nexport default OrderList;\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\PaymentStatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\PaymentStatusEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ScrollToTopButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\StatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[701,752],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-hidden disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/[0.5] data-[state=open]:bg-accent/[0.5]\",\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-hidden ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-hidden ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-hidden ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-hidden ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\hooks\\use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":18,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) {dismiss()}\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\hooks\\useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\hooks\\useAuth.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  full_name: string;\r\n  role: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (username: string, password: string) => Promise<{ success: boolean; message?: string }>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('admin_token');\r\n    const storedUser = localStorage.getItem('admin_user');\r\n    \r\n    if (storedToken && storedUser) {\r\n      try {\r\n        const userData = JSON.parse(storedUser);\r\n        if (isTokenValid(storedToken)) {\r\n          setToken(storedToken);\r\n          setUser(userData);\r\n        } else {\r\n          localStorage.removeItem('admin_token');\r\n          localStorage.removeItem('admin_user');\r\n        }\r\n      } catch (error) {\r\n        console.error('解析用戶資料失敗:', error);\r\n        localStorage.removeItem('admin_token');\r\n        localStorage.removeItem('admin_user');\r\n      }\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string): Promise<{ success: boolean; message?: string }> => {\r\n    try {\r\n      const response = await fetch('https://skcdapfynyszxyqqsvib.supabase.co/functions/v1/admin-login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNrY2RhcGZ5bnlzenh5cXFzdmliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5NzQzMzQsImV4cCI6MjA3MDU1MDMzNH0.BilWvEh4djyQAYb5QWkuiju9teOVHlmk9zG0JVgMZbQ`\r\n        },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success && result.token && result.user) {\r\n        setToken(result.token);\r\n        setUser(result.user);\r\n        localStorage.setItem('admin_token', result.token);\r\n        localStorage.setItem('admin_user', JSON.stringify(result.user));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, message: result.message || '登入失敗' };\r\n      }\r\n    } catch (error) {\r\n      console.error('登入錯誤:', error);\r\n      return { success: false, message: '連接伺服器失敗' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('admin_token');\r\n    localStorage.removeItem('admin_user');\r\n  };\r\n\r\n  const isAuthenticated = !!user && !!token;\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    login,\r\n    logout,\r\n    isAuthenticated,\r\n    isLoading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nfunction isTokenValid(token: string): boolean {\r\n  try {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {return false;}\r\n\r\n    const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\r\n    \r\n    if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\pages\\AdminDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\pages\\AdminLoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[968,971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[968,971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../components/AuthProvider';\r\n\r\nconst AdminLoginPage: React.FC = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { login, isAuthenticated } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      navigate('/admin/dashboard');\r\n    }\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const result = await login(username, password);\r\n      \r\n      if (result.success) {\r\n        navigate('/admin/dashboard');\r\n      } else {\r\n        setError(result.message || '登入失敗');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || '登入失敗');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\r\n      <form className=\"bg-white p-8 rounded shadow-md w-full max-w-sm\" onSubmit={handleSubmit}>\r\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">管理員登入</h2>\r\n        {error && <div className=\"mb-4 text-red-600\">{error}</div>}\r\n        <div className=\"mb-4\">\r\n          <label className=\"block mb-1\">帳號</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"w-full border border-input rounded px-3 py-2 bg-background text-foreground focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2\"\r\n            value={username}\r\n            onChange={e => setUsername(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <label className=\"block mb-1\">密碼</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"w-full border border-input rounded px-3 py-2 bg-background text-foreground focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2\"\r\n            value={password}\r\n            onChange={e => setPassword(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition\"\r\n          disabled={loading}\r\n        >\r\n          {loading ? '登入中…' : '登入'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLoginPage;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\pages\\Index.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../types/customer' import is duplicated.","line":18,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":18,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShoppingBag' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":90,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4178,4181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4178,4181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateStatsInitial'. Either include it or remove the dependency array.","line":157,"column":6,"nodeType":"ArrayExpression","endLine":157,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [updateStatsInitial]","fix":{"range":[5890,5892],"text":"[updateStatsInitial]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7993,7996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7993,7996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8017,8020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8017,8020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport Dashboard from '@/components/Dashboard';\r\nimport CustomerDashboard from '@/components/CustomerDashboard';\r\nimport OrderFilters, { OrderFiltersRef } from '@/components/OrderFilters';\r\nimport CustomerFilters from '@/components/CustomerFilters';\r\nimport OrderList from '@/components/OrderList';\r\nimport CustomerList from '@/components/CustomerList';\r\nimport OrderDetail from '@/components/OrderDetail';\r\nimport CustomerDetail from '@/components/CustomerDetail';\r\nimport CompactControlPanel from '@/components/CompactControlPanel';\r\nimport ModernSidebar from '@/components/ModernSidebar';\r\nimport ScrollToTopButton from '@/components/ScrollToTopButton';\r\nimport DuplicateOrdersDialog from '@/components/DuplicateOrdersDialog';\r\nimport { Order, PaymentStatus } from '@/types/order';\r\nimport { CustomerWithStats } from '../types/customer';\r\nimport { FilterCriteria } from '../types/filters';\r\nimport { CustomerFilterCriteria } from '../types/customer';\r\nimport { fetchOrders, detectDuplicateOrders, DuplicateGroup } from '@/services/orderService';\r\nimport { fetchCustomers, getCustomerStats } from '@/services/customerService';\r\nimport { downloadExcelCsv, printOrders } from '@/utils/exportUtils';\r\nimport { downloadQuickStoreXlsx } from '@/utils/exportQuickStoreXlsx';\r\nimport { Download, Printer, Users, ShoppingBag, Calendar, AlertTriangle } from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nconst Index: React.FC = () => {\r\n  // 檢測是否在 iframe 中\r\n  const [isInIframe, setIsInIframe] = useState(false);\r\n\r\n  // 頁面模式：'orders' 或 'customers'\r\n  const [pageMode, setPageMode] = useState<'orders' | 'customers'>('orders');\r\n\r\n  // 訂單相關狀態\r\n  // 已選擇訂單 id 陣列\r\n  const [selected, setSelected] = useState<string[]>([]);\r\n  // 已選擇訂單 id 變動 callback\r\n  const handleSelectedChange = (ids: string[]) => setSelected(ids);\r\n\r\n  // 客戶相關狀態\r\n  const [selectedCustomers, setSelectedCustomers] = useState<string[]>([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState<CustomerWithStats | null>(null);\r\n  const [isCustomerDetailOpen, setIsCustomerDetailOpen] = useState(false);\r\n  const [customerFilters, setCustomerFilters] = useState<CustomerFilterCriteria>({\r\n    region: '',\r\n    purchasedItem: '',\r\n    search: ''\r\n  });\r\n  const [customerDashboardRefreshTrigger, setCustomerDashboardRefreshTrigger] = useState(0);\r\n\r\n  // 客戶 id 變動 callback\r\n  const handleSelectedCustomersChange = (ids: string[]) => setSelectedCustomers(ids);\r\n\r\n  // 下載快速到店 xlsx\r\n  const handleDownloadQuickStoreXlsx = async () => {\r\n    try {\r\n      const allOrders = await fetchOrders();\r\n      const selectedOrders = allOrders.filter(order => selected.includes(order.id));\r\n      if (selectedOrders.length === 0) {\r\n        toast({\r\n          title: '提示',\r\n          description: '請勾選要匯出的訂單',\r\n        });\r\n        return;\r\n      }\r\n      await downloadQuickStoreXlsx(selectedOrders, `快速到店訂單_${new Date().toISOString().split('T')[0]}.xlsx`);\r\n      toast({\r\n        title: '成功',\r\n        description: '快速到店 xlsx 已下載',\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to download QuickStore xlsx:', error);\r\n      toast({\r\n        title: '錯誤',\r\n        description: '下載快速到店 xlsx 失敗',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  // 列印已選擇訂單\r\n  const handlePrintSelected = async () => {\r\n    try {\r\n      const allOrders = await fetchOrders(filters);\r\n      const selectedOrders = allOrders.filter(order => selected.includes(order.id));\r\n      if (selectedOrders.length === 0) {\r\n        toast({ title: '提示', description: '請選擇要列印的訂單' });\r\n        return;\r\n      }\r\n      printOrders(selectedOrders);\r\n    } catch (error) {\r\n      toast({ title: '錯誤', description: '列印失敗', variant: 'destructive' });\r\n    }\r\n  };\r\n\r\n  const [filters, setFilters] = useState<FilterCriteria>({\r\n    status: '',\r\n    deliveryMethod: '',\r\n    paymentStatus: '',\r\n    search: ''\r\n  });\r\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\r\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\r\n  const [orderListRef, setOrderListRef] = useState<any>(null);\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    processing: 0,\r\n    selected: 0\r\n  });\r\n  const [customerStats, setCustomerStats] = useState({\r\n    total: 0,\r\n    active: 0,\r\n    filteredTotal: 0\r\n  });\r\n  const [dashboardRefreshTrigger, setDashboardRefreshTrigger] = useState(0);\r\n  const { toast } = useToast();\r\n\r\n  // 重複訂單相關狀態\r\n  const [duplicateGroups, setDuplicateGroups] = useState<DuplicateGroup[]>([]);\r\n  const [showDuplicateDialog, setShowDuplicateDialog] = useState(false);\r\n  const [hasShownInitialDuplicateAlert, setHasShownInitialDuplicateAlert] = useState(false);\r\n  const [isAutoAlert, setIsAutoAlert] = useState(false);\r\n\r\n  // 篩選器 ref，用於重置功能\r\n  const orderFiltersRef = useRef<OrderFiltersRef>(null);\r\n\r\n  // 開啟到貨日設定頁面\r\n  const openDeliverySettings = () => {\r\n    window.open('http://lopokao.767780.xyz/admin-delivery-settings.php', '_blank', 'width=800,height=900,scrollbars=yes,resizable=yes');\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateStatsInitial(); // 使用專門的初始載入函數\r\n    updateCustomerStats();\r\n\r\n    // 檢測是否在 iframe 中\r\n    setIsInIframe(window.self !== window.top);\r\n\r\n    // 處理來自父視窗的訊息\r\n    const handleMessage = (event: MessageEvent) => {\r\n      // 確保事件來源是期望的父視窗，如果需要更強的安全性\r\n      // if (event.origin !== 'YOUR_PARENT_DOMAIN') {\r\n      //   return;\r\n      // }\r\n\r\n      if (event.data && typeof event.data === 'object' && event.data.type === 'SET_PAGE_MODE') {\r\n        if (event.data.mode === 'orders' || event.data.mode === 'customers') {\r\n          setPageMode(event.data.mode);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', handleMessage);\r\n\r\n    return () => {\r\n      window.removeEventListener('message', handleMessage);\r\n    };\r\n  }, []); // 依賴項維持空陣列，因為只想在掛載和卸載時執行\r\n\r\n  // 初始載入時的統計更新（會觸發重複訂單警示）\r\n  const updateStatsInitial = async () => {\r\n    try {\r\n      const allOrders = await fetchOrders();\r\n      setStats({\r\n        total: allOrders.length,\r\n        processing: allOrders.filter(order => order.status === '已抄單').length,\r\n        selected: 0\r\n      });\r\n\r\n      // 更新重複訂單檢測，標記為初次載入\r\n      updateDuplicateOrders(allOrders, true);\r\n    } catch (error) {\r\n      console.error('Failed to update stats:', error);\r\n    }\r\n  };\r\n\r\n  // 一般的統計更新（不會觸發自動警示）\r\n  const updateStats = async () => {\r\n    try {\r\n      const allOrders = await fetchOrders();\r\n      setStats({\r\n        total: allOrders.length,\r\n        processing: allOrders.filter(order => order.status === '已抄單').length,\r\n        selected: 0\r\n      });\r\n\r\n      // 更新重複訂單檢測，不是初次載入\r\n      updateDuplicateOrders(allOrders, false);\r\n    } catch (error) {\r\n      console.error('Failed to update stats:', error);\r\n    }\r\n  };\r\n\r\n  // 更新重複訂單檢測\r\n  const updateDuplicateOrders = (orders: Order[], isInitialLoad: boolean = false) => {\r\n    const duplicates = detectDuplicateOrders(orders);\r\n    setDuplicateGroups(duplicates);\r\n\r\n    // 如果是初次載入且有重複訂單且尚未顯示過警示，則自動彈窗\r\n    if (isInitialLoad && duplicates.length > 0 && !hasShownInitialDuplicateAlert) {\r\n      setIsAutoAlert(true); // 設定為自動警示模式\r\n      setShowDuplicateDialog(true);\r\n      setHasShownInitialDuplicateAlert(true);\r\n    }\r\n  };\r\n\r\n  // 處理重複訂單按鈕點擊\r\n  const handleDuplicateOrdersClick = () => {\r\n    setIsAutoAlert(false); // 設定為手動模式\r\n    setShowDuplicateDialog(true);\r\n  };\r\n\r\n  // 處理重複訂單對話框中的訂單點擊\r\n  const handleDuplicateOrderClick = async (orderId: string) => {\r\n    try {\r\n      // 關閉重複訂單對話框\r\n      setShowDuplicateDialog(false);\r\n\r\n      // 獲取所有訂單資料\r\n      const allOrders = await fetchOrders();\r\n\r\n      // 找到對應的訂單\r\n      const targetOrder = allOrders.find(order => order.id === orderId);\r\n\r\n      if (targetOrder) {\r\n        // 開啟訂單詳情\r\n        setSelectedOrder({ ...targetOrder });\r\n        setIsDetailOpen(true);\r\n\r\n        // 設定一個空的更新函數，因為從重複訂單對話框開啟的詳情不需要更新列表\r\n        setOrderListRef(() => (orderId: string, newStatus?: any, newPaymentStatus?: any) => {\r\n          // 這裡可以實作更新邏輯，或者留空\r\n          console.log('訂單更新:', orderId, newStatus, newPaymentStatus);\r\n        });\r\n      } else {\r\n        toast({\r\n          title: '錯誤',\r\n          description: '找不到指定的訂單',\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('開啟訂單詳情失敗:', error);\r\n      toast({\r\n        title: '錯誤',\r\n        description: '開啟訂單詳情失敗',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateCustomerStats = async () => {\r\n    try {\r\n      const allCustomers = await fetchCustomers();\r\n      const stats = getCustomerStats(allCustomers);\r\n      setCustomerStats({\r\n        total: stats.total,\r\n        active: allCustomers.filter(customer => customer.purchaseCount > 0).length,\r\n        filteredTotal: stats.total\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to update customer stats:', error);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (newFilters: FilterCriteria) => {\r\n    setFilters(newFilters);\r\n  };\r\n\r\n  const handleOrderClick = (\r\n    order: Order,\r\n    updateOrderInList: (\r\n      orderId: string,\r\n      newStatus?: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單',\r\n      newPaymentStatus?: PaymentStatus\r\n    ) => void\r\n  ) => {\r\n    setSelectedOrder({ ...order });\r\n    setIsDetailOpen(true);\r\n    setOrderListRef(() => updateOrderInList);\r\n  };\r\n\r\n  const handleCloseDetail = () => {\r\n    setIsDetailOpen(false);\r\n    setSelectedOrder(null);\r\n  };\r\n\r\n  const handleOrdersChange = () => {\r\n    updateStats(); // 這會同時更新重複訂單檢測\r\n    // 觸發 Dashboard 重新載入\r\n    setDashboardRefreshTrigger(prev => prev + 1);\r\n  };\r\n\r\n  // 客戶相關處理函數\r\n  const handleCustomerFilterChange = (newFilters: Partial<CustomerFilterCriteria>) => {\r\n    setCustomerFilters(prev => ({ ...prev, ...newFilters }));\r\n    // 當篩選條件改變時，更新客戶統計\r\n    updateCustomerStatsWithFilters({ ...customerFilters, ...newFilters });\r\n  };\r\n\r\n  const handleCustomerClick = (customer: CustomerWithStats) => {\r\n    setSelectedCustomer(customer);\r\n    setIsCustomerDetailOpen(true);\r\n  };\r\n\r\n  const handleCloseCustomerDetail = () => {\r\n    setIsCustomerDetailOpen(false);\r\n    setSelectedCustomer(null);\r\n  };\r\n\r\n  const handleCustomersChange = () => {\r\n    // 觸發 CustomerDashboard 重新載入\r\n    setCustomerDashboardRefreshTrigger(prev => prev + 1);\r\n    // 更新客戶統計\r\n    updateCustomerStats();\r\n  };\r\n\r\n  // 根據篩選條件更新客戶統計\r\n  const updateCustomerStatsWithFilters = async (filters: CustomerFilterCriteria) => {\r\n    try {\r\n      const filteredCustomers = await fetchCustomers(filters);\r\n      setCustomerStats(prev => ({\r\n        ...prev,\r\n        filteredTotal: filteredCustomers.length\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to update filtered customer stats:', error);\r\n    }\r\n  };\r\n\r\n  // 處理客戶總數變化\r\n  const handleCustomerTotalCountChange = (total: number) => {\r\n    setCustomerStats(prev => ({\r\n      ...prev,\r\n      filteredTotal: total\r\n    }));\r\n  };\r\n\r\n  // 重置訂單篩選器\r\n  const handleResetOrderFilters = () => {\r\n    if (orderFiltersRef.current) {\r\n      orderFiltersRef.current.resetFilters();\r\n    }\r\n  };\r\n\r\n  const handleDownloadCsv = async () => {\r\n    try {\r\n      const allOrders = await fetchOrders();\r\n      const selectedOrders = allOrders.filter(order => selected.includes(order.id));\r\n      if (selectedOrders.length === 0) {\r\n        toast({\r\n          title: '提示',\r\n          description: '請勾選要匯出的訂單',\r\n        });\r\n        return;\r\n      }\r\n      // 使用Excel專用的CSV下載功能，解決中文亂碼問題\r\n      downloadExcelCsv(selectedOrders, `訂單資料_${new Date().toISOString().split('T')[0]}.csv`);\r\n      toast({\r\n        title: '成功',\r\n        description: 'CSV檔案已下載（Unicode UTF-8編碼）',\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to download CSV:', error);\r\n      toast({\r\n        title: '錯誤',\r\n        description: '下載CSV檔案失敗',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-background flex\">\r\n      {/* 側邊欄 - 只在非 iframe 模式下顯示 */}\r\n      {!isInIframe && (\r\n        <ModernSidebar\r\n          pageMode={pageMode}\r\n          onPageModeChange={setPageMode}\r\n          orderStats={{\r\n            total: stats.total,\r\n            pending: stats.processing,\r\n            completed: stats.selected\r\n          }}\r\n          customerStats={{\r\n            total: customerStats.total,\r\n            active: customerStats.active\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* 主內容區域 */}\r\n      <div className=\"flex-1 flex flex-col min-h-screen\">\r\n        {/* 只在非 iframe 模式下顯示頂部工具欄 */}\r\n        {!isInIframe && (\r\n          <header className=\"border-b bg-card/[0.5] backdrop-blur-sm sticky top-0 z-30\">\r\n            <div className=\"px-6 lg:px-6 pl-16 lg:pl-6 py-3 flex justify-between items-center\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <h1 className=\"text-xl font-bold text-foreground\">\r\n                  {pageMode === 'orders' ? '訂單管理' : '客戶資料'}\r\n                </h1>\r\n                <div className=\"text-sm text-muted-foreground hidden sm:block\">\r\n                  蘿蔔糕訂單系統 - 管理後台\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => window.open('https://767780.xyz/pos8-test.php', '_blank')}\r\n                  className=\"h-8 px-3 text-xs border-2 border-blue-400-80 text-blue-600 hover:bg-blue-50 hover:border-blue-500 transition-all font-medium\"\r\n                >\r\n                  {/* 可以考慮加上一個圖示，例如 <FilePenLine className=\"h-3 w-3 mr-1\" /> */}\r\n                  手抄單\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={openDeliverySettings}\r\n                  className=\"h-8 px-3 text-xs border-2 border-purple-400-80 text-purple-600 hover:bg-purple-50 hover:border-purple-500 transition-all font-medium\"\r\n                >\r\n                  <Calendar className=\"h-3 w-3 mr-1\" />\r\n                  設定到貨日期\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </header>\r\n        )}\r\n\r\n      {/* iframe 模式下的簡化導航按鈕已移除 */}\r\n\r\n        <main className={`flex-1 ${isInIframe ? 'p-3' : 'p-6'}`}>\r\n\r\n        {/* 訂單頁面 */}\r\n        {pageMode === 'orders' && (\r\n          <>\r\n            {/* 整合式控制面板 */}\r\n            <CompactControlPanel\r\n              statsComponent={<Dashboard refreshTrigger={dashboardRefreshTrigger} compact={true} />}\r\n              filtersComponent={<OrderFilters ref={orderFiltersRef} onFilterChange={handleFilterChange} />}\r\n              onResetFilters={handleResetOrderFilters}\r\n              actionButtons={\r\n                <>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"h-7 px-3 text-xs border-2 border-yellow-400-80 text-yellow-600 hover:bg-yellow-50 hover:border-yellow-500 transition-all font-medium\"\r\n                    onClick={handleDuplicateOrdersClick}\r\n                  >\r\n                    <AlertTriangle className=\"h-3 w-3 mr-1\" />\r\n                    重複訂單({duplicateGroups.reduce((sum, group) => sum + group.count, 0)})\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"h-7 px-3 text-xs border-2 border-orange-400-80 text-orange-600 hover:bg-orange-50 hover:border-orange-500 transition-all font-medium\"\r\n                    onClick={handlePrintSelected}\r\n                  >\r\n                    <Printer className=\"h-3 w-3 mr-1\" /> 列印訂單\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"h-7 px-3 text-xs border-2 border-blue-400-80 text-blue-600 hover:bg-blue-50 hover:border-blue-500 transition-all font-medium\"\r\n                    onClick={handleDownloadCsv}\r\n                  >\r\n                    <Download className=\"h-3 w-3 mr-1\" /> 宅配CSV\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"h-7 px-3 text-xs border-2 border-green-400-80 text-green-600 hover:bg-green-50 hover:border-green-500 transition-all font-medium\"\r\n                    onClick={handleDownloadQuickStoreXlsx}\r\n                  >\r\n                    <Download className=\"h-3 w-3 mr-1\" /> 快速到店\r\n                  </Button>\r\n                </>\r\n              }\r\n              totalItems={stats.total}\r\n              selectedCount={selected.length}\r\n              itemType=\"訂單\"\r\n              defaultExpanded={false}\r\n            />\r\n\r\n            <OrderList\r\n              filters={filters}\r\n              onOrderClick={handleOrderClick}\r\n              onOrdersChange={handleOrdersChange}\r\n              selected={selected}\r\n              onSelectedChange={handleSelectedChange}\r\n            />\r\n\r\n            <OrderDetail\r\n              order={selectedOrder}\r\n              open={isDetailOpen}\r\n              onClose={handleCloseDetail}\r\n              onOrderStatusUpdate={(orderId, newStatus, newPaymentStatus) => {\r\n                if (orderListRef) {orderListRef(orderId, newStatus, newPaymentStatus);}\r\n                handleOrdersChange();\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        {/* 客戶頁面 */}\r\n        {pageMode === 'customers' && (\r\n          <>\r\n            {/* 客戶整合式控制面板 */}\r\n            <CompactControlPanel\r\n              statsComponent={<CustomerDashboard refreshTrigger={customerDashboardRefreshTrigger} compact={true} />}\r\n              filtersComponent={<CustomerFilters onFilterChange={handleCustomerFilterChange} />}\r\n              actionButtons={\r\n                <>\r\n                  {/* 客戶相關的操作按鈕可以在這裡添加 */}\r\n                </>\r\n              }\r\n              totalItems={customerStats.filteredTotal}\r\n              selectedCount={selectedCustomers.length}\r\n              itemType=\"客戶\"\r\n              defaultExpanded={false}\r\n            />\r\n\r\n            <CustomerList\r\n              filters={customerFilters}\r\n              onCustomerClick={handleCustomerClick}\r\n              onCustomersChange={handleCustomersChange}\r\n              selected={selectedCustomers}\r\n              onSelectedChange={handleSelectedCustomersChange}\r\n              onTotalCountChange={handleCustomerTotalCountChange}\r\n            />\r\n\r\n            <CustomerDetail\r\n              customer={selectedCustomer}\r\n              open={isCustomerDetailOpen}\r\n              onClose={handleCloseCustomerDetail}\r\n            />\r\n          </>\r\n        )}\r\n        </main>\r\n      </div>\r\n\r\n      {/* 回頂端浮動按鈕 */}\r\n      <ScrollToTopButton threshold={40} />\r\n\r\n      {/* 重複訂單對話框 */}\r\n      <DuplicateOrdersDialog\r\n        isOpen={showDuplicateDialog}\r\n        onClose={() => setShowDuplicateDialog(false)}\r\n        duplicateGroups={duplicateGroups}\r\n        onOrderClick={handleDuplicateOrderClick}\r\n        isAutoAlert={isAutoAlert}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\routes\\adminRoutes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\services\\customerService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Customer' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2821,2824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2821,2824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3000,3003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3000,3003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3041,3044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3041,3044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Customer, CustomerWithStats, CustomerOrder, CustomerFilterCriteria, CustomerStats } from '@/types/customer';\r\nimport { fetchOrders } from './orderService';\r\n\r\n// 動態 API 配置系統 (與 orderService 保持一致)\r\nconst getApiConfig = () => {\r\n  const hostname = window.location.hostname;\r\n  const port = window.location.port;\r\n  const protocol = window.location.protocol;\r\n  \r\n  // 檢查是否在 Cloudflare Pages 環境\r\n  const isCloudflarePages = hostname.includes('.pages.dev') || \r\n                           hostname.includes('lopokao.767780.xyz') ||\r\n                           hostname.includes('node.767780.xyz');\r\n  \r\n  // 本地開發環境\r\n  const isLocalDev = hostname === 'localhost' || hostname === '127.0.0.1';\r\n  \r\n  console.log('🌍 客戶服務環境檢測:', {\r\n    hostname,\r\n    port,\r\n    protocol,\r\n    isCloudflarePages,\r\n    isLocalDev\r\n  });\r\n  \r\n  return {\r\n    isLocalDev,\r\n    isCloudflarePages,\r\n    // Workers API 端點 (生產環境)\r\n    workersApiUrl: 'https://sheet-order-api.ruby7677.workers.dev',\r\n    // 本地 Workers API (開發時)\r\n    localWorkersApiUrl: 'http://127.0.0.1:5714',\r\n    // 傳統 PHP API (後備方案)\r\n    legacyApiBase: isLocalDev && port === '8080' \r\n      ? '/sheet-order-dashboard-main/api' \r\n      : '/api'\r\n  };\r\n};\r\n\r\n// 根據環境動態選擇 API 端點\r\nconst getApiEndpoint = (endpoint: string) => {\r\n  const config = getApiConfig();\r\n  \r\n  // 優先嘗試 Workers API\r\n  if (config.isCloudflarePages || !config.isLocalDev) {\r\n    // 生產環境或 Cloudflare Pages: 使用生產 Workers API\r\n    return `${config.workersApiUrl}${endpoint}`;\r\n  } else if (config.isLocalDev) {\r\n    // 本地開發: 嘗試本地 Workers API，失敗則降級到傳統 API\r\n    return `${config.localWorkersApiUrl}${endpoint}`;\r\n  } else {\r\n    // 後備方案: 使用傳統 API\r\n    return `${config.legacyApiBase}${endpoint}`;\r\n  }\r\n};\r\n\r\n// 客戶資料快取\r\nlet customerCache: {\r\n  timestamp: number;\r\n  data: CustomerWithStats[];\r\n  filters?: CustomerFilterCriteria;\r\n} | null = null;\r\n\r\n// 客戶訂單快取\r\nconst customerOrdersCache: {\r\n  [phone: string]: {\r\n    timestamp: number;\r\n    data: CustomerOrder[];\r\n  }\r\n} = {};\r\n\r\n// 快取有效期（毫秒）\r\nconst CACHE_DURATION = 15 * 1000; // 15秒\r\n\r\n// 從後端 API 獲取客戶資料\r\n// 從訂單資料推導客戶清單與統計（避免呼叫不存在或失敗的客戶 API）\r\nexport const fetchCustomers = async (filters?: CustomerFilterCriteria): Promise<CustomerWithStats[]> => {\r\n  // 檢查是否有快取且未過期\r\n  const now = Date.now();\r\n\r\n  if (\r\n    customerCache &&\r\n    (now - customerCache.timestamp < CACHE_DURATION) &&\r\n    (!filters || (!filters.region && !filters.purchaseCount && !filters.purchasedItem && !filters.search))\r\n  ) {\r\n    console.log('使用快取的客戶資料');\r\n    if (filters) {return filterCustomersInMemory(customerCache.data, filters);}\r\n    return customerCache.data;\r\n  }\r\n\r\n  // 從訂單資料推導（備援方案）\r\n  const deriveFromOrders = async (): Promise<CustomerWithStats[]> => {\r\n    const orders = await fetchOrders();\r\n\r\n    const customersByPhone: { [phone: string]: typeof orders } = {} as any;\r\n    orders.forEach(o => {\r\n      const phone = o.customer?.phone?.trim();\r\n      if (!phone) {return;}\r\n      if (!customersByPhone[phone]) {customersByPhone[phone] = [] as any;}\r\n      (customersByPhone[phone] as any).push(o);\r\n    });\r\n\r\n    const customersWithStats: CustomerWithStats[] = Object.entries(customersByPhone).map(([phone, group]) => {\r\n      const latest = group[group.length - 1];\r\n      const name = latest.customer?.name || '';\r\n      const address = latest.deliveryAddress || '';\r\n      const region = extractRegion(address);\r\n      const deliveryMethod = latest.deliveryMethod || '';\r\n\r\n      const purchasedSet = new Set<string>();\r\n      group.forEach(o => o.items.forEach(i => purchasedSet.add(i.product)));\r\n      const purchasedItems = Array.from(purchasedSet);\r\n\r\n      const itemsStr = latest.items.map(i => `${i.product} x ${i.quantity}`).join('、');\r\n\r\n      const c: CustomerWithStats = {\r\n        id: phone,\r\n        name,\r\n        phone,\r\n        deliveryMethod,\r\n        address,\r\n        contactMethod: '',\r\n        socialId: '',\r\n        orderTime: latest.createdAt || latest.dueDate || '',\r\n        items: itemsStr,\r\n        purchaseCount: group.length,\r\n        purchasedItems,\r\n        region,\r\n      };\r\n\r\n      return c;\r\n    });\r\n\r\n    return customersWithStats;\r\n  };\r\n\r\n  try {\r\n    // 主要來源：從 Sheets 的「客戶名單」讀取\r\n    const apiEndpoint = getApiEndpoint('/api/get_customers_from_sheet.php');\r\n    console.log('📡 客戶資料 API 端點:', apiEndpoint);\r\n    \r\n    const resp = await fetch(`${apiEndpoint}?nonce=${now}`, {\r\n      headers: { 'Cache-Control': 'no-cache' },\r\n    });\r\n    const json = await resp.json();\r\n\r\n    if (!json?.success || !Array.isArray(json.data)) {\r\n      console.warn('客戶名單 API 回傳格式不正確，改用訂單資料推導');\r\n      const fallback = await deriveFromOrders();\r\n      customerCache = { timestamp: now, data: fallback, filters: filters ? { ...filters } : undefined };\r\n      return filters ? filterCustomersInMemory(fallback, filters) : fallback;\r\n    }\r\n\r\n    type RawCustomer = {\r\n      id?: string | number;\r\n      name?: string;\r\n      phone?: string;\r\n      deliveryMethod?: string;\r\n      address?: string;\r\n      contactMethod?: string;\r\n      socialId?: string;\r\n      orderTime?: string;\r\n      items?: string;\r\n    };\r\n\r\n    // 以電話為 key 聚合，避免表內重複列\r\n    const groups: Record<string, CustomerWithStats> = {};\r\n    (json.data as RawCustomer[]).forEach((row, idx) => {\r\n      const phone = (row.phone || '').trim();\r\n      const name = (row.name || '').trim();\r\n      const address = (row.address || '').trim();\r\n      const deliveryMethod = (row.deliveryMethod || '').trim();\r\n      const orderTime = row.orderTime || '';\r\n      const itemsStr = row.items || '';\r\n\r\n      const purchased: string[] = [];\r\n      if (itemsStr) {\r\n        // 以常見分隔符拆分，並移除數量（x/X/×）\r\n        const parts = itemsStr.split(/[,，、\\n]/).map(p => p.trim()).filter(Boolean);\r\n        parts.forEach(p => {\r\n          const product = p.split(/x|X|×/)[0].trim();\r\n          if (product) {purchased.push(product);}\r\n        });\r\n      }\r\n\r\n      const id = phone || String(row.id ?? idx);\r\n      const region = extractRegion(address);\r\n      const key = phone || id;\r\n\r\n      if (!groups[key]) {\r\n        groups[key] = {\r\n          id,\r\n          name,\r\n          phone,\r\n          deliveryMethod,\r\n          address,\r\n          contactMethod: row.contactMethod || '',\r\n          socialId: row.socialId || '',\r\n          orderTime,\r\n          items: itemsStr,\r\n          purchaseCount: 0,\r\n          purchasedItems: [],\r\n          region,\r\n        };\r\n      }\r\n\r\n      const g = groups[key];\r\n      g.purchaseCount += 1;\r\n      g.purchasedItems = Array.from(new Set([...g.purchasedItems, ...purchased]));\r\n      // 用較新的非空資料覆蓋\r\n      if (!g.name && name) {g.name = name;}\r\n      if (!g.address && address) {g.address = address;}\r\n      if (!g.deliveryMethod && deliveryMethod) {g.deliveryMethod = deliveryMethod;}\r\n      if (!g.orderTime && orderTime) {g.orderTime = orderTime;}\r\n      if (!g.items && itemsStr) {g.items = itemsStr;}\r\n    });\r\n\r\n    const customersWithStats = Object.values(groups);\r\n\r\n    // 更新快取\r\n    customerCache = {\r\n      timestamp: now,\r\n      data: customersWithStats,\r\n      filters: filters ? { ...filters } : undefined,\r\n    };\r\n\r\n    // 有過濾條件時前端進行過濾\r\n    return filters ? filterCustomersInMemory(customersWithStats, filters) : customersWithStats;\r\n  } catch (err) {\r\n    console.error('載入客戶名單失敗，改用訂單資料推導:', err);\r\n    const fallback = await deriveFromOrders();\r\n    customerCache = { timestamp: now, data: fallback, filters: filters ? { ...filters } : undefined };\r\n    return filters ? filterCustomersInMemory(fallback, filters) : fallback;\r\n  }\r\n};\r\n\r\n// 從地址中提取地區資訊\r\nconst extractRegion = (address: string): string => {\r\n  if (!address) {return '未知地區';}\r\n\r\n  // 嘗試匹配常見的地址格式\r\n  const cityMatch = address.match(/^(.*?[市縣])/);\r\n  if (cityMatch) {return cityMatch[1];}\r\n\r\n  // 如果沒有匹配到市或縣，嘗試匹配鄉鎮市區\r\n  const districtMatch = address.match(/^(.*?[鄉鎮市區])/);\r\n  if (districtMatch) {return districtMatch[1];}\r\n\r\n  return '未知地區';\r\n};\r\n\r\n// 在記憶體中過濾客戶資料\r\nconst filterCustomersInMemory = (customers: CustomerWithStats[], filters: CustomerFilterCriteria): CustomerWithStats[] => {\r\n  let filteredCustomers = [...customers];\r\n\r\n  // 地區篩選\r\n  if (filters.region && filters.region !== '所有地區') {\r\n    filteredCustomers = filteredCustomers.filter(customer =>\r\n      customer.region === filters.region || customer.address.includes(filters.region!)\r\n    );\r\n  }\r\n\r\n  // 購買次數篩選\r\n  if (filters.purchaseCount) {\r\n    switch (filters.purchaseCount) {\r\n      case '1':\r\n        filteredCustomers = filteredCustomers.filter(customer => customer.purchaseCount === 1);\r\n        break;\r\n      case '2-5':\r\n        filteredCustomers = filteredCustomers.filter(customer => customer.purchaseCount >= 2 && customer.purchaseCount <= 5);\r\n        break;\r\n      case '5+':\r\n        filteredCustomers = filteredCustomers.filter(customer => customer.purchaseCount > 5);\r\n        break;\r\n    }\r\n  }\r\n\r\n  // 購買商品篩選\r\n  if (filters.purchasedItem && filters.purchasedItem !== '所有商品') {\r\n    filteredCustomers = filteredCustomers.filter(customer =>\r\n      customer.purchasedItems.some(item => item.includes(filters.purchasedItem!))\r\n    );\r\n  }\r\n\r\n  // 搜尋篩選\r\n  if (filters.search) {\r\n    const searchLower = filters.search.toLowerCase();\r\n    filteredCustomers = filteredCustomers.filter(customer =>\r\n      customer.name.toLowerCase().includes(searchLower) ||\r\n      customer.phone.includes(filters.search!) ||\r\n      customer.address.toLowerCase().includes(searchLower)\r\n    );\r\n  }\r\n\r\n  return filteredCustomers;\r\n};\r\n\r\n// 獲取客戶統計資訊\r\nexport const getCustomerStats = (customers: CustomerWithStats[]): CustomerStats => {\r\n  const regions: { [key: string]: number } = {};\r\n  const purchaseCounts: { [key: string]: number } = {\r\n    '1': 0,\r\n    '2-5': 0,\r\n    '5+': 0\r\n  };\r\n\r\n  customers.forEach(customer => {\r\n    // 統計地區\r\n    if (customer.region) {\r\n      regions[customer.region] = (regions[customer.region] || 0) + 1;\r\n    }\r\n\r\n    // 統計購買次數\r\n    if (customer.purchaseCount === 1) {\r\n      purchaseCounts['1']++;\r\n    } else if (customer.purchaseCount >= 2 && customer.purchaseCount <= 5) {\r\n      purchaseCounts['2-5']++;\r\n    } else if (customer.purchaseCount > 5) {\r\n      purchaseCounts['5+']++;\r\n    }\r\n  });\r\n\r\n  return {\r\n    total: customers.length,\r\n    regions,\r\n    purchaseCounts\r\n  };\r\n};\r\n\r\n// 獲取客戶訂單歷史\r\n// 從訂單資料推導客戶的訂單歷史\r\nexport const fetchCustomerOrders = async (phone: string): Promise<CustomerOrder[]> => {\r\n  // 檢查是否有快取且未過期\r\n  const now = Date.now();\r\n  if (\r\n    customerOrdersCache[phone] &&\r\n    (now - customerOrdersCache[phone].timestamp < CACHE_DURATION)\r\n  ) {\r\n    console.log('使用快取的客戶訂單資料');\r\n    return customerOrdersCache[phone].data;\r\n  }\r\n\r\n  const allOrders = await fetchOrders();\r\n  const orders = allOrders\r\n    .filter(o => o.customer?.phone === phone)\r\n    .map(o => ({\r\n      id: o.id,\r\n      orderTime: o.createdAt || o.dueDate || '',\r\n      items: o.items.map(i => `${i.product} x ${i.quantity}`).join(', '),\r\n      name: o.customer?.name,\r\n    }));\r\n\r\n  // 更新快取\r\n  customerOrdersCache[phone] = {\r\n    timestamp: now,\r\n    data: orders,\r\n  };\r\n\r\n  return orders;\r\n};\r\n\r\n// 清除客戶資料快取\r\nexport const clearCustomerCache = () => {\r\n  customerCache = null;\r\n  console.log('已清除客戶資料快取');\r\n};\r\n\r\n// 清除客戶訂單快取\r\nexport const clearCustomerOrderCache = (phone?: string) => {\r\n  if (phone) {\r\n    delete customerOrdersCache[phone];\r\n    console.log(`已清除客戶 ${phone} 的訂單快取`);\r\n  } else {\r\n    Object.keys(customerOrdersCache).forEach(key => {\r\n      delete customerOrdersCache[key];\r\n    });\r\n    console.log('已清除所有客戶訂單快取');\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\services\\migrationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1077,1080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1077,1080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\r\nimport SecureApiService from './secureApiService';\r\n\r\nexport interface MigrationOptions {\r\n  sheetId: string;\r\n  dryRun?: boolean;\r\n  skipExisting?: boolean;\r\n}\r\n\r\nexport interface MigrationStats {\r\n  ordersProcessed: number;\r\n  customersProcessed: number;\r\n  productsProcessed: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface MigrationResult {\r\n  success: boolean;\r\n  message: string;\r\n  stats: MigrationStats;\r\n}\r\n\r\n/**\r\n * 執行 Google Sheets 到 Supabase 的資料遷移\r\n */\r\nexport async function migrateGoogleSheetsData(options: MigrationOptions): Promise<MigrationResult> {\r\n  try {\r\n    // 驗證 Sheet ID 格式\r\n    if (!SecureApiService.validateSheetId(options.sheetId)) {\r\n      throw new Error('無效的 Google Sheets ID 格式');\r\n    }\r\n\r\n    const apiService = new SecureApiService();\r\n    const result = await apiService.migrateGoogleSheetsData(options.sheetId, {\r\n      dryRun: options.dryRun || false,\r\n      skipExisting: options.skipExisting || true\r\n    });\r\n    \r\n    return result as MigrationResult;\r\n  } catch (error: any) {\r\n    throw new Error(`資料遷移失敗: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * 驗證遷移後的資料完整性\r\n */\r\nexport async function validateMigrationData(): Promise<{\r\n  ordersCount: number;\r\n  customersCount: number;\r\n  productsCount: number;\r\n  issues: string[];\r\n}> {\r\n  try {\r\n    const [ordersResult, customersResult, productsResult] = await Promise.all([\r\n      supabase.from('orders').select('*', { count: 'exact', head: true }),\r\n      supabase.from('customers').select('*', { count: 'exact', head: true }),\r\n      supabase.from('products').select('*', { count: 'exact', head: true })\r\n    ]);\r\n\r\n    const issues: string[] = [];\r\n\r\n    if (ordersResult.error) {issues.push(`訂單查詢錯誤: ${ordersResult.error.message}`);}\r\n    if (customersResult.error) {issues.push(`客戶查詢錯誤: ${customersResult.error.message}`);}\r\n    if (productsResult.error) {issues.push(`商品查詢錯誤: ${productsResult.error.message}`);}\r\n\r\n    return {\r\n      ordersCount: ordersResult.count || 0,\r\n      customersCount: customersResult.count || 0,\r\n      productsCount: productsResult.count || 0,\r\n      issues\r\n    };\r\n  } catch (error) {\r\n    throw new Error(error instanceof Error ? error.message : '資料驗證失敗');\r\n  }\r\n}\r\n\r\n/**\r\n * 清空現有資料（危險操作，僅在重新遷移時使用）\r\n */\r\nexport async function clearExistingData(): Promise<void> {\r\n  try {\r\n    // 按照外鍵依賴順序刪除\r\n    await supabase.from('order_items').delete().neq('id', '00000000-0000-0000-0000-000000000000');\r\n    await supabase.from('orders').delete().neq('id', '00000000-0000-0000-0000-000000000000');\r\n    await supabase.from('customers').delete().neq('id', '00000000-0000-0000-0000-000000000000');\r\n    \r\n    console.log('現有資料已清空');\r\n  } catch (error) {\r\n    throw new Error(error instanceof Error ? error.message : '清空資料失敗');\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\services\\orderService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getApiEndpoint' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":180,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6453,6456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6453,6456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6567,6570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6567,6570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":274,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":274,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9449,9452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9449,9452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":397,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":397,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":500,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":500,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":563,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":563,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":615,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":615,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":629,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":629,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19500,19503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19500,19503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":655,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":655,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":708,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":708,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Order, OrderStats, OrderItem } from '@/types/order';\r\n// src/services/orderService.ts\r\n\r\n// 動態 API 配置系統\r\nconst getApiConfig = () => {\r\n  const hostname = window.location.hostname;\r\n  const port = window.location.port;\r\n  const protocol = window.location.protocol;\r\n  \r\n  // 檢查是否在 Cloudflare Pages 環境\r\n  const isCloudflarePages = hostname.includes('.pages.dev') || \r\n                           hostname.includes('lopokao.767780.xyz') ||\r\n                           hostname.includes('node.767780.xyz');\r\n  \r\n  // 本地開發環境\r\n  const isLocalDev = hostname === 'localhost' || hostname === '127.0.0.1';\r\n  \r\n  console.log('🌍 環境檢測:', {\r\n    hostname,\r\n    port,\r\n    protocol,\r\n    isCloudflarePages,\r\n    isLocalDev\r\n  });\r\n  \r\n  return {\r\n    isLocalDev,\r\n    isCloudflarePages,\r\n    // Workers API 端點 (生產環境)\r\n    workersApiUrl: 'https://sheet-order-api.ruby7677.workers.dev',\r\n    // 本地 Workers API (開發時)\r\n    localWorkersApiUrl: 'http://127.0.0.1:5714',\r\n    // 傳統 PHP API (後備方案)\r\n    legacyApiBase: isLocalDev && port === '8080' \r\n      ? '/sheet-order-dashboard-main/api' \r\n      : '/api'\r\n  };\r\n};\r\n\r\n// 根據環境動態選擇 API 端點\r\nconst getApiEndpoint = (endpoint: string) => {\r\n  const config = getApiConfig();\r\n  \r\n  // 優先嘗試 Workers API\r\n  if (config.isCloudflarePages || !config.isLocalDev) {\r\n    // 生產環境或 Cloudflare Pages: 使用生產 Workers API\r\n    return `${config.workersApiUrl}${endpoint}`;\r\n  } else if (config.isLocalDev) {\r\n    // 本地開發: 嘗試本地 Workers API，失敗則降級到傳統 API\r\n    return `${config.localWorkersApiUrl}${endpoint}`;\r\n  }\r\n  \r\n  // 後備方案: 傳統 PHP API\r\n  return `${config.legacyApiBase}${endpoint}`;\r\n};\r\n\r\n// 建立一個錯誤處理和重試機制\r\nconst apiCallWithFallback = async (endpoint: string, options: RequestInit = {}) => {\r\n  const config = getApiConfig();\r\n  let lastError: Error | null = null;\r\n  \r\n  // 嘗試順序: Workers API -> 傳統 API\r\n  const endpoints = [];\r\n  \r\n  if (config.isCloudflarePages || !config.isLocalDev) {\r\n    endpoints.push(`${config.workersApiUrl}${endpoint}`);\r\n  } else if (config.isLocalDev) {\r\n    endpoints.push(`${config.localWorkersApiUrl}${endpoint}`);\r\n    endpoints.push(`${config.legacyApiBase}${endpoint}`);\r\n  } else {\r\n    endpoints.push(`${config.legacyApiBase}${endpoint}`);\r\n  }\r\n  \r\n  console.log('🔗 API 嘗試順序:', endpoints);\r\n  \r\n  for (const apiUrl of endpoints) {\r\n    try {\r\n      console.log('📡 嘗試 API:', apiUrl);\r\n      \r\n      const response = await fetch(apiUrl, {\r\n        ...options,\r\n        headers: {\r\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n          'Pragma': 'no-cache',\r\n          'Expires': '0',\r\n          ...options.headers\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log('✅ API 成功:', apiUrl);\r\n        return response;\r\n      } else {\r\n        console.log('❌ API 失敗:', apiUrl, response.status, response.statusText);\r\n        lastError = new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.log('❌ API 錯誤:', apiUrl, error);\r\n      lastError = error instanceof Error ? error : new Error(String(error));\r\n    }\r\n  }\r\n  \r\n  // 所有端點都失敗\r\n  throw lastError || new Error('所有 API 端點都無法連接');\r\n};\r\n\r\n// 快取機制 \r\ninterface OrderCache {\r\n  timestamp: number;\r\n  data: Order[];\r\n  filters?: {\r\n    status?: string;\r\n    deliveryMethod?: string;\r\n    search?: string;\r\n    date?: string;\r\n    paymentStatus?: string;\r\n  };\r\n}\r\n\r\nlet orderCache: OrderCache | null = null;\r\nconst CACHE_DURATION = 15000; // 快取有效期 15 秒，降低以提高即時性\r\n\r\n// 直接從 Google Sheets API 取得訂單，不再使用 mockOrders\r\nexport const fetchOrders = async (filters?: {\r\n  status?: string;\r\n  deliveryMethod?: string;\r\n  search?: string;\r\n  date?: string;\r\n  paymentStatus?: string;\r\n}, options?: { forceRefresh?: boolean }): Promise<Order[]> => {\r\n  // 檢查是否有快取且未過期\r\n  const now = Date.now();\r\n\r\n  // 如果沒有進行搜尋或篩選，且有快取且未過期，直接使用快取資料\r\n  if (\r\n    orderCache &&\r\n    (now - orderCache.timestamp < CACHE_DURATION) &&\r\n    (!filters || (!filters.status && !filters.deliveryMethod && !filters.search && !filters.date && !filters.paymentStatus))\r\n  ) {\r\n    console.log('使用快取的訂單資料');\r\n\r\n    // 有過濾條件時，在前端篩選快取中的資料\r\n    if (filters) {\r\n      return filterOrdersInMemory(orderCache.data, filters);\r\n    }\r\n\r\n    return orderCache.data;\r\n  }\r\n\r\n  // 使用新的 API 重試機制\r\n  const timestamp = Date.now();\r\n  const nonce = Math.random().toString(36).substring(2, 15);\r\n  \r\n  // 構建 API 端點和參數（僅在需要即時一致時才強制刷新）\r\n  const endpoint = '/api/get_orders_from_sheet.php';\r\n  const params = new URLSearchParams({\r\n    v: '1.2' // API 版本號\r\n  });\r\n\r\n  if (options?.forceRefresh) {\r\n    params.set('refresh', '1');\r\n    params.set('_', timestamp.toString());\r\n    params.set('nonce', nonce);\r\n    // 若透過 Cloudflare，搭配後端 realtime=1 才會觸發強制刷新\r\n    params.set('realtime', '1');\r\n  }\r\n  \r\n  const fullEndpoint = `${endpoint}?${params.toString()}`;\r\n  \r\n  // 使用錯誤處理和重試機制\r\n  const res = await apiCallWithFallback(fullEndpoint, {\r\n    method: 'GET'\r\n  });\r\n  if (!res.ok) {\r\n    // 如果 HTTP 狀態碼不是 2xx，嘗試讀取錯誤訊息\r\n    let errorMsg = '讀取訂單失敗';\r\n    try {\r\n      const errorResult = await res.json();\r\n      errorMsg = errorResult.message || errorMsg;\r\n    } catch (e) {\r\n      // 如果回應不是 JSON 或其他錯誤，使用 res.statusText\r\n      errorMsg = `讀取訂單失敗: ${res.statusText}`;\r\n    }\r\n    throw new Error(errorMsg);\r\n  }\r\n\r\n  const result = await res.json();\r\n  if (!result.success) {throw new Error(result.message || '讀取訂單失敗');}\r\n  if (!result.data || !Array.isArray(result.data)) {\r\n    console.warn('API回傳的訂單資料格式不正確，應為陣列:', result.data);\r\n    return []; // 或者拋出錯誤，視情況而定\r\n  }\r\n\r\n  // 將 Google Sheets 資料轉換成前端 Order 型別\r\n  let orders = result.data.map((row: {\r\n    createdAt?: string;\r\n    id?: string;\r\n    orderNumber?: string;\r\n    customerName?: string;\r\n    customerPhone?: string;\r\n    items?: string | Array<{product: string; quantity: number; price: number}>;\r\n    amount?: number;\r\n    dueDate?: string;\r\n    deliveryTime?: string;\r\n    note?: string;\r\n    status?: string;\r\n    deliveryMethod?: string;\r\n    deliveryAddress?: string;\r\n    paymentMethod?: string;\r\n    paymentStatus?: string;\r\n    備註?: string;\r\n    訂單時間?: string;\r\n    款項?: string;\r\n  }, idx: number) => {\r\n    const createdAt = String(row['createdAt'] || row['訂單時間'] || row[0] || new Date().toISOString().split('T')[0]);\r\n    const id = String(row.id || `generated_id_${idx}`); // 提供預設ID以防萬一\r\n    const orderNumber = String(row.orderNumber || `ORD-${Date.now()}-${idx}`); // 提供預設訂單號\r\n    const customerName = String(row.customerName || (row as any).customer?.name || row['姓名'] || row[1] || '');\r\n    const customerPhone = String(row.customerPhone || (row as any).customer?.phone || row['電話'] || row[2] || '');\r\n\r\n    let itemsArray: { product: string; quantity: number; price: number; subtotal: number }[] = [];\r\n    if (typeof row.items === 'string' && row.items.trim() !== '') {\r\n      const raw = String(row.items).trim();\r\n      itemsArray = raw.split(/[，,]/).map((itemStr: string) => {\r\n        const parts = itemStr.trim().split(/\\s*[xX×]\\s*/);\r\n        const product = parts[0] ? parts[0].trim() : '未知商品';\r\n        const quantity = Number(parts[1]) || 1;\r\n        let price = 0;\r\n        // 自動對應單價（可依實際品項再擴充）\r\n        if (product.includes('原味蘿蔔糕')) {price = 250;}\r\n        else if (product.includes('芋頭粿')) {price = 350;}\r\n        else if (product.includes('台式鹹蘿蔔糕')) {price = 350;}\r\n        else if (product.includes('鳳梨豆腐乳')) {price = 300;}\r\n        // 如果 Google Sheet 提供單價，則使用提供的單價（第三段）\r\n        if (parts.length > 2 && parts[2] && !isNaN(Number(parts[2]))) {\r\n          price = Number(parts[2]);\r\n        }\r\n        const safePrice = isNaN(price) || price < 0 ? 0 : price;\r\n        const safeQty = isNaN(quantity) || quantity < 0 ? 0 : quantity;\r\n        return {\r\n          product,\r\n          quantity: safeQty,\r\n          price: safePrice,\r\n          subtotal: safePrice * safeQty,\r\n        };\r\n      });\r\n    } else if (Array.isArray(row.items)) {\r\n      // 如果 items 已經是陣列格式 (雖然目前邏輯是字串，但增加彈性)\r\n      itemsArray = row.items.map((item: { product?: string; quantity?: number; price?: number }) => {\r\n        let price = Number(item.price);\r\n        let quantity = Number(item.quantity);\r\n        price = isNaN(price) || price < 0 ? 0 : price;\r\n        quantity = isNaN(quantity) || quantity < 0 ? 0 : quantity;\r\n        return {\r\n          product: String(item.product || '未知商品'),\r\n          quantity,\r\n          price,\r\n          subtotal: price * quantity,\r\n        };\r\n      });\r\n    }\r\n\r\n    // 嘗試將各種日期格式轉換為 YYYY-MM-DD\r\n    let formattedDueDate = '';\r\n    if (row.dueDate) {\r\n      try {\r\n        const dateObj = new Date(String(row.dueDate).replace(/-/g, '/'));\r\n        if (!isNaN(dateObj.getTime())) {\r\n          const year = dateObj.getFullYear();\r\n          const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');\r\n          const day = dateObj.getDate().toString().padStart(2, '0');\r\n          formattedDueDate = `${year}-${month}-${day}`;\r\n        }\r\n      } catch (e) {\r\n        console.warn(`無法解析日期: ${row.dueDate}`);\r\n      }\r\n    }\r\n\r\n    return {\r\n      createdAt,\r\n      id,\r\n      orderNumber,\r\n      customer: {\r\n        name: customerName,\r\n        phone: customerPhone\r\n      },\r\n      items: itemsArray,\r\n      total: (!isNaN(Number(row.amount)) && Number(row.amount) > 0)\r\n        ? Number(row.amount)\r\n        : itemsArray.reduce((sum, i) => sum + i.subtotal, 0),\r\n      dueDate: formattedDueDate,\r\n      deliveryTime: String(row.deliveryTime || ''),\r\n      notes: String(row.note || (row as any).customer?.note || row['note'] || row['備註'] || ''),\r\n      status: String(row.status || '訂單確認中'), // 提供預設狀態\r\n      deliveryMethod: String(row.deliveryMethod || ''),\r\n      deliveryAddress: String(row.deliveryAddress || ''),\r\n      paymentMethod: String(row.paymentMethod || ''),\r\n      paymentStatus: String(row.paymentStatus || row['paymentStatus'] || row['款項'] || '')\r\n    };\r\n  });\r\n\r\n  // 更新快取\r\n  orderCache = {\r\n    timestamp: now,\r\n    data: orders,\r\n    filters: filters ? { ...filters } : undefined\r\n  };\r\n\r\n  // 有過濾條件時前端進行過濾\r\n  if (filters) {\r\n    orders = filterOrdersInMemory(orders, filters);\r\n  }\r\n\r\n  return orders;\r\n};\r\n\r\n// 在記憶體中過濾訂單資料的函數\r\nconst filterOrdersInMemory = (orders: Order[], filters: {\r\n  status?: string;\r\n  deliveryMethod?: string;\r\n  search?: string;\r\n  date?: string;\r\n  dateRange?: {\r\n    startDate?: string;\r\n    endDate?: string;\r\n  };\r\n  paymentStatus?: string;\r\n}): Order[] => {\r\n  let filteredOrders = [...orders];\r\n\r\n  if (filters.status && filters.status !== '所有狀態') {\r\n    filteredOrders = filteredOrders.filter(order => order.status === filters.status);\r\n  }\r\n\r\n  // 配送方式篩選\r\n  if (filters.deliveryMethod && filters.deliveryMethod !== '所有配送方式') {\r\n    filteredOrders = filteredOrders.filter(order => order.deliveryMethod === filters.deliveryMethod);\r\n  }\r\n\r\n  if (filters.search) {\r\n    const searchTerm = String(filters.search).toLowerCase();\r\n    filteredOrders = filteredOrders.filter(\r\n      order =>\r\n        (order.orderNumber && order.orderNumber.toLowerCase().includes(searchTerm)) ||\r\n        (order.customer.name && order.customer.name.toLowerCase().includes(searchTerm)) ||\r\n        (order.customer.phone && order.customer.phone.includes(searchTerm))\r\n    );\r\n  }\r\n\r\n  // 到貨日期篩選 - 支援日期區間和單一日期（向後兼容）\r\n  if (filters.dateRange || filters.date) {\r\n    try {\r\n      let startDateFilter: Date | undefined;\r\n      let endDateFilter: Date | undefined;\r\n\r\n      // 優先使用日期區間，如果沒有則使用單一日期（向後兼容）\r\n      if (filters.dateRange) {\r\n        if (filters.dateRange.startDate) {\r\n          startDateFilter = new Date(filters.dateRange.startDate);\r\n          startDateFilter.setHours(0, 0, 0, 0);\r\n        }\r\n        if (filters.dateRange.endDate) {\r\n          endDateFilter = new Date(filters.dateRange.endDate);\r\n          endDateFilter.setHours(23, 59, 59, 999); // 結束日期設為當天最後一刻\r\n        }\r\n      } else if (filters.date) {\r\n        // 向後兼容：單一日期篩選（選擇日期或之後的訂單）\r\n        startDateFilter = new Date(filters.date);\r\n        startDateFilter.setHours(0, 0, 0, 0);\r\n      }\r\n\r\n      if (startDateFilter || endDateFilter) {\r\n        filteredOrders = filteredOrders.filter(order => {\r\n          if (!order.dueDate) {return false;} // 如果訂單沒有到貨日期，則不符合條件\r\n\r\n          try {\r\n            const orderDueDate = new Date(order.dueDate);\r\n            orderDueDate.setHours(0, 0, 0, 0);\r\n\r\n            if (isNaN(orderDueDate.getTime())) {return false;}\r\n\r\n            // 檢查開始日期條件\r\n            if (startDateFilter && !isNaN(startDateFilter.getTime())) {\r\n              if (orderDueDate.getTime() < startDateFilter.getTime()) {\r\n                return false;\r\n              }\r\n            }\r\n\r\n            // 檢查結束日期條件\r\n            if (endDateFilter && !isNaN(endDateFilter.getTime())) {\r\n              if (orderDueDate.getTime() > endDateFilter.getTime()) {\r\n                return false;\r\n              }\r\n            }\r\n\r\n            return true;\r\n          } catch (e) {\r\n            console.warn(`過濾時無法解析訂單到貨日期: ${order.dueDate}`);\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.warn(`過濾時無法解析篩選日期:`, e);\r\n    }\r\n  }\r\n\r\n  // 付款狀態篩選\r\n  if (filters.paymentStatus && filters.paymentStatus !== '所有付款狀態') {\r\n    filteredOrders = filteredOrders.filter(order => order.paymentStatus === filters.paymentStatus);\r\n  }\r\n\r\n  return filteredOrders;\r\n};\r\n\r\nexport const fetchOrderById = async (id: string): Promise<Order | null> => {\r\n  const orders = await fetchOrders();\r\n  return orders.find(order => order.id === id) || null;\r\n};\r\n\r\n// 清除訂單快取，強制重新從服務器獲取最新數據\r\nexport const clearOrderCache = () => {\r\n  orderCache = null;\r\n};\r\n\r\nexport const fetchOrderStats = async (): Promise<OrderStats> => {\r\n  const orders = await fetchOrders();\r\n\r\n  // 計算未收費訂單數量（款項狀態為空、未收費或未全款）\r\n  const unpaidOrders = orders.filter(order =>\r\n    !order.paymentStatus ||\r\n    order.paymentStatus === '未收費' ||\r\n    order.paymentStatus === '未全款'\r\n  );\r\n\r\n  // 計算所有訂單總金額\r\n  const totalAmount = orders.reduce((sum, order) => sum + (order.total || 0), 0);\r\n\r\n  // 計算各商品總數量\r\n  let totalRadishCake = 0;\r\n  let totalTaroCake = 0;\r\n  let totalHKRadishCake = 0;\r\n  let totaltest = 0;\r\n\r\n  orders.forEach(order => {\r\n    order.items.forEach(item => {\r\n      if (item.product.includes('原味蘿蔔糕')) {\r\n        totalRadishCake += item.quantity;\r\n      } else if (item.product.includes('芋頭粿')) {\r\n        totalTaroCake += item.quantity;\r\n      } else if (item.product.includes('台式鹹蘿蔔糕')) {\r\n        totalHKRadishCake += item.quantity;\r\n      } else if (item.product.includes('鳳梨豆腐乳')) {\r\n        totaltest += item.quantity;\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    total: orders.length,\r\n    pending: orders.filter(order => order.status === '訂單確認中').length,\r\n    processing: orders.filter(order => order.status === '已抄單').length,\r\n    completed: orders.filter(order => order.status === '已出貨').length,\r\n    canceled: orders.filter(order => order.status === '取消訂單').length,\r\n    unpaid: unpaidOrders.length,\r\n    totalAmount: totalAmount,\r\n    totalRadishCake,\r\n    totalTaroCake,\r\n    totalHKRadishCake,\r\n    totaltest\r\n  };\r\n};\r\n\r\n// 注意：Google Sheets API 不支援直接修改資料，若需更新請自行設計後端 API 處理\r\nexport const updateOrderStatus = async (id: string, status: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單'): Promise<void> => {\r\n  // 添加時間戳和隨機數，確保每次請求都是唯一的\r\n  const timestamp = Date.now();\r\n  const nonce = Math.random().toString(36).substring(2, 15);\r\n\r\n  // 構建 API 端點和參數\r\n  const params = new URLSearchParams({\r\n    _: timestamp.toString(),\r\n    nonce: nonce\r\n  });\r\n  \r\n  const endpoint = `/api/update_order_status.php?${params.toString()}`;\r\n\r\n  const res = await apiCallWithFallback(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ id, status, timestamp, nonce }),\r\n  });\r\n  if (!res.ok) {\r\n    let errorMsg = '更新訂單狀態失敗';\r\n    try {\r\n      const errorResult = await res.json();\r\n      errorMsg = errorResult.message || errorMsg;\r\n    } catch (e) {\r\n      errorMsg = `更新訂單狀態失敗: ${res.statusText}`;\r\n    }\r\n    throw new Error(errorMsg);\r\n  }\r\n  const result = await res.json();\r\n  if (!result.success) {throw new Error(result.message || '更新訂單狀態失敗');}\r\n\r\n  // 成功更新後清除快取\r\n  clearOrderCache();\r\n};\r\n\r\n// 批次更新訂單狀態\r\nexport const batchUpdateOrderStatus = async (ids: string[], status: '訂單確認中' | '已抄單' | '已出貨' | '取消訂單'): Promise<void> => {\r\n  // 使用 Promise.all 實現併發請求，提高批次處理效率\r\n  try {\r\n    await Promise.all(ids.map(id => updateOrderStatus(id, status)));\r\n\r\n    // 批次操作成功後清除快取\r\n    clearOrderCache();\r\n  } catch (error) {\r\n    console.error('批次更新訂單狀態失敗:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 批次更新款項狀態\r\nexport const updateOrderPaymentStatus = async (id: string, paymentStatus: string): Promise<void> => {\r\n  // 添加時間戳和隨機數，確保每次請求都是唯一的\r\n  const timestamp = Date.now();\r\n  const nonce = Math.random().toString(36).substring(2, 15);\r\n\r\n  // 使用新的 Workers API 端點，支援 fallback 到 PHP API\r\n  const workersEndpoint = '/api/orders/payment';\r\n  const legacyEndpoint = `/api/update_payment_status.php?_=${timestamp}&nonce=${nonce}`;\r\n  \r\n  // 優先嘗試 Workers API\r\n  let res;\r\n  try {\r\n    res = await apiCallWithFallback(workersEndpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ id, status: paymentStatus }),\r\n    });\r\n  } catch (workersError) {\r\n    console.log('Workers API 失敗，嘗試 PHP API:', workersError);\r\n    // Fallback 到 PHP API\r\n    res = await apiCallWithFallback(legacyEndpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ id, paymentStatus, timestamp, nonce }),\r\n    });\r\n  }\r\n  \r\n  if (!res.ok) {\r\n    let errorMsg = '更新款項狀態失敗';\r\n    try {\r\n      const errorResult = await res.json();\r\n      errorMsg = errorResult.message || errorMsg;\r\n    } catch (e) {\r\n      errorMsg = `更新款項狀態失敗: ${res.statusText}`;\r\n    }\r\n    throw new Error(errorMsg);\r\n  }\r\n  const result = await res.json();\r\n  if (!result.success) {throw new Error(result.message || '更新款項狀態失敗');}\r\n\r\n  // 成功更新後清除快取\r\n  clearOrderCache();\r\n};\r\n\r\nexport const batchUpdateOrderPaymentStatus = async (ids: string[], paymentStatus: string): Promise<void> => {\r\n  // 使用 Promise.all 實現併發請求，提高批次處理效率\r\n  try {\r\n    await Promise.all(ids.map(id => updateOrderPaymentStatus(id, paymentStatus)));\r\n\r\n    // 批次操作成功後清除快取\r\n    clearOrderCache();\r\n  } catch (error) {\r\n    console.error('批次更新款項狀態失敗:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 更新訂單商品\r\nexport const updateOrderItems = async (id: string, items: OrderItem[], total: number): Promise<void> => {\r\n  // 添加時間戳和隨機數，確保每次請求都是唯一的\r\n  const timestamp = Date.now();\r\n  const nonce = Math.random().toString(36).substring(2, 15);\r\n\r\n  // 構建 API 端點和參數\r\n  const params = new URLSearchParams({\r\n    _: timestamp.toString(),\r\n    nonce: nonce\r\n  });\r\n  \r\n  const endpoint = `/api/update_order_items.php?${params.toString()}`;\r\n\r\n  const res = await apiCallWithFallback(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ id, items, total, timestamp, nonce }),\r\n  });\r\n\r\n  if (!res.ok) {\r\n    let errorMsg = '更新訂單商品失敗';\r\n    try {\r\n      const errorResult = await res.json();\r\n      errorMsg = errorResult.message || errorMsg;\r\n    } catch (e) {\r\n      errorMsg = `更新訂單商品失敗: ${res.statusText}`;\r\n    }\r\n    throw new Error(errorMsg);\r\n  }\r\n\r\n  const result = await res.json();\r\n  if (!result.success) {throw new Error(result.message || '更新訂單商品失敗');}\r\n\r\n  // 成功更新後清除快取\r\n  clearOrderCache();\r\n};\r\n\r\n// 刪除訂單\r\nexport const deleteOrder = async (id: string): Promise<any> => {\r\n  // 添加時間戳和隨機數，確保每次請求都是唯一的\r\n  const timestamp = Date.now();\r\n  const nonce = Math.random().toString(36).substring(2, 15);\r\n\r\n  // 構建 API 端點和參數\r\n  const params = new URLSearchParams({\r\n    _: timestamp.toString(),\r\n    nonce: nonce\r\n  });\r\n  \r\n  const endpoint = `/api/delete_order.php?${params.toString()}`;\r\n\r\n  // 處理刪除訂單的邏輯\r\n  const res = await apiCallWithFallback(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ id, timestamp, nonce }),\r\n  });\r\n  if (!res.ok) {\r\n    let errorMsg = '刪除訂單失敗';\r\n    try {\r\n      const errorResult = await res.json();\r\n      errorMsg = errorResult.message || errorMsg;\r\n    } catch (e) {\r\n      errorMsg = `刪除訂單失敗: ${res.statusText}`;\r\n    }\r\n    throw new Error(errorMsg);\r\n  }\r\n  const result = await res.json();\r\n  if (!result.success) {throw new Error(result.message || '刪除訂單失敗');}\r\n\r\n  // 成功刪除後清除快取\r\n  clearOrderCache();\r\n\r\n  // 返回完整的結果，包含重排序信息\r\n  return result;\r\n};\r\n\r\n// 批次刪除訂單\r\nexport const batchDeleteOrders = async (ids: string[]): Promise<{\r\n  success: boolean;\r\n  results: Array<{\r\n    id: string;\r\n    success: boolean;\r\n    message: string;\r\n    orderNumber?: string;\r\n  }>;\r\n  totalDeleted: number;\r\n  totalFailed: number;\r\n}> => {\r\n  // 添加時間戳和隨機數，確保每次請求都是唯一的\r\n  const timestamp = Date.now();\r\n  const nonce = Math.random().toString(36).substring(2, 15);\r\n\r\n  // 構建 API 端點和參數\r\n  const params = new URLSearchParams({\r\n    _: timestamp.toString(),\r\n    nonce: nonce\r\n  });\r\n  \r\n  const endpoint = `/api/batch_delete_orders.php?${params.toString()}`;\r\n\r\n  // 處理批次刪除訂單的邏輯\r\n  const res = await apiCallWithFallback(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ ids, timestamp, nonce }),\r\n  });\r\n\r\n  if (!res.ok) {\r\n    let errorMsg = '批次刪除訂單失敗';\r\n    try {\r\n      const errorResult = await res.json();\r\n      errorMsg = errorResult.message || errorMsg;\r\n    } catch (e) {\r\n      errorMsg = `批次刪除訂單失敗: ${res.statusText}`;\r\n    }\r\n    throw new Error(errorMsg);\r\n  }\r\n\r\n  const result = await res.json();\r\n  if (!result.success) {throw new Error(result.message || '批次刪除訂單失敗');}\r\n\r\n  // 成功刪除後清除快取\r\n  clearOrderCache();\r\n\r\n  // 返回完整的結果\r\n  return result;\r\n};\r\n\r\n// 重複訂單檢測相關類型定義\r\nexport interface DuplicateOrder {\r\n  id: string;\r\n  orderNumber: string;\r\n  customerName: string;\r\n  customerPhone: string;\r\n  normalizedPhone: string; // 標準化後的電話號碼（用於比對）\r\n}\r\n\r\nexport interface DuplicateGroup {\r\n  phone: string; // 顯示用的電話號碼\r\n  normalizedPhone: string; // 標準化後的電話號碼\r\n  orders: DuplicateOrder[];\r\n  count: number;\r\n}\r\n\r\n// 標準化電話號碼（只保留數字，取後9碼）\r\nconst normalizePhone = (phone: string): string => {\r\n  if (!phone) {return '';}\r\n  // 移除所有非數字字符\r\n  const digitsOnly = phone.replace(/[^0-9]/g, '');\r\n  // 取後9碼進行比較（如果電話號碼長度大於9）\r\n  return digitsOnly.length >= 9 ? digitsOnly.slice(-9) : digitsOnly;\r\n};\r\n\r\n// 檢測重複訂單\r\nexport const detectDuplicateOrders = (orders: Order[]): DuplicateGroup[] => {\r\n  // 按標準化電話號碼分組\r\n  const phoneGroups = new Map<string, DuplicateOrder[]>();\r\n\r\n  orders.forEach(order => {\r\n    const normalizedPhone = normalizePhone(order.customer.phone);\r\n    if (!normalizedPhone) {return;} // 跳過無效電話號碼\r\n\r\n    const duplicateOrder: DuplicateOrder = {\r\n      id: order.id,\r\n      orderNumber: order.orderNumber,\r\n      customerName: order.customer.name,\r\n      customerPhone: order.customer.phone,\r\n      normalizedPhone\r\n    };\r\n\r\n    if (!phoneGroups.has(normalizedPhone)) {\r\n      phoneGroups.set(normalizedPhone, []);\r\n    }\r\n    phoneGroups.get(normalizedPhone)!.push(duplicateOrder);\r\n  });\r\n\r\n  // 只返回有重複的群組（訂單數量 > 1）\r\n  const duplicateGroups: DuplicateGroup[] = [];\r\n  phoneGroups.forEach((orders, normalizedPhone) => {\r\n    if (orders.length > 1) {\r\n      duplicateGroups.push({\r\n        phone: orders[0].customerPhone, // 使用第一個訂單的原始電話號碼作為顯示\r\n        normalizedPhone,\r\n        orders,\r\n        count: orders.length\r\n      });\r\n    }\r\n  });\r\n\r\n  // 按重複數量降序排列\r\n  return duplicateGroups.sort((a, b) => b.count - a.count);\r\n};\r\n\r\n// 檢查單個訂單是否為重複訂單\r\nexport const isOrderDuplicate = (order: Order, allOrders: Order[]): boolean => {\r\n  const normalizedPhone = normalizePhone(order.customer.phone);\r\n  if (!normalizedPhone) {return false;}\r\n\r\n  // 計算有相同標準化電話號碼的訂單數量\r\n  const samePhoneOrders = allOrders.filter(o =>\r\n    normalizePhone(o.customer.phone) === normalizedPhone\r\n  );\r\n\r\n  return samePhoneOrders.length > 1;\r\n};\r\n\r\nexport const generatePrintData = (orders: Order[]): {\r\n  orderNumber: string;\r\n  customerName: string;\r\n  customerPhone: string;\r\n  items: string;\r\n  total: number;\r\n  deliveryMethod: string;\r\n  deliveryAddress: string;\r\n  dueDate: string;\r\n  deliveryTime: string;\r\n  paymentMethod: string;\r\n  notes: string;\r\n}[] => {\r\n  // Transform orders into print format\r\n  return orders.map(order => ({\r\n    orderNumber: order.orderNumber,\r\n    customerName: order.customer.name,\r\n    customerPhone: order.customer.phone,\r\n    items: order.items.map(item => `${item.product} x ${item.quantity}`).join(', '),\r\n    total: order.total,\r\n    deliveryMethod: order.deliveryMethod,\r\n    deliveryAddress: order.deliveryAddress,\r\n    dueDate: order.dueDate,\r\n    deliveryTime: order.deliveryTime,\r\n    paymentMethod: order.paymentMethod,\r\n    notes: order.notes\r\n  }));\r\n};\r\n\r\nexport const exportToCsv = (orders: Order[]): string => {\r\n  // 黑貓宅急便格式標題\r\n  /*const headers = [\r\n    '訂單編號',\r\n    '溫層',\r\n    '規格',\r\n    '代收貨款',\r\n    '收件人-姓名',\r\n    '收件人-電話',\r\n    '收件人-地址',\r\n    '寄件人-姓名',\r\n    '寄件人-電話',\r\n    '寄件人-地址',\r\n    '出貨日期',\r\n    '希望配達日',\r\n    '希望配合時段',\r\n    '品類代碼',\r\n    '品名',\r\n    '易碎物品',\r\n    '備註'\r\n  ].join(',');*/\r\n\r\n  // 固定寄件人資訊\r\n  const senderName = '曾炳傑';\r\n  const senderPhone = '0937292815';\r\n  const senderAddress = '雲林縣西螺鎮中山路302-3號';\r\n\r\n  // 去除特殊符號工具\r\n  const removeSpecialChars = (str: string) => str.replace(/[^\\u4e00-\\u9fa5A-Za-z0-9]/g, '');\r\n  // 只保留 09 開頭的電話\r\n  const formatPhone = (phone: string) => /^09\\d{8}$/.test(phone) ? `'${phone}` : '';\r\n  // CSV欄位格式化工具，處理包含逗號、引號、換行的內容\r\n  const formatCsvField = (str: string) => {\r\n    if (!str) {return '';}\r\n    // 如果包含逗號、引號或換行符，需要用引號包圍並轉義內部引號\r\n    if (str.includes(',') || str.includes('\"') || str.includes('\\n') || str.includes('\\r')) {\r\n      return `\"${str.replace(/\"/g, '\"\"')}\"`;\r\n    }\r\n    return str;\r\n  };\r\n\r\n  const today = new Date();\r\n  const pad = (n: number) => n.toString().padStart(2, '0');\r\n  const todayStr = `${today.getFullYear()}${pad(today.getMonth() + 1)}${pad(today.getDate())}`;\r\n\r\n  // 依勾選順序自動產生訂單編號（A001~A100）\r\n  const genOrderNumber = (idx: number) => `A${(idx + 1).toString().padStart(3, '0')}`;\r\n\r\n  const rows = orders.map((order, idx) => {\r\n    // 希望配達日格式化（假設 order.dueDate 是 yyyy-mm-dd 或 yyyy/mm/dd 或 Date 物件）\r\n    let wishDate = '';\r\n    if (order.dueDate) {\r\n      const d = typeof order.dueDate === 'string' ? new Date(order.dueDate.replace(/-/g, '/')) : order.dueDate;\r\n      if (!isNaN(d.getTime())) {\r\n        // 檢查希望配達日是否在出貨日之前，如果是則設為出貨日+1\r\n        if (d <= today) {\r\n          const nextDay = new Date(today);\r\n          nextDay.setDate(today.getDate() + 1);\r\n          wishDate = `${nextDay.getFullYear()}${pad(nextDay.getMonth() + 1)}${pad(nextDay.getDate())}`;\r\n        } else {\r\n          wishDate = `${d.getFullYear()}${pad(d.getMonth() + 1)}${pad(d.getDate())}`;\r\n        }\r\n      }\r\n    }\r\n    // 如果沒有希望配達日，預設為出貨日+1\r\n    if (!wishDate) {\r\n      const nextDay = new Date(today);\r\n      nextDay.setDate(today.getDate() + 1);\r\n      wishDate = `${nextDay.getFullYear()}${pad(nextDay.getMonth() + 1)}${pad(nextDay.getDate())}`;\r\n    }\r\n    // 希望配合時段\r\n    let wishTime = '';\r\n    if (order.deliveryTime) {\r\n      if (order.deliveryTime.includes('上')) {wishTime = '1';}\r\n      else if (order.deliveryTime.includes('下')) {wishTime = '2';}\r\n    }\r\n    return [\r\n      genOrderNumber(idx), // 依序產生A001~A100訂單編號\r\n      '2',               // 溫層（固定）\r\n      '0',               // 規格（固定）\r\n      order.paymentStatus === '已收費' ? '0' : (order.paymentMethod === '貨到付款' ? order.total : '0'), // 代收貨款\r\n      removeSpecialChars(order.customer.name || ''),          // 收件人-姓名\r\n      formatPhone(order.customer.phone || ''),                // 收件人-電話\r\n      formatCsvField(order.deliveryAddress || ''),            // 收件人-地址\r\n      senderName,       // 寄件人-姓名\r\n      `'${senderPhone}`, // 寄件人-電話（強制文字格式）\r\n      senderAddress,    // 寄件人-地址\r\n      todayStr,         // 出貨日期\r\n      wishDate,         // 希望配達日\r\n      wishTime,         // 希望配合時段\r\n      '0015',           // 品類代碼（固定）\r\n      '蘿蔔糕',          // 品名（固定）\r\n      'Y',              // 易碎物品（固定）\r\n      formatCsvField(order.notes || '')                       // 備註\r\n    ].join(',');\r\n  });\r\n\r\n  // 使用標準的Unicode (UTF-8)格式\r\n  // 1. 不使用BOM標記，採用純UTF-8編碼\r\n  // 2. 使用Windows標準的CRLF換行符\r\n  // 3. 確保所有中文字符正確編碼\r\n  //const BOM = '\\uFEFF';\r\n  const csvContent = rows.join('\\r\\n');//[headers, ...rows].join('\\r\\n');\r\n\r\n  // 返回完整的CSV內容，包含BOM\r\n  return  csvContent;//BOM +csvContent;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\services\\secureApiService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\r\n\r\nclass SecureApiService {\r\n  private baseUrl = 'https://skcdapfynyszxyqqsvib.supabase.co/functions/v1';\r\n  \r\n  private getAuthToken(): string | null {\r\n    return localStorage.getItem('admin_token');\r\n  }\r\n\r\n  private async makeSecureRequest(endpoint: string, options: RequestInit = {}): Promise<Response> {\r\n    const token = this.getAuthToken();\r\n    \r\n    if (!token) {\r\n      throw new Error('未授權：請先登入');\r\n    }\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n      ...options.headers,\r\n    };\r\n\r\n    const response = await fetch(`${this.baseUrl}/${endpoint}`, {\r\n      ...options,\r\n      headers,\r\n    });\r\n\r\n    if (response.status === 401) {\r\n      // 令牌無效，清除本地存儲並重新導向登入頁\r\n      localStorage.removeItem('admin_token');\r\n      localStorage.removeItem('admin_user');\r\n      window.location.href = '/admin';\r\n      throw new Error('會話已過期，請重新登入');\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async migrateGoogleSheetsData(sheetId: string, options: { dryRun?: boolean; skipExisting?: boolean } = {}) {\r\n    try {\r\n      const response = await this.makeSecureRequest('migrate-sheets-data', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          sheetId,\r\n          dryRun: options.dryRun || false,\r\n          skipExisting: options.skipExisting || true,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(result.message || '遷移失敗');\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Google Sheets 資料遷移錯誤:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 輸入驗證和清理\r\n  static sanitizeInput(input: string): string {\r\n    return input\r\n      .replace(/[<>]/g, '') // 移除潛在的 HTML 標籤\r\n      .replace(/javascript:/gi, '') // 移除 JavaScript 協議\r\n      .replace(/on\\w+\\s*=/gi, '') // 移除事件處理器\r\n      .trim();\r\n  }\r\n\r\n  static validateEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  static validatePhone(phone: string): boolean {\r\n    const phoneRegex = /^[\\d\\s\\-+()]+$/;\r\n    return phoneRegex.test(phone) && phone.replace(/\\D/g, '').length >= 8;\r\n  }\r\n\r\n  static validateSheetId(sheetId: string): boolean {\r\n    // Google Sheets ID 格式驗證\r\n    const sheetIdRegex = /^[a-zA-Z0-9-_]{44}$/;\r\n    return sheetIdRegex.test(sheetId);\r\n  }\r\n}\r\n\r\nexport default SecureApiService;","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\types\\apiOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\types\\customer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\types\\env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\types\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\types\\global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\types\\order.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\utils\\errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":28,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 錯誤處理工具函數\nexport const handleApiError = (error: unknown) => {\n  console.error('API Error:', error);\n  \n  const err = error as { name?: string; message?: string };\n  if (err?.name === 'URIError' || err?.message?.includes('URI malformed')) {\n    console.warn('URI encoding error detected, attempting to fix...');\n    return {\n      error: 'URI_MALFORMED',\n      message: '路徑編碼錯誤，請重新載入頁面',\n      suggestion: '請清除瀏覽器快取後重新載入'\n    } as const;\n  }\n  \n  return {\n    error: 'UNKNOWN_ERROR',\n    message: err?.message || '未知錯誤',\n    suggestion: '請檢查網路連線或聯繫技術支援'\n  } as const;\n};\n\n// URL 編碼安全處理\nexport const safeEncodeURI = (uri: string): string => {\n  try {\n    // 先解碼再編碼，避免重複編碼\n    const decoded = decodeURIComponent(uri);\n    return encodeURIComponent(decoded);\n  } catch (e: unknown) {\n    console.warn('URI encoding failed, using original:', uri);\n    return uri;\n  }\n};\n\n// 安全的 URL 構建\nexport const buildSafeUrl = (base: string, path: string, params?: Record<string, string>): string => {\n  try {\n    const url = new URL(path, base);\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        url.searchParams.set(key, value);\n      });\n    }\n    \n    return url.toString();\n  } catch (e: unknown) {\n    console.error('URL construction failed:', e);\n    return `${base}${path}`;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\utils\\exportQuickStoreXlsx.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\utils\\exportUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\utils\\uriErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\supabase\\functions\\admin-auth\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\supabase\\functions\\admin-login\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\supabase\\functions\\migrate-sheets-data\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'migrateCustomers' is defined but never used. Allowed unused vars must match /^_/u.","line":150,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"jsr:@supabase/functions-js/edge-runtime.d.ts\";\r\nimport { createClient, type SupabaseClient } from 'jsr:@supabase/supabase-js@2';\r\n\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\r\n  'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n};\r\n\r\n// 為 Sheets 與 JWT 建立明確型別，避免使用 any\r\ntype SheetCell = string | number | boolean | null | undefined;\r\ntype SheetRow = SheetCell[];\r\ntype SheetMatrix = SheetRow[];\r\n\r\ninterface MigrationRequest {\r\n  sheetId: string;\r\n  dryRun?: boolean;\r\n  skipExisting?: boolean;\r\n}\r\n\r\ninterface MigrationResult {\r\n  success: boolean;\r\n  message: string;\r\n  stats: {\r\n    ordersProcessed: number;\r\n    customersProcessed: number;\r\n    productsProcessed: number;\r\n    errors: string[];\r\n  };\r\n}\r\n\r\ninterface JwtClaims {\r\n  iss: string;\r\n  scope: string;\r\n  aud: string;\r\n  exp: number;\r\n  iat: number;\r\n}\r\n\r\nasync function getGoogleSheetsData(sheetId: string, range: string, accessToken: string): Promise<SheetMatrix> {\r\n  const response = await fetch(\r\n    `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${encodeURIComponent(range)}`,\r\n    {\r\n      headers: {\r\n        'Authorization': `Bearer ${accessToken}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n  );\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Google Sheets API 錯誤: ${response.status} - ${await response.text()}`);\r\n  }\r\n\r\n  const data = await response.json();\r\n  return (data.values as SheetMatrix) || [];\r\n}\r\n\r\nasync function getAccessToken(serviceAccountKey: string): Promise<string> {\r\n  const serviceAccount = JSON.parse(serviceAccountKey);\r\n  \r\n  // 建立 JWT payload\r\n  const now = Math.floor(Date.now() / 1000);\r\n  const payload: JwtClaims = {\r\n    iss: serviceAccount.client_email,\r\n    scope: 'https://www.googleapis.com/auth/spreadsheets.readonly',\r\n    aud: 'https://oauth2.googleapis.com/token',\r\n    exp: now + 3600,\r\n    iat: now\r\n  };\r\n\r\n  // 創建 JWT (使用 Web Crypto API)\r\n  const jwt = await createJWT(payload, serviceAccount.private_key);\r\n\r\n  // 獲取 access token\r\n  const response = await fetch('https://oauth2.googleapis.com/token', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n    body: new URLSearchParams({\r\n      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n      assertion: jwt\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`OAuth 認證失敗: ${await response.text()}`);\r\n  }\r\n\r\n  const tokenData = await response.json();\r\n  return tokenData.access_token;\r\n}\r\n\r\nasync function createJWT(payload: JwtClaims, privateKey: string): Promise<string> {\r\n  const header = { alg: 'RS256', typ: 'JWT' };\r\n  \r\n  const encodedHeader = base64UrlEncode(JSON.stringify(header));\r\n  const encodedPayload = base64UrlEncode(JSON.stringify(payload));\r\n  const signingInput = `${encodedHeader}.${encodedPayload}`;\r\n\r\n  // 處理私鑰\r\n  const keyData = privateKey\r\n    .replace(/-----BEGIN PRIVATE KEY-----/, '')\r\n    .replace(/-----END PRIVATE KEY-----/, '')\r\n    .replace(/\\s/g, '');\r\n  \r\n  const binaryKey = Uint8Array.from(atob(keyData), c => c.charCodeAt(0));\r\n  const cryptoKey = await crypto.subtle.importKey(\r\n    'pkcs8',\r\n    binaryKey,\r\n    { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' },\r\n    false,\r\n    ['sign']\r\n  );\r\n\r\n  const signature = await crypto.subtle.sign(\r\n    'RSASSA-PKCS1-v1_5',\r\n    cryptoKey,\r\n    new TextEncoder().encode(signingInput)\r\n  );\r\n\r\n  const encodedSignature = base64UrlEncode(new Uint8Array(signature));\r\n  return `${signingInput}.${encodedSignature}`;\r\n}\r\n\r\nfunction base64UrlEncode(data: string | Uint8Array): string {\r\n  let base64: string;\r\n  if (typeof data === 'string') {\r\n    base64 = btoa(data);\r\n  } else {\r\n    base64 = btoa(String.fromCharCode(...data));\r\n  }\r\n  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n}\r\n\r\nfunction parseDate(dateStr: string): string | null {\r\n  if (!dateStr) {return null;}\r\n  \r\n  try {\r\n    const date = new Date(dateStr);\r\n    if (!isNaN(date.getTime())) {\r\n      return date.toISOString().split('T')[0]; // YYYY-MM-DD\r\n    }\r\n  } catch {\r\n    // 嘗試其他日期格式\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\nasync function migrateCustomers(supabase: SupabaseClient, customersData: SheetMatrix, dryRun: boolean, skipExisting: boolean) {\r\n  if (customersData.length === 0) {return { processed: 0, errors: [] };}\r\n  \r\n  const header = customersData[0];\r\n  const rows = customersData.slice(1);\r\n  const errors: string[] = [];\r\n  let processed = 0;\r\n\r\n  // 建立欄位映射\r\n  const headerMap: { [key: string]: number } = {};\r\n  header.forEach((title: string, idx: number) => {\r\n    switch (title.trim()) {\r\n      case '姓名': headerMap['name'] = idx; break;\r\n      case '電話': headerMap['phone'] = idx; break;\r\n      case '取貨方式': headerMap['deliveryMethod'] = idx; break;\r\n      case '地址': headerMap['address'] = idx; break;\r\n      case '透過什麼聯繫賣家': headerMap['contactMethod'] = idx; break;\r\n      case '社交軟體名字': headerMap['socialId'] = idx; break;\r\n      case '訂單時間': headerMap['orderTime'] = idx; break;\r\n    }\r\n  });\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    \r\n    if (!row[headerMap['name']] || !row[headerMap['phone']]) {\r\n      continue; // 跳過沒有必要資料的行\r\n    }\r\n\r\n    try {\r\n      const customerData = {\r\n        name: row[headerMap['name']]?.toString().trim() || '',\r\n        phone: row[headerMap['phone']]?.toString().trim() || '',\r\n        address: row[headerMap['address']]?.toString().trim() || '',\r\n        delivery_method: row[headerMap['deliveryMethod']]?.toString().trim() || '',\r\n        contact_method: row[headerMap['contactMethod']]?.toString().trim() || '',\r\n        social_id: row[headerMap['socialId']]?.toString().trim() || '',\r\n        created_at: parseDate(row[headerMap['orderTime']] as string) || new Date().toISOString()\r\n      };\r\n\r\n      if (dryRun) {\r\n        console.log('Dry run - 客戶資料:', customerData);\r\n        processed++;\r\n        continue;\r\n      }\r\n\r\n      // 檢查是否已存在\r\n      if (skipExisting) {\r\n        const { data: existing } = await (supabase\r\n          .from('customers')\r\n          .select('id')\r\n          .eq('phone', customerData.phone)\r\n          .single());\r\n        \r\n        if (existing) {\r\n          console.log(`客戶已存在: ${customerData.phone}`);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      const { error } = await (supabase\r\n        .from('customers')\r\n        .upsert(customerData, { onConflict: 'phone' }));\r\n\r\n      if (error) {\r\n        errors.push(`客戶 ${customerData.name}: ${error.message}`);\r\n      } else {\r\n        processed++;\r\n      }\r\n    } catch (error) {\r\n      errors.push(`處理客戶資料第 ${i + 2} 行時發生錯誤: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  return { processed, errors };\r\n}\r\n\r\nasync function migrateOrders(supabase: SupabaseClient, ordersData: SheetMatrix, dryRun: boolean, skipExisting: boolean) {\r\n  if (ordersData.length === 0) {return { processed: 0, errors: [] };}\r\n  \r\n  const rows = ordersData.slice(1); // 跳過標題行\r\n  const errors: string[] = [];\r\n  let processed = 0;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    \r\n    // 跳過空白行\r\n    if (!row[1] || row[1].toString().trim() === '') {continue;}\r\n\r\n    try {\r\n      const orderData = {\r\n        order_number: `ORD-${(i + 1).toString().padStart(3, '0')}`,\r\n        customer_name: row[1]?.toString().trim() || '',\r\n        customer_phone: row[2]?.toString().trim() || '',\r\n        delivery_method: row[3]?.toString().trim() || '',\r\n        customer_address: row[4]?.toString().trim() || '',\r\n        due_date: parseDate(row[5] as string),\r\n        delivery_time: row[6]?.toString().trim() || '',\r\n        notes: row[7]?.toString().trim() || '',\r\n        payment_method: row[12]?.toString().trim() || '',\r\n        status: row[14]?.toString().trim() || '訂單確認中',\r\n        payment_status: row[15]?.toString().trim() || '未收費',\r\n        total_amount: parseFloat(row[9] as string) || 0,\r\n        google_sheet_id: i + 1,\r\n        created_at: parseDate(row[0] as string) || new Date().toISOString()\r\n      };\r\n\r\n      if (dryRun) {\r\n        console.log('Dry run - 訂單資料:', orderData);\r\n        processed++;\r\n        continue;\r\n      }\r\n\r\n      // 檢查是否已存在\r\n      if (skipExisting) {\r\n        const { data: existing } = await supabase\r\n          .from('orders')\r\n          .select('id')\r\n          .eq('google_sheet_id', orderData.google_sheet_id)\r\n          .single();\r\n        \r\n        if (existing) {\r\n          console.log(`訂單已存在: ${orderData.order_number}`);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .upsert(orderData, { onConflict: 'google_sheet_id' });\r\n\r\n      if (error) {\r\n        errors.push(`訂單 ${orderData.order_number}: ${error.message}`);\r\n      } else {\r\n        processed++;\r\n      }\r\n    } catch (error) {\r\n      errors.push(`處理訂單資料第 ${i + 2} 行時發生錯誤: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  return { processed, errors };\r\n}\r\n\r\nDeno.serve(async (req) => {\r\n  // Handle CORS preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  // 驗證 JWT 令牌\r\n  const authHeader = req.headers.get('Authorization');\r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return new Response(\r\n      JSON.stringify({ success: false, message: '未提供授權令牌' }),\r\n      { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n\r\n  const token = authHeader.replace('Bearer ', '');\r\n  const isValidToken = await validateJWT(token);\r\n  \r\n  if (!isValidToken) {\r\n    return new Response(\r\n      JSON.stringify({ success: false, message: '無效的授權令牌' }),\r\n      { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const { sheetId, dryRun = false, skipExisting = true }: MigrationRequest = await req.json();\r\n\r\n    if (!sheetId) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, message: '請提供 Google Sheets ID' }),\r\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    // 初始化服務\r\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\r\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\r\n    const googleServiceAccountKey = Deno.env.get('GOOGLE_SERVICE_ACCOUNT_KEY')!;\r\n\r\n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\n    console.log(`開始資料遷移 - Sheet ID: ${sheetId}, 試運行: ${dryRun}`);\r\n\r\n    // 獲取 Google Sheets 存取權杖\r\n    const accessToken = await getAccessToken(googleServiceAccountKey);\r\n\r\n    // 只讀取訂單資料\r\n    const ordersData = await getGoogleSheetsData(sheetId, 'Sheet1', accessToken);\r\n\r\n    console.log(`讀取到 ${ordersData.length} 行訂單資料`);\r\n\r\n    // 只執行訂單遷移\r\n    const ordersResult = await migrateOrders(supabase, ordersData, dryRun, skipExisting);\r\n\r\n    const result: MigrationResult = {\r\n      success: true,\r\n      message: dryRun ? '試運行完成' : '資料遷移完成',\r\n      stats: {\r\n        ordersProcessed: ordersResult.processed,\r\n        customersProcessed: 0, // 已移除客戶遷移\r\n        productsProcessed: 0, // 暫時不處理商品資料\r\n        errors: ordersResult.errors\r\n      }\r\n    };\r\n\r\n    console.log('遷移結果:', result);\r\n\r\n    return new Response(\r\n      JSON.stringify(result),\r\n      { \r\n        status: 200, \r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \r\n      }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('遷移錯誤:', error);\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        message: error instanceof Error ? error.message : '遷移過程中發生錯誤',\r\n        stats: {\r\n          ordersProcessed: 0,\r\n          customersProcessed: 0,\r\n          productsProcessed: 0,\r\n          errors: [error instanceof Error ? error.message : String(error)]\r\n        }\r\n      }),\r\n      { \r\n        status: 500, \r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \r\n      }\r\n    );\r\n  }\r\n});\r\n\r\nasync function validateJWT(token: string): Promise<boolean> {\r\n  try {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {return false;}\r\n\r\n    const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\r\n    \r\n    // 檢查過期時間\r\n    if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\r\n      return false;\r\n    }\r\n\r\n    // 驗證簽名\r\n    const secret = Deno.env.get('JWT_SECRET') || 'fallback-secret-key';\r\n    const encoder = new TextEncoder();\r\n    const keyData = encoder.encode(secret);\r\n    \r\n    const key = await crypto.subtle.importKey(\r\n      'raw',\r\n      keyData,\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['verify']\r\n    );\r\n\r\n    const dataToVerify = `${parts[0]}.${parts[1]}`;\r\n    const signature = Uint8Array.from(atob(parts[2].replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0));\r\n    \r\n    return await crypto.subtle.verify('HMAC', key, signature, encoder.encode(dataToVerify));\r\n  } catch {\r\n    return false;\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\test-payment-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\cloud\\sheet-order-dashboard-main-cloudflare\\workers-example\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]